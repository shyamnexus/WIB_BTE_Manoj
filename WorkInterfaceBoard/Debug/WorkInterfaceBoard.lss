
WorkInterfaceBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004548  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404548  00404548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000044c  20000000  00404550  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a260  20000450  004049a0  0002044c  2**3
                  ALLOC
  4 .stack        00003000  2000a6b0  0040ec00  0002044c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002047a  2**0
                  CONTENTS, READONLY
  7 .debug_info   000148f5  00000000  00000000  000204d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002ae5  00000000  00000000  00034dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005e0b  00000000  00000000  000378ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b40  00000000  00000000  0003d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a10  00000000  00000000  0003e1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00017d5d  00000000  00000000  0003ec08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d2a1  00000000  00000000  00056965  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000614ac  00000000  00000000  00063c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002f44  00000000  00000000  000c50b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	b0 d6 00 20 65 01 40 00 e9 01 40 00 e9 01 40 00     ... e.@...@...@.
  400010:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	7d 08 40 00 e9 01 40 00 00 00 00 00 8d 09 40 00     }.@...@.......@.
  40003c:	e1 09 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40004c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40005c:	e9 01 40 00 89 05 40 00 a1 05 40 00 b9 05 40 00     ..@...@...@...@.
  40006c:	d1 05 40 00 e9 05 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40007c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40008c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40009c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ac:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000bc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000cc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000dc:	e9 01 40 00 e9 01 40 00 00 00 00 00 00 00 00 00     ..@...@.........
	...

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000450 	.word	0x20000450
  400114:	00000000 	.word	0x00000000
  400118:	00404550 	.word	0x00404550

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00404550 	.word	0x00404550
  400158:	20000454 	.word	0x20000454
  40015c:	00404550 	.word	0x00404550
  400160:	00000000 	.word	0x00000000

00400164 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400164:	b580      	push	{r7, lr}
  400166:	b082      	sub	sp, #8
  400168:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40016a:	4b16      	ldr	r3, [pc, #88]	; (4001c4 <Reset_Handler+0x60>)
  40016c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  40016e:	4b16      	ldr	r3, [pc, #88]	; (4001c8 <Reset_Handler+0x64>)
  400170:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  400172:	687a      	ldr	r2, [r7, #4]
  400174:	683b      	ldr	r3, [r7, #0]
  400176:	429a      	cmp	r2, r3
  400178:	d00c      	beq.n	400194 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40017a:	e007      	b.n	40018c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  40017c:	683b      	ldr	r3, [r7, #0]
  40017e:	1d1a      	adds	r2, r3, #4
  400180:	603a      	str	r2, [r7, #0]
  400182:	687a      	ldr	r2, [r7, #4]
  400184:	1d11      	adds	r1, r2, #4
  400186:	6079      	str	r1, [r7, #4]
  400188:	6812      	ldr	r2, [r2, #0]
  40018a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  40018c:	683b      	ldr	r3, [r7, #0]
  40018e:	4a0f      	ldr	r2, [pc, #60]	; (4001cc <Reset_Handler+0x68>)
  400190:	4293      	cmp	r3, r2
  400192:	d3f3      	bcc.n	40017c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400194:	4b0e      	ldr	r3, [pc, #56]	; (4001d0 <Reset_Handler+0x6c>)
  400196:	603b      	str	r3, [r7, #0]
  400198:	e004      	b.n	4001a4 <Reset_Handler+0x40>
                *pDest++ = 0;
  40019a:	683b      	ldr	r3, [r7, #0]
  40019c:	1d1a      	adds	r2, r3, #4
  40019e:	603a      	str	r2, [r7, #0]
  4001a0:	2200      	movs	r2, #0
  4001a2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  4001a4:	683b      	ldr	r3, [r7, #0]
  4001a6:	4a0b      	ldr	r2, [pc, #44]	; (4001d4 <Reset_Handler+0x70>)
  4001a8:	4293      	cmp	r3, r2
  4001aa:	d3f6      	bcc.n	40019a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4001ac:	4b0a      	ldr	r3, [pc, #40]	; (4001d8 <Reset_Handler+0x74>)
  4001ae:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4001b0:	4a0a      	ldr	r2, [pc, #40]	; (4001dc <Reset_Handler+0x78>)
  4001b2:	687b      	ldr	r3, [r7, #4]
  4001b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4001b8:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  4001ba:	4b09      	ldr	r3, [pc, #36]	; (4001e0 <Reset_Handler+0x7c>)
  4001bc:	4798      	blx	r3

        /* Branch to main function */
        main();
  4001be:	4b09      	ldr	r3, [pc, #36]	; (4001e4 <Reset_Handler+0x80>)
  4001c0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4001c2:	e7fe      	b.n	4001c2 <Reset_Handler+0x5e>
  4001c4:	00404550 	.word	0x00404550
  4001c8:	20000000 	.word	0x20000000
  4001cc:	2000044c 	.word	0x2000044c
  4001d0:	20000450 	.word	0x20000450
  4001d4:	2000a6b0 	.word	0x2000a6b0
  4001d8:	00400000 	.word	0x00400000
  4001dc:	e000ed00 	.word	0xe000ed00
  4001e0:	004040c1 	.word	0x004040c1
  4001e4:	004003d9 	.word	0x004003d9

004001e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e8:	b480      	push	{r7}
  4001ea:	af00      	add	r7, sp, #0
        while (1) {
  4001ec:	e7fe      	b.n	4001ec <Dummy_Handler+0x4>
	...

004001f0 <SystemInit>:
/**
 * \brief Setup the microcontroller system.
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  4001f0:	b580      	push	{r7, lr}
  4001f2:	af00      	add	r7, sp, #0
	/* Set max FWS pre-switching; sysclk_init will set correct FWS afterwards */
	EFC->EEFC_FMR = EEFC_FMR_FWS(5);
  4001f4:	4b18      	ldr	r3, [pc, #96]	; (400258 <SystemInit+0x68>)
  4001f6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
  4001fa:	601a      	str	r2, [r3, #0]

	/* Ensure main crystal is started and selected as MAINCK */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  4001fc:	4b17      	ldr	r3, [pc, #92]	; (40025c <SystemInit+0x6c>)
  4001fe:	6a1b      	ldr	r3, [r3, #32]
  400200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400204:	2b00      	cmp	r3, #0
  400206:	d109      	bne.n	40021c <SystemInit+0x2c>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
  400208:	4b14      	ldr	r3, [pc, #80]	; (40025c <SystemInit+0x6c>)
  40020a:	4a15      	ldr	r2, [pc, #84]	; (400260 <SystemInit+0x70>)
  40020c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {}
  40020e:	bf00      	nop
  400210:	4b12      	ldr	r3, [pc, #72]	; (40025c <SystemInit+0x6c>)
  400212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400214:	f003 0301 	and.w	r3, r3, #1
  400218:	2b00      	cmp	r3, #0
  40021a:	d0f9      	beq.n	400210 <SystemInit+0x20>
	}
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
  40021c:	4b0f      	ldr	r3, [pc, #60]	; (40025c <SystemInit+0x6c>)
  40021e:	4a11      	ldr	r2, [pc, #68]	; (400264 <SystemInit+0x74>)
  400220:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {}
  400222:	bf00      	nop
  400224:	4b0d      	ldr	r3, [pc, #52]	; (40025c <SystemInit+0x6c>)
  400226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40022c:	2b00      	cmp	r3, #0
  40022e:	d0f9      	beq.n	400224 <SystemInit+0x34>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
  400230:	4a0a      	ldr	r2, [pc, #40]	; (40025c <SystemInit+0x6c>)
  400232:	4b0a      	ldr	r3, [pc, #40]	; (40025c <SystemInit+0x6c>)
  400234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400236:	f023 0303 	bic.w	r3, r3, #3
  40023a:	f043 0301 	orr.w	r3, r3, #1
  40023e:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {}
  400240:	bf00      	nop
  400242:	4b06      	ldr	r3, [pc, #24]	; (40025c <SystemInit+0x6c>)
  400244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400246:	f003 0308 	and.w	r3, r3, #8
  40024a:	2b00      	cmp	r3, #0
  40024c:	d0f9      	beq.n	400242 <SystemInit+0x52>

	/* Do not configure PLLA here. ASF sysclk_init() will do it using conf_clock.h */

	/* Update SystemCoreClock to current MAINCK prescaled value; sysclk will update after */
	SystemCoreClockUpdate();
  40024e:	4b06      	ldr	r3, [pc, #24]	; (400268 <SystemInit+0x78>)
  400250:	4798      	blx	r3
}
  400252:	bf00      	nop
  400254:	bd80      	pop	{r7, pc}
  400256:	bf00      	nop
  400258:	400e0a00 	.word	0x400e0a00
  40025c:	400e0400 	.word	0x400e0400
  400260:	00370809 	.word	0x00370809
  400264:	01370809 	.word	0x01370809
  400268:	0040026d 	.word	0x0040026d

0040026c <SystemCoreClockUpdate>:

void SystemCoreClockUpdate( void )
{
  40026c:	b480      	push	{r7}
  40026e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400270:	4b52      	ldr	r3, [pc, #328]	; (4003bc <SystemCoreClockUpdate+0x150>)
  400272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400274:	f003 0303 	and.w	r3, r3, #3
  400278:	2b01      	cmp	r3, #1
  40027a:	d014      	beq.n	4002a6 <SystemCoreClockUpdate+0x3a>
  40027c:	2b01      	cmp	r3, #1
  40027e:	d302      	bcc.n	400286 <SystemCoreClockUpdate+0x1a>
  400280:	2b02      	cmp	r3, #2
  400282:	d038      	beq.n	4002f6 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
		break;

    default:
		break;
  400284:	e07a      	b.n	40037c <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400286:	4b4e      	ldr	r3, [pc, #312]	; (4003c0 <SystemCoreClockUpdate+0x154>)
  400288:	695b      	ldr	r3, [r3, #20]
  40028a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40028e:	2b00      	cmp	r3, #0
  400290:	d004      	beq.n	40029c <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400292:	4b4c      	ldr	r3, [pc, #304]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  400294:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400298:	601a      	str	r2, [r3, #0]
		break;
  40029a:	e06f      	b.n	40037c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40029c:	4b49      	ldr	r3, [pc, #292]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  40029e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4002a2:	601a      	str	r2, [r3, #0]
		break;
  4002a4:	e06a      	b.n	40037c <SystemCoreClockUpdate+0x110>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4002a6:	4b45      	ldr	r3, [pc, #276]	; (4003bc <SystemCoreClockUpdate+0x150>)
  4002a8:	6a1b      	ldr	r3, [r3, #32]
  4002aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4002ae:	2b00      	cmp	r3, #0
  4002b0:	d003      	beq.n	4002ba <SystemCoreClockUpdate+0x4e>
			SystemCoreClock = BOARD_FREQ_MAINCK_XTAL;
  4002b2:	4b44      	ldr	r3, [pc, #272]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  4002b4:	4a44      	ldr	r2, [pc, #272]	; (4003c8 <SystemCoreClockUpdate+0x15c>)
  4002b6:	601a      	str	r2, [r3, #0]
		break;
  4002b8:	e060      	b.n	40037c <SystemCoreClockUpdate+0x110>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4002ba:	4b42      	ldr	r3, [pc, #264]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  4002bc:	4a43      	ldr	r2, [pc, #268]	; (4003cc <SystemCoreClockUpdate+0x160>)
  4002be:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4002c0:	4b3e      	ldr	r3, [pc, #248]	; (4003bc <SystemCoreClockUpdate+0x150>)
  4002c2:	6a1b      	ldr	r3, [r3, #32]
  4002c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4002c8:	2b10      	cmp	r3, #16
  4002ca:	d004      	beq.n	4002d6 <SystemCoreClockUpdate+0x6a>
  4002cc:	2b20      	cmp	r3, #32
  4002ce:	d008      	beq.n	4002e2 <SystemCoreClockUpdate+0x76>
  4002d0:	2b00      	cmp	r3, #0
  4002d2:	d00e      	beq.n	4002f2 <SystemCoreClockUpdate+0x86>
				break;
  4002d4:	e00e      	b.n	4002f4 <SystemCoreClockUpdate+0x88>
          SystemCoreClock *= 2U;
  4002d6:	4b3b      	ldr	r3, [pc, #236]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  4002d8:	681b      	ldr	r3, [r3, #0]
  4002da:	005b      	lsls	r3, r3, #1
  4002dc:	4a39      	ldr	r2, [pc, #228]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  4002de:	6013      	str	r3, [r2, #0]
				break;
  4002e0:	e008      	b.n	4002f4 <SystemCoreClockUpdate+0x88>
          SystemCoreClock *= 3U;
  4002e2:	4b38      	ldr	r3, [pc, #224]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  4002e4:	681a      	ldr	r2, [r3, #0]
  4002e6:	4613      	mov	r3, r2
  4002e8:	005b      	lsls	r3, r3, #1
  4002ea:	4413      	add	r3, r2
  4002ec:	4a35      	ldr	r2, [pc, #212]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  4002ee:	6013      	str	r3, [r2, #0]
				break;
  4002f0:	e000      	b.n	4002f4 <SystemCoreClockUpdate+0x88>
				break;
  4002f2:	bf00      	nop
		break;
  4002f4:	e042      	b.n	40037c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4002f6:	4b31      	ldr	r3, [pc, #196]	; (4003bc <SystemCoreClockUpdate+0x150>)
  4002f8:	6a1b      	ldr	r3, [r3, #32]
  4002fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4002fe:	2b00      	cmp	r3, #0
  400300:	d003      	beq.n	40030a <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;	//MK :check here
  400302:	4b30      	ldr	r3, [pc, #192]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  400304:	4a32      	ldr	r2, [pc, #200]	; (4003d0 <SystemCoreClockUpdate+0x164>)
  400306:	601a      	str	r2, [r3, #0]
  400308:	e01c      	b.n	400344 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40030a:	4b2e      	ldr	r3, [pc, #184]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  40030c:	4a2f      	ldr	r2, [pc, #188]	; (4003cc <SystemCoreClockUpdate+0x160>)
  40030e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400310:	4b2a      	ldr	r3, [pc, #168]	; (4003bc <SystemCoreClockUpdate+0x150>)
  400312:	6a1b      	ldr	r3, [r3, #32]
  400314:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400318:	2b10      	cmp	r3, #16
  40031a:	d004      	beq.n	400326 <SystemCoreClockUpdate+0xba>
  40031c:	2b20      	cmp	r3, #32
  40031e:	d008      	beq.n	400332 <SystemCoreClockUpdate+0xc6>
  400320:	2b00      	cmp	r3, #0
  400322:	d00e      	beq.n	400342 <SystemCoreClockUpdate+0xd6>
          break;
  400324:	e00e      	b.n	400344 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  400326:	4b27      	ldr	r3, [pc, #156]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  400328:	681b      	ldr	r3, [r3, #0]
  40032a:	005b      	lsls	r3, r3, #1
  40032c:	4a25      	ldr	r2, [pc, #148]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  40032e:	6013      	str	r3, [r2, #0]
          break;
  400330:	e008      	b.n	400344 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  400332:	4b24      	ldr	r3, [pc, #144]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  400334:	681a      	ldr	r2, [r3, #0]
  400336:	4613      	mov	r3, r2
  400338:	005b      	lsls	r3, r3, #1
  40033a:	4413      	add	r3, r2
  40033c:	4a21      	ldr	r2, [pc, #132]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  40033e:	6013      	str	r3, [r2, #0]
          break;
  400340:	e000      	b.n	400344 <SystemCoreClockUpdate+0xd8>
          break;
  400342:	bf00      	nop
      if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400344:	4b1d      	ldr	r3, [pc, #116]	; (4003bc <SystemCoreClockUpdate+0x150>)
  400346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400348:	f003 0303 	and.w	r3, r3, #3
  40034c:	2b02      	cmp	r3, #2
  40034e:	d114      	bne.n	40037a <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400350:	4b1a      	ldr	r3, [pc, #104]	; (4003bc <SystemCoreClockUpdate+0x150>)
  400352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  400354:	0c1b      	lsrs	r3, r3, #16
  400356:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40035a:	3301      	adds	r3, #1
  40035c:	4a19      	ldr	r2, [pc, #100]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  40035e:	6812      	ldr	r2, [r2, #0]
  400360:	fb02 f303 	mul.w	r3, r2, r3
  400364:	4a17      	ldr	r2, [pc, #92]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  400366:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400368:	4b14      	ldr	r3, [pc, #80]	; (4003bc <SystemCoreClockUpdate+0x150>)
  40036a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40036c:	b2db      	uxtb	r3, r3
  40036e:	4a15      	ldr	r2, [pc, #84]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  400370:	6812      	ldr	r2, [r2, #0]
  400372:	fbb2 f3f3 	udiv	r3, r2, r3
  400376:	4a13      	ldr	r2, [pc, #76]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  400378:	6013      	str	r3, [r2, #0]
		break;
  40037a:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3)
  40037c:	4b0f      	ldr	r3, [pc, #60]	; (4003bc <SystemCoreClockUpdate+0x150>)
  40037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400380:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400384:	2b70      	cmp	r3, #112	; 0x70
  400386:	d108      	bne.n	40039a <SystemCoreClockUpdate+0x12e>
  {
		SystemCoreClock /= 3U;
  400388:	4b0e      	ldr	r3, [pc, #56]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  40038a:	681b      	ldr	r3, [r3, #0]
  40038c:	4a11      	ldr	r2, [pc, #68]	; (4003d4 <SystemCoreClockUpdate+0x168>)
  40038e:	fba2 2303 	umull	r2, r3, r2, r3
  400392:	085b      	lsrs	r3, r3, #1
  400394:	4a0b      	ldr	r2, [pc, #44]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  400396:	6013      	str	r3, [r2, #0]
	}
  else
  {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  400398:	e00a      	b.n	4003b0 <SystemCoreClockUpdate+0x144>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40039a:	4b08      	ldr	r3, [pc, #32]	; (4003bc <SystemCoreClockUpdate+0x150>)
  40039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40039e:	091b      	lsrs	r3, r3, #4
  4003a0:	f003 0307 	and.w	r3, r3, #7
  4003a4:	4a07      	ldr	r2, [pc, #28]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  4003a6:	6812      	ldr	r2, [r2, #0]
  4003a8:	fa22 f303 	lsr.w	r3, r2, r3
  4003ac:	4a05      	ldr	r2, [pc, #20]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  4003ae:	6013      	str	r3, [r2, #0]
}
  4003b0:	bf00      	nop
  4003b2:	46bd      	mov	sp, r7
  4003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003b8:	4770      	bx	lr
  4003ba:	bf00      	nop
  4003bc:	400e0400 	.word	0x400e0400
  4003c0:	400e1810 	.word	0x400e1810
  4003c4:	2000000c 	.word	0x2000000c
  4003c8:	00f42400 	.word	0x00f42400
  4003cc:	003d0900 	.word	0x003d0900
  4003d0:	00b71b00 	.word	0x00b71b00
  4003d4:	aaaaaaab 	.word	0xaaaaaaab

004003d8 <main>:
#include "WIB_Init.h"
#include "can_app.h"
#include "tasks.h"

int main (void)
{
  4003d8:	b580      	push	{r7, lr}
  4003da:	af00      	add	r7, sp, #0
//	sysclk_init(); // Initialize system clocks based on board configuration
//	board_init(); // Initialize board-specific pins/peripherals (as configured)
	//ioport_init(); // Optional: initialize I/O port service if used

	/* Initialize TIB hardware */
	WIB_Init();
  4003dc:	4b07      	ldr	r3, [pc, #28]	; (4003fc <main+0x24>)
  4003de:	4798      	blx	r3
	
	/* Initialize CAN controller */
	if (!can_app_init()) {
  4003e0:	4b07      	ldr	r3, [pc, #28]	; (400400 <main+0x28>)
  4003e2:	4798      	blx	r3
  4003e4:	4603      	mov	r3, r0
  4003e6:	f083 0301 	eor.w	r3, r3, #1
  4003ea:	b2db      	uxtb	r3, r3
  4003ec:	2b00      	cmp	r3, #0
  4003ee:	d000      	beq.n	4003f2 <main+0x1a>
		// CAN initialization failed - handle error
		while(1); // Stop execution if CAN fails
  4003f0:	e7fe      	b.n	4003f0 <main+0x18>
	
	/* Note: Encoder initialization is handled in the encoder_task with interrupt-based approach */
	

	/* Create FreeRTOS tasks */
	create_application_tasks();
  4003f2:	4b04      	ldr	r3, [pc, #16]	; (400404 <main+0x2c>)
  4003f4:	4798      	blx	r3
	
	/* Start FreeRTOS scheduler */
	vTaskStartScheduler();
  4003f6:	4b04      	ldr	r3, [pc, #16]	; (400408 <main+0x30>)
  4003f8:	4798      	blx	r3

	/* Should never reach here */
	while(1);
  4003fa:	e7fe      	b.n	4003fa <main+0x22>
  4003fc:	0040341d 	.word	0x0040341d
  400400:	00402821 	.word	0x00402821
  400404:	00403371 	.word	0x00403371
  400408:	004016dd 	.word	0x004016dd

0040040c <board_init>:
#include "asf.h"

void board_init(void)
{
  40040c:	b590      	push	{r4, r7, lr}
  40040e:	b083      	sub	sp, #12
  400410:	af02      	add	r7, sp, #8
    // Enable peripheral clocks for PIO controllers
    pmc_enable_periph_clk(ID_PIOA);
  400412:	2009      	movs	r0, #9
  400414:	4b21      	ldr	r3, [pc, #132]	; (40049c <board_init+0x90>)
  400416:	4798      	blx	r3
    pmc_enable_periph_clk(ID_PIOD);
  400418:	200c      	movs	r0, #12
  40041a:	4b20      	ldr	r3, [pc, #128]	; (40049c <board_init+0x90>)
  40041c:	4798      	blx	r3
  
    /***********************
     * ENCODER PINS
     ***********************/
    // Encoder 1 pins (PA5, PA1) - configured as TC peripheral pins
    pio_configure(PIOA, PIO_PERIPH_A, PIO_PA5, PIO_DEFAULT);  // TIOA0
  40041e:	2300      	movs	r3, #0
  400420:	2220      	movs	r2, #32
  400422:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400426:	481e      	ldr	r0, [pc, #120]	; (4004a0 <board_init+0x94>)
  400428:	4c1e      	ldr	r4, [pc, #120]	; (4004a4 <board_init+0x98>)
  40042a:	47a0      	blx	r4
    pio_configure(PIOA, PIO_PERIPH_A, PIO_PA1, PIO_DEFAULT);  // TIOB0
  40042c:	2300      	movs	r3, #0
  40042e:	2202      	movs	r2, #2
  400430:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400434:	481a      	ldr	r0, [pc, #104]	; (4004a0 <board_init+0x94>)
  400436:	4c1b      	ldr	r4, [pc, #108]	; (4004a4 <board_init+0x98>)
  400438:	47a0      	blx	r4
    
    // Encoder 2 pins (PA15, PA16) - configured as TC peripheral pins
    pio_configure(PIOA, PIO_PERIPH_A, PIO_PA15, PIO_DEFAULT); // TIOA1
  40043a:	2300      	movs	r3, #0
  40043c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400440:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400444:	4816      	ldr	r0, [pc, #88]	; (4004a0 <board_init+0x94>)
  400446:	4c17      	ldr	r4, [pc, #92]	; (4004a4 <board_init+0x98>)
  400448:	47a0      	blx	r4
    pio_configure(PIOA, PIO_PERIPH_A, PIO_PA16, PIO_DEFAULT); // TIOB1
  40044a:	2300      	movs	r3, #0
  40044c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400450:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400454:	4812      	ldr	r0, [pc, #72]	; (4004a0 <board_init+0x94>)
  400456:	4c13      	ldr	r4, [pc, #76]	; (4004a4 <board_init+0x98>)
  400458:	47a0      	blx	r4
    // Encoder enable pins (PD17, PD27) - configured as outputs, low = enabled
    pio_set_output(PIOD, PIO_PD17, 1, 0, 0);  // ENC1_ENABLE (initially high)
  40045a:	2300      	movs	r3, #0
  40045c:	9300      	str	r3, [sp, #0]
  40045e:	2300      	movs	r3, #0
  400460:	2201      	movs	r2, #1
  400462:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400466:	4810      	ldr	r0, [pc, #64]	; (4004a8 <board_init+0x9c>)
  400468:	4c10      	ldr	r4, [pc, #64]	; (4004ac <board_init+0xa0>)
  40046a:	47a0      	blx	r4
    pio_set_output(PIOD, PIO_PD27, 1, 0, 0);  // ENC2_ENABLE (initially high)
  40046c:	2300      	movs	r3, #0
  40046e:	9300      	str	r3, [sp, #0]
  400470:	2300      	movs	r3, #0
  400472:	2201      	movs	r2, #1
  400474:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400478:	480b      	ldr	r0, [pc, #44]	; (4004a8 <board_init+0x9c>)
  40047a:	4c0c      	ldr	r4, [pc, #48]	; (4004ac <board_init+0xa0>)
  40047c:	47a0      	blx	r4
    pio_clear(PIOD, PIO_PD17);  // Enable encoder 1 (set low)
  40047e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400482:	4809      	ldr	r0, [pc, #36]	; (4004a8 <board_init+0x9c>)
  400484:	4b0a      	ldr	r3, [pc, #40]	; (4004b0 <board_init+0xa4>)
  400486:	4798      	blx	r3
    pio_clear(PIOD, PIO_PD27);  // Enable encoder 2 (set low)
  400488:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40048c:	4806      	ldr	r0, [pc, #24]	; (4004a8 <board_init+0x9c>)
  40048e:	4b08      	ldr	r3, [pc, #32]	; (4004b0 <board_init+0xa4>)
  400490:	4798      	blx	r3


}
  400492:	bf00      	nop
  400494:	3704      	adds	r7, #4
  400496:	46bd      	mov	sp, r7
  400498:	bd90      	pop	{r4, r7, pc}
  40049a:	bf00      	nop
  40049c:	00403d2d 	.word	0x00403d2d
  4004a0:	400e0e00 	.word	0x400e0e00
  4004a4:	00403c15 	.word	0x00403c15
  4004a8:	400e1400 	.word	0x400e1400
  4004ac:	00403bb1 	.word	0x00403bb1
  4004b0:	00403a05 	.word	0x00403a05

004004b4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4004b4:	b580      	push	{r7, lr}
  4004b6:	b084      	sub	sp, #16
  4004b8:	af00      	add	r7, sp, #0
  4004ba:	6078      	str	r0, [r7, #4]
  4004bc:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4004be:	6878      	ldr	r0, [r7, #4]
  4004c0:	4b2c      	ldr	r3, [pc, #176]	; (400574 <pio_handler_process+0xc0>)
  4004c2:	4798      	blx	r3
  4004c4:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4004c6:	6878      	ldr	r0, [r7, #4]
  4004c8:	4b2b      	ldr	r3, [pc, #172]	; (400578 <pio_handler_process+0xc4>)
  4004ca:	4798      	blx	r3
  4004cc:	4602      	mov	r2, r0
  4004ce:	68fb      	ldr	r3, [r7, #12]
  4004d0:	4013      	ands	r3, r2
  4004d2:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4004d4:	68fb      	ldr	r3, [r7, #12]
  4004d6:	2b00      	cmp	r3, #0
  4004d8:	d03c      	beq.n	400554 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4004da:	2300      	movs	r3, #0
  4004dc:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4004de:	e034      	b.n	40054a <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4004e0:	4a26      	ldr	r2, [pc, #152]	; (40057c <pio_handler_process+0xc8>)
  4004e2:	68bb      	ldr	r3, [r7, #8]
  4004e4:	011b      	lsls	r3, r3, #4
  4004e6:	4413      	add	r3, r2
  4004e8:	681a      	ldr	r2, [r3, #0]
  4004ea:	683b      	ldr	r3, [r7, #0]
  4004ec:	429a      	cmp	r2, r3
  4004ee:	d126      	bne.n	40053e <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4004f0:	4a22      	ldr	r2, [pc, #136]	; (40057c <pio_handler_process+0xc8>)
  4004f2:	68bb      	ldr	r3, [r7, #8]
  4004f4:	011b      	lsls	r3, r3, #4
  4004f6:	4413      	add	r3, r2
  4004f8:	3304      	adds	r3, #4
  4004fa:	681a      	ldr	r2, [r3, #0]
  4004fc:	68fb      	ldr	r3, [r7, #12]
  4004fe:	4013      	ands	r3, r2
  400500:	2b00      	cmp	r3, #0
  400502:	d01c      	beq.n	40053e <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400504:	4a1d      	ldr	r2, [pc, #116]	; (40057c <pio_handler_process+0xc8>)
  400506:	68bb      	ldr	r3, [r7, #8]
  400508:	011b      	lsls	r3, r3, #4
  40050a:	4413      	add	r3, r2
  40050c:	330c      	adds	r3, #12
  40050e:	681b      	ldr	r3, [r3, #0]
  400510:	491a      	ldr	r1, [pc, #104]	; (40057c <pio_handler_process+0xc8>)
  400512:	68ba      	ldr	r2, [r7, #8]
  400514:	0112      	lsls	r2, r2, #4
  400516:	440a      	add	r2, r1
  400518:	6810      	ldr	r0, [r2, #0]
  40051a:	4918      	ldr	r1, [pc, #96]	; (40057c <pio_handler_process+0xc8>)
  40051c:	68ba      	ldr	r2, [r7, #8]
  40051e:	0112      	lsls	r2, r2, #4
  400520:	440a      	add	r2, r1
  400522:	3204      	adds	r2, #4
  400524:	6812      	ldr	r2, [r2, #0]
  400526:	4611      	mov	r1, r2
  400528:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40052a:	4a14      	ldr	r2, [pc, #80]	; (40057c <pio_handler_process+0xc8>)
  40052c:	68bb      	ldr	r3, [r7, #8]
  40052e:	011b      	lsls	r3, r3, #4
  400530:	4413      	add	r3, r2
  400532:	3304      	adds	r3, #4
  400534:	681b      	ldr	r3, [r3, #0]
  400536:	43db      	mvns	r3, r3
  400538:	68fa      	ldr	r2, [r7, #12]
  40053a:	4013      	ands	r3, r2
  40053c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40053e:	68bb      	ldr	r3, [r7, #8]
  400540:	3301      	adds	r3, #1
  400542:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400544:	68bb      	ldr	r3, [r7, #8]
  400546:	2b06      	cmp	r3, #6
  400548:	d803      	bhi.n	400552 <pio_handler_process+0x9e>
		while (status != 0) {
  40054a:	68fb      	ldr	r3, [r7, #12]
  40054c:	2b00      	cmp	r3, #0
  40054e:	d1c7      	bne.n	4004e0 <pio_handler_process+0x2c>
  400550:	e000      	b.n	400554 <pio_handler_process+0xa0>
				break;
  400552:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400554:	4b0a      	ldr	r3, [pc, #40]	; (400580 <pio_handler_process+0xcc>)
  400556:	681b      	ldr	r3, [r3, #0]
  400558:	2b00      	cmp	r3, #0
  40055a:	d007      	beq.n	40056c <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  40055c:	4b09      	ldr	r3, [pc, #36]	; (400584 <pio_handler_process+0xd0>)
  40055e:	681b      	ldr	r3, [r3, #0]
  400560:	2b00      	cmp	r3, #0
  400562:	d003      	beq.n	40056c <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  400564:	4b07      	ldr	r3, [pc, #28]	; (400584 <pio_handler_process+0xd0>)
  400566:	681b      	ldr	r3, [r3, #0]
  400568:	6878      	ldr	r0, [r7, #4]
  40056a:	4798      	blx	r3
		}
	}
#endif
}
  40056c:	bf00      	nop
  40056e:	3710      	adds	r7, #16
  400570:	46bd      	mov	sp, r7
  400572:	bd80      	pop	{r7, pc}
  400574:	00403cfd 	.word	0x00403cfd
  400578:	00403d15 	.word	0x00403d15
  40057c:	2000046c 	.word	0x2000046c
  400580:	2000a688 	.word	0x2000a688
  400584:	200004dc 	.word	0x200004dc

00400588 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400588:	b580      	push	{r7, lr}
  40058a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  40058c:	2109      	movs	r1, #9
  40058e:	4802      	ldr	r0, [pc, #8]	; (400598 <PIOA_Handler+0x10>)
  400590:	4b02      	ldr	r3, [pc, #8]	; (40059c <PIOA_Handler+0x14>)
  400592:	4798      	blx	r3
}
  400594:	bf00      	nop
  400596:	bd80      	pop	{r7, pc}
  400598:	400e0e00 	.word	0x400e0e00
  40059c:	004004b5 	.word	0x004004b5

004005a0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4005a0:	b580      	push	{r7, lr}
  4005a2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4005a4:	210a      	movs	r1, #10
  4005a6:	4802      	ldr	r0, [pc, #8]	; (4005b0 <PIOB_Handler+0x10>)
  4005a8:	4b02      	ldr	r3, [pc, #8]	; (4005b4 <PIOB_Handler+0x14>)
  4005aa:	4798      	blx	r3
}
  4005ac:	bf00      	nop
  4005ae:	bd80      	pop	{r7, pc}
  4005b0:	400e1000 	.word	0x400e1000
  4005b4:	004004b5 	.word	0x004004b5

004005b8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4005b8:	b580      	push	{r7, lr}
  4005ba:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4005bc:	210b      	movs	r1, #11
  4005be:	4802      	ldr	r0, [pc, #8]	; (4005c8 <PIOC_Handler+0x10>)
  4005c0:	4b02      	ldr	r3, [pc, #8]	; (4005cc <PIOC_Handler+0x14>)
  4005c2:	4798      	blx	r3
}
  4005c4:	bf00      	nop
  4005c6:	bd80      	pop	{r7, pc}
  4005c8:	400e1200 	.word	0x400e1200
  4005cc:	004004b5 	.word	0x004004b5

004005d0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4005d0:	b580      	push	{r7, lr}
  4005d2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4005d4:	210c      	movs	r1, #12
  4005d6:	4802      	ldr	r0, [pc, #8]	; (4005e0 <PIOD_Handler+0x10>)
  4005d8:	4b02      	ldr	r3, [pc, #8]	; (4005e4 <PIOD_Handler+0x14>)
  4005da:	4798      	blx	r3
}
  4005dc:	bf00      	nop
  4005de:	bd80      	pop	{r7, pc}
  4005e0:	400e1400 	.word	0x400e1400
  4005e4:	004004b5 	.word	0x004004b5

004005e8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4005e8:	b580      	push	{r7, lr}
  4005ea:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4005ec:	210d      	movs	r1, #13
  4005ee:	4802      	ldr	r0, [pc, #8]	; (4005f8 <PIOE_Handler+0x10>)
  4005f0:	4b02      	ldr	r3, [pc, #8]	; (4005fc <PIOE_Handler+0x14>)
  4005f2:	4798      	blx	r3
}
  4005f4:	bf00      	nop
  4005f6:	bd80      	pop	{r7, pc}
  4005f8:	400e1600 	.word	0x400e1600
  4005fc:	004004b5 	.word	0x004004b5

00400600 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  400600:	b480      	push	{r7}
  400602:	b083      	sub	sp, #12
  400604:	af00      	add	r7, sp, #0
  400606:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  400608:	687b      	ldr	r3, [r7, #4]
  40060a:	f103 0208 	add.w	r2, r3, #8
  40060e:	687b      	ldr	r3, [r7, #4]
  400610:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400612:	687b      	ldr	r3, [r7, #4]
  400614:	f04f 32ff 	mov.w	r2, #4294967295
  400618:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  40061a:	687b      	ldr	r3, [r7, #4]
  40061c:	f103 0208 	add.w	r2, r3, #8
  400620:	687b      	ldr	r3, [r7, #4]
  400622:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  400624:	687b      	ldr	r3, [r7, #4]
  400626:	f103 0208 	add.w	r2, r3, #8
  40062a:	687b      	ldr	r3, [r7, #4]
  40062c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  40062e:	687b      	ldr	r3, [r7, #4]
  400630:	2200      	movs	r2, #0
  400632:	601a      	str	r2, [r3, #0]
}
  400634:	bf00      	nop
  400636:	370c      	adds	r7, #12
  400638:	46bd      	mov	sp, r7
  40063a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40063e:	4770      	bx	lr

00400640 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  400640:	b480      	push	{r7}
  400642:	b083      	sub	sp, #12
  400644:	af00      	add	r7, sp, #0
  400646:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400648:	687b      	ldr	r3, [r7, #4]
  40064a:	2200      	movs	r2, #0
  40064c:	611a      	str	r2, [r3, #16]
}
  40064e:	bf00      	nop
  400650:	370c      	adds	r7, #12
  400652:	46bd      	mov	sp, r7
  400654:	f85d 7b04 	ldr.w	r7, [sp], #4
  400658:	4770      	bx	lr

0040065a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  40065a:	b480      	push	{r7}
  40065c:	b085      	sub	sp, #20
  40065e:	af00      	add	r7, sp, #0
  400660:	6078      	str	r0, [r7, #4]
  400662:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  400664:	687b      	ldr	r3, [r7, #4]
  400666:	685b      	ldr	r3, [r3, #4]
  400668:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  40066a:	68fb      	ldr	r3, [r7, #12]
  40066c:	685a      	ldr	r2, [r3, #4]
  40066e:	683b      	ldr	r3, [r7, #0]
  400670:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  400672:	687b      	ldr	r3, [r7, #4]
  400674:	685a      	ldr	r2, [r3, #4]
  400676:	683b      	ldr	r3, [r7, #0]
  400678:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  40067a:	68fb      	ldr	r3, [r7, #12]
  40067c:	685b      	ldr	r3, [r3, #4]
  40067e:	683a      	ldr	r2, [r7, #0]
  400680:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	683a      	ldr	r2, [r7, #0]
  400686:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  400688:	687b      	ldr	r3, [r7, #4]
  40068a:	683a      	ldr	r2, [r7, #0]
  40068c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40068e:	683b      	ldr	r3, [r7, #0]
  400690:	687a      	ldr	r2, [r7, #4]
  400692:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  400694:	687b      	ldr	r3, [r7, #4]
  400696:	681b      	ldr	r3, [r3, #0]
  400698:	1c5a      	adds	r2, r3, #1
  40069a:	687b      	ldr	r3, [r7, #4]
  40069c:	601a      	str	r2, [r3, #0]
}
  40069e:	bf00      	nop
  4006a0:	3714      	adds	r7, #20
  4006a2:	46bd      	mov	sp, r7
  4006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006a8:	4770      	bx	lr

004006aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  4006aa:	b480      	push	{r7}
  4006ac:	b085      	sub	sp, #20
  4006ae:	af00      	add	r7, sp, #0
  4006b0:	6078      	str	r0, [r7, #4]
  4006b2:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  4006b4:	683b      	ldr	r3, [r7, #0]
  4006b6:	681b      	ldr	r3, [r3, #0]
  4006b8:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4006ba:	68bb      	ldr	r3, [r7, #8]
  4006bc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4006c0:	d103      	bne.n	4006ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  4006c2:	687b      	ldr	r3, [r7, #4]
  4006c4:	691b      	ldr	r3, [r3, #16]
  4006c6:	60fb      	str	r3, [r7, #12]
  4006c8:	e00c      	b.n	4006e4 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  4006ca:	687b      	ldr	r3, [r7, #4]
  4006cc:	3308      	adds	r3, #8
  4006ce:	60fb      	str	r3, [r7, #12]
  4006d0:	e002      	b.n	4006d8 <vListInsert+0x2e>
  4006d2:	68fb      	ldr	r3, [r7, #12]
  4006d4:	685b      	ldr	r3, [r3, #4]
  4006d6:	60fb      	str	r3, [r7, #12]
  4006d8:	68fb      	ldr	r3, [r7, #12]
  4006da:	685b      	ldr	r3, [r3, #4]
  4006dc:	681a      	ldr	r2, [r3, #0]
  4006de:	68bb      	ldr	r3, [r7, #8]
  4006e0:	429a      	cmp	r2, r3
  4006e2:	d9f6      	bls.n	4006d2 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4006e4:	68fb      	ldr	r3, [r7, #12]
  4006e6:	685a      	ldr	r2, [r3, #4]
  4006e8:	683b      	ldr	r3, [r7, #0]
  4006ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  4006ec:	683b      	ldr	r3, [r7, #0]
  4006ee:	685b      	ldr	r3, [r3, #4]
  4006f0:	683a      	ldr	r2, [r7, #0]
  4006f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4006f4:	683b      	ldr	r3, [r7, #0]
  4006f6:	68fa      	ldr	r2, [r7, #12]
  4006f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  4006fa:	68fb      	ldr	r3, [r7, #12]
  4006fc:	683a      	ldr	r2, [r7, #0]
  4006fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400700:	683b      	ldr	r3, [r7, #0]
  400702:	687a      	ldr	r2, [r7, #4]
  400704:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  400706:	687b      	ldr	r3, [r7, #4]
  400708:	681b      	ldr	r3, [r3, #0]
  40070a:	1c5a      	adds	r2, r3, #1
  40070c:	687b      	ldr	r3, [r7, #4]
  40070e:	601a      	str	r2, [r3, #0]
}
  400710:	bf00      	nop
  400712:	3714      	adds	r7, #20
  400714:	46bd      	mov	sp, r7
  400716:	f85d 7b04 	ldr.w	r7, [sp], #4
  40071a:	4770      	bx	lr

0040071c <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  40071c:	b480      	push	{r7}
  40071e:	b085      	sub	sp, #20
  400720:	af00      	add	r7, sp, #0
  400722:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400724:	687b      	ldr	r3, [r7, #4]
  400726:	685b      	ldr	r3, [r3, #4]
  400728:	687a      	ldr	r2, [r7, #4]
  40072a:	6892      	ldr	r2, [r2, #8]
  40072c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  40072e:	687b      	ldr	r3, [r7, #4]
  400730:	689b      	ldr	r3, [r3, #8]
  400732:	687a      	ldr	r2, [r7, #4]
  400734:	6852      	ldr	r2, [r2, #4]
  400736:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  400738:	687b      	ldr	r3, [r7, #4]
  40073a:	691b      	ldr	r3, [r3, #16]
  40073c:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40073e:	68fb      	ldr	r3, [r7, #12]
  400740:	685a      	ldr	r2, [r3, #4]
  400742:	687b      	ldr	r3, [r7, #4]
  400744:	429a      	cmp	r2, r3
  400746:	d103      	bne.n	400750 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400748:	687b      	ldr	r3, [r7, #4]
  40074a:	689a      	ldr	r2, [r3, #8]
  40074c:	68fb      	ldr	r3, [r7, #12]
  40074e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  400750:	687b      	ldr	r3, [r7, #4]
  400752:	2200      	movs	r2, #0
  400754:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  400756:	68fb      	ldr	r3, [r7, #12]
  400758:	681b      	ldr	r3, [r3, #0]
  40075a:	1e5a      	subs	r2, r3, #1
  40075c:	68fb      	ldr	r3, [r7, #12]
  40075e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400760:	68fb      	ldr	r3, [r7, #12]
  400762:	681b      	ldr	r3, [r3, #0]
}
  400764:	4618      	mov	r0, r3
  400766:	3714      	adds	r7, #20
  400768:	46bd      	mov	sp, r7
  40076a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40076e:	4770      	bx	lr

00400770 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400770:	b480      	push	{r7}
  400772:	b083      	sub	sp, #12
  400774:	af00      	add	r7, sp, #0
  400776:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400778:	687b      	ldr	r3, [r7, #4]
  40077a:	2b07      	cmp	r3, #7
  40077c:	d825      	bhi.n	4007ca <osc_get_rate+0x5a>
  40077e:	a201      	add	r2, pc, #4	; (adr r2, 400784 <osc_get_rate+0x14>)
  400780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400784:	004007a5 	.word	0x004007a5
  400788:	004007ab 	.word	0x004007ab
  40078c:	004007b1 	.word	0x004007b1
  400790:	004007b7 	.word	0x004007b7
  400794:	004007bb 	.word	0x004007bb
  400798:	004007bf 	.word	0x004007bf
  40079c:	004007c3 	.word	0x004007c3
  4007a0:	004007c7 	.word	0x004007c7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4007a4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4007a8:	e010      	b.n	4007cc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4007aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4007ae:	e00d      	b.n	4007cc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4007b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4007b4:	e00a      	b.n	4007cc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4007b6:	4b08      	ldr	r3, [pc, #32]	; (4007d8 <osc_get_rate+0x68>)
  4007b8:	e008      	b.n	4007cc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4007ba:	4b08      	ldr	r3, [pc, #32]	; (4007dc <osc_get_rate+0x6c>)
  4007bc:	e006      	b.n	4007cc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4007be:	4b08      	ldr	r3, [pc, #32]	; (4007e0 <osc_get_rate+0x70>)
  4007c0:	e004      	b.n	4007cc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4007c2:	4b08      	ldr	r3, [pc, #32]	; (4007e4 <osc_get_rate+0x74>)
  4007c4:	e002      	b.n	4007cc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4007c6:	4b06      	ldr	r3, [pc, #24]	; (4007e0 <osc_get_rate+0x70>)
  4007c8:	e000      	b.n	4007cc <osc_get_rate+0x5c>
	}

	return 0;
  4007ca:	2300      	movs	r3, #0
}
  4007cc:	4618      	mov	r0, r3
  4007ce:	370c      	adds	r7, #12
  4007d0:	46bd      	mov	sp, r7
  4007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007d6:	4770      	bx	lr
  4007d8:	003d0900 	.word	0x003d0900
  4007dc:	007a1200 	.word	0x007a1200
  4007e0:	00b71b00 	.word	0x00b71b00
  4007e4:	00f42400 	.word	0x00f42400

004007e8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4007e8:	b580      	push	{r7, lr}
  4007ea:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4007ec:	2006      	movs	r0, #6
  4007ee:	4b05      	ldr	r3, [pc, #20]	; (400804 <sysclk_get_main_hz+0x1c>)
  4007f0:	4798      	blx	r3
  4007f2:	4602      	mov	r2, r0
  4007f4:	4613      	mov	r3, r2
  4007f6:	005b      	lsls	r3, r3, #1
  4007f8:	4413      	add	r3, r2
  4007fa:	009b      	lsls	r3, r3, #2
  4007fc:	085b      	lsrs	r3, r3, #1

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4007fe:	4618      	mov	r0, r3
  400800:	bd80      	pop	{r7, pc}
  400802:	bf00      	nop
  400804:	00400771 	.word	0x00400771

00400808 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400808:	b580      	push	{r7, lr}
  40080a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40080c:	4b02      	ldr	r3, [pc, #8]	; (400818 <sysclk_get_cpu_hz+0x10>)
  40080e:	4798      	blx	r3
  400810:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400812:	4618      	mov	r0, r3
  400814:	bd80      	pop	{r7, pc}
  400816:	bf00      	nop
  400818:	004007e9 	.word	0x004007e9

0040081c <pxPortInitialiseStack>:
/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack,
		pdTASK_CODE pxCode, void *pvParameters )
{
  40081c:	b480      	push	{r7}
  40081e:	b085      	sub	sp, #20
  400820:	af00      	add	r7, sp, #0
  400822:	60f8      	str	r0, [r7, #12]
  400824:	60b9      	str	r1, [r7, #8]
  400826:	607a      	str	r2, [r7, #4]
	* interrupt. */

	/* Offset added to account for the way the MCU uses the stack on
	* entry/exit
	* of interrupts, and to ensure alignment. */
	pxTopOfStack--;
  400828:	68fb      	ldr	r3, [r7, #12]
  40082a:	3b04      	subs	r3, #4
  40082c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;    /* xPSR */
  40082e:	68fb      	ldr	r3, [r7, #12]
  400830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  400836:	68fb      	ldr	r3, [r7, #12]
  400838:	3b04      	subs	r3, #4
  40083a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pxCode;       /* PC */
  40083c:	68ba      	ldr	r2, [r7, #8]
  40083e:	68fb      	ldr	r3, [r7, #12]
  400840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  400842:	68fb      	ldr	r3, [r7, #12]
  400844:	3b04      	subs	r3, #4
  400846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;    /* LR */
  400848:	68fb      	ldr	r3, [r7, #12]
  40084a:	2200      	movs	r2, #0
  40084c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;    /* R12, R3, R2 and R1. */
  40084e:	68fb      	ldr	r3, [r7, #12]
  400850:	3b14      	subs	r3, #20
  400852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;       /* R0 */
  400854:	687a      	ldr	r2, [r7, #4]
  400856:	68fb      	ldr	r3, [r7, #12]
  400858:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	* own exec return value. */
	pxTopOfStack--;
  40085a:	68fb      	ldr	r3, [r7, #12]
  40085c:	3b04      	subs	r3, #4
  40085e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400860:	68fb      	ldr	r3, [r7, #12]
  400862:	f06f 0202 	mvn.w	r2, #2
  400866:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;    /* R11, R10, R9, R8, R7, R6, R5 and R4. */
  400868:	68fb      	ldr	r3, [r7, #12]
  40086a:	3b20      	subs	r3, #32
  40086c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  40086e:	68fb      	ldr	r3, [r7, #12]
}
  400870:	4618      	mov	r0, r3
  400872:	3714      	adds	r7, #20
  400874:	46bd      	mov	sp, r7
  400876:	f85d 7b04 	ldr.w	r7, [sp], #4
  40087a:	4770      	bx	lr

0040087c <SVC_Handler>:
/*-----------------------------------------------------------*/

/*void vPortSVCHandler( void )*/ /* ATMEL */
__attribute__ ((naked)) void SVC_Handler( void )
{
	__asm volatile (
  40087c:	4b05      	ldr	r3, [pc, #20]	; (400894 <pxCurrentTCBConst2>)
  40087e:	6819      	ldr	r1, [r3, #0]
  400880:	6808      	ldr	r0, [r1, #0]
  400882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400886:	f380 8809 	msr	PSP, r0
  40088a:	f04f 0000 	mov.w	r0, #0
  40088e:	f380 8811 	msr	BASEPRI, r0
  400892:	4770      	bx	lr

00400894 <pxCurrentTCBConst2>:
  400894:	2000a4ec 	.word	0x2000a4ec
		" bx r14                          \n"
		"                                   \n"
		" .align 2                        \n"
		"pxCurrentTCBConst2: .word pxCurrentTCB \n"
		);
}
  400898:	bf00      	nop
  40089a:	bf00      	nop

0040089c <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile (
  40089c:	4804      	ldr	r0, [pc, #16]	; (4008b0 <prvPortStartFirstTask+0x14>)
  40089e:	6800      	ldr	r0, [r0, #0]
  4008a0:	6800      	ldr	r0, [r0, #0]
  4008a2:	f380 8808 	msr	MSP, r0
  4008a6:	b662      	cpsie	i
  4008a8:	df00      	svc	0
  4008aa:	bf00      	nop
		" msr msp, r0             \n"                         /* Set the msp back to the start of the stack. */
		" cpsie i                 \n"                         /* Globally enable interrupts. */
		" svc 0                   \n"                         /* System call to start first task. */
		" nop                     \n"
		);
}
  4008ac:	bf00      	nop
  4008ae:	0000      	.short	0x0000
  4008b0:	e000ed08 	.word	0xe000ed08

004008b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  4008b4:	b580      	push	{r7, lr}
  4008b6:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	* See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4008b8:	4a0e      	ldr	r2, [pc, #56]	; (4008f4 <xPortStartScheduler+0x40>)
  4008ba:	4b0e      	ldr	r3, [pc, #56]	; (4008f4 <xPortStartScheduler+0x40>)
  4008bc:	681b      	ldr	r3, [r3, #0]
  4008be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4008c2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4008c4:	4a0b      	ldr	r2, [pc, #44]	; (4008f4 <xPortStartScheduler+0x40>)
  4008c6:	4b0b      	ldr	r3, [pc, #44]	; (4008f4 <xPortStartScheduler+0x40>)
  4008c8:	681b      	ldr	r3, [r3, #0]
  4008ca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
  4008ce:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	* here already. */
	vPortSetupTimerInterrupt();
  4008d0:	4b09      	ldr	r3, [pc, #36]	; (4008f8 <xPortStartScheduler+0x44>)
  4008d2:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  4008d4:	4b09      	ldr	r3, [pc, #36]	; (4008fc <xPortStartScheduler+0x48>)
  4008d6:	2200      	movs	r2, #0
  4008d8:	601a      	str	r2, [r3, #0]

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  4008da:	4b09      	ldr	r3, [pc, #36]	; (400900 <xPortStartScheduler+0x4c>)
  4008dc:	4798      	blx	r3
#endif

	/* Lazy save always. */
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
  4008de:	4a09      	ldr	r2, [pc, #36]	; (400904 <xPortStartScheduler+0x50>)
  4008e0:	4b08      	ldr	r3, [pc, #32]	; (400904 <xPortStartScheduler+0x50>)
  4008e2:	681b      	ldr	r3, [r3, #0]
  4008e4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4008e8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  4008ea:	4b07      	ldr	r3, [pc, #28]	; (400908 <xPortStartScheduler+0x54>)
  4008ec:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  4008ee:	2300      	movs	r3, #0
}
  4008f0:	4618      	mov	r0, r3
  4008f2:	bd80      	pop	{r7, pc}
  4008f4:	e000ed20 	.word	0xe000ed20
  4008f8:	00400a11 	.word	0x00400a11
  4008fc:	20000010 	.word	0x20000010
  400900:	00400a45 	.word	0x00400a45
  400904:	e000ef34 	.word	0xe000ef34
  400908:	0040089d 	.word	0x0040089d

0040090c <vPortYieldFromISR>:
}

/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  40090c:	b480      	push	{r7}
  40090e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400910:	4b04      	ldr	r3, [pc, #16]	; (400924 <vPortYieldFromISR+0x18>)
  400912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400916:	601a      	str	r2, [r3, #0]
}
  400918:	bf00      	nop
  40091a:	46bd      	mov	sp, r7
  40091c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400920:	4770      	bx	lr
  400922:	bf00      	nop
  400924:	e000ed04 	.word	0xe000ed04

00400928 <vPortEnterCritical>:

/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  400928:	b580      	push	{r7, lr}
  40092a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  40092c:	4b04      	ldr	r3, [pc, #16]	; (400940 <vPortEnterCritical+0x18>)
  40092e:	4798      	blx	r3
	uxCriticalNesting++;
  400930:	4b04      	ldr	r3, [pc, #16]	; (400944 <vPortEnterCritical+0x1c>)
  400932:	681b      	ldr	r3, [r3, #0]
  400934:	3301      	adds	r3, #1
  400936:	4a03      	ldr	r2, [pc, #12]	; (400944 <vPortEnterCritical+0x1c>)
  400938:	6013      	str	r3, [r2, #0]
}
  40093a:	bf00      	nop
  40093c:	bd80      	pop	{r7, pc}
  40093e:	bf00      	nop
  400940:	00400971 	.word	0x00400971
  400944:	20000010 	.word	0x20000010

00400948 <vPortExitCritical>:

/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  400948:	b580      	push	{r7, lr}
  40094a:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  40094c:	4b06      	ldr	r3, [pc, #24]	; (400968 <vPortExitCritical+0x20>)
  40094e:	681b      	ldr	r3, [r3, #0]
  400950:	3b01      	subs	r3, #1
  400952:	4a05      	ldr	r2, [pc, #20]	; (400968 <vPortExitCritical+0x20>)
  400954:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
  400956:	4b04      	ldr	r3, [pc, #16]	; (400968 <vPortExitCritical+0x20>)
  400958:	681b      	ldr	r3, [r3, #0]
  40095a:	2b00      	cmp	r3, #0
  40095c:	d102      	bne.n	400964 <vPortExitCritical+0x1c>
		portENABLE_INTERRUPTS();
  40095e:	2000      	movs	r0, #0
  400960:	4b02      	ldr	r3, [pc, #8]	; (40096c <vPortExitCritical+0x24>)
  400962:	4798      	blx	r3
	}
}
  400964:	bf00      	nop
  400966:	bd80      	pop	{r7, pc}
  400968:	20000010 	.word	0x20000010
  40096c:	00400983 	.word	0x00400983

00400970 <ulPortSetInterruptMask>:

/*-----------------------------------------------------------*/

__attribute__((naked)) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile \
  400970:	f3ef 8011 	mrs	r0, BASEPRI
  400974:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  400978:	f381 8811 	msr	BASEPRI, r1
  40097c:	4770      	bx	lr
		:: "i" (configMAX_SYSCALL_INTERRUPT_PRIORITY) : "r0", "r1" \
	);

	/* This return will not be reached but is necessary to prevent compiler
	 * warnings. */
	return 0;
  40097e:	2300      	movs	r3, #0
}
  400980:	4618      	mov	r0, r3

00400982 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__((naked)) void vPortClearInterruptMask(
		unsigned long ulNewMaskValue )
{
	__asm volatile \
  400982:	f380 8811 	msr	BASEPRI, r0
  400986:	4770      	bx	lr
	( \
		" msr basepri, r0                            \n" \
		" bx lr                                      \n" \
		::: "r0" \
	);
}
  400988:	bf00      	nop
	...

0040098c <PendSV_Handler>:
/*void xPortPendSVHandler( void )*/
__attribute__((naked)) void PendSV_Handler( void )   /* ATMEL */
{
	/* This is a naked function. */

	__asm volatile
  40098c:	f3ef 8009 	mrs	r0, PSP
  400990:	4b11      	ldr	r3, [pc, #68]	; (4009d8 <pxCurrentTCBConst>)
  400992:	681a      	ldr	r2, [r3, #0]
  400994:	f01e 0f10 	tst.w	lr, #16
  400998:	bf08      	it	eq
  40099a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40099e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4009a2:	6010      	str	r0, [r2, #0]
  4009a4:	e92d 4008 	stmdb	sp!, {r3, lr}
  4009a8:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  4009ac:	f380 8811 	msr	BASEPRI, r0
  4009b0:	f001 f82e 	bl	401a10 <vTaskSwitchContext>
  4009b4:	f04f 0000 	mov.w	r0, #0
  4009b8:	f380 8811 	msr	BASEPRI, r0
  4009bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4009c0:	6819      	ldr	r1, [r3, #0]
  4009c2:	6808      	ldr	r0, [r1, #0]
  4009c4:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4009c8:	f01e 0f10 	tst.w	lr, #16
  4009cc:	bf08      	it	eq
  4009ce:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4009d2:	f380 8809 	msr	PSP, r0
  4009d6:	4770      	bx	lr

004009d8 <pxCurrentTCBConst>:
  4009d8:	2000a4ec 	.word	0x2000a4ec
		"                                       \n"
		"   .align 2                            \n"
		"pxCurrentTCBConst: .word pxCurrentTCB    \n"
		::"i" (configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
  4009dc:	bf00      	nop
  4009de:	bf00      	nop

004009e0 <SysTick_Handler>:

/*-----------------------------------------------------------*/
void SysTick_Handler( void ) /* ATMEL */
{
  4009e0:	b580      	push	{r7, lr}
  4009e2:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4009e4:	4b06      	ldr	r3, [pc, #24]	; (400a00 <SysTick_Handler+0x20>)
  4009e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4009ea:	601a      	str	r2, [r3, #0]
	#endif

	(void)portSET_INTERRUPT_MASK_FROM_ISR();
  4009ec:	4b05      	ldr	r3, [pc, #20]	; (400a04 <SysTick_Handler+0x24>)
  4009ee:	4798      	blx	r3
	{
		vTaskIncrementTick();
  4009f0:	4b05      	ldr	r3, [pc, #20]	; (400a08 <SysTick_Handler+0x28>)
  4009f2:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  4009f4:	2000      	movs	r0, #0
  4009f6:	4b05      	ldr	r3, [pc, #20]	; (400a0c <SysTick_Handler+0x2c>)
  4009f8:	4798      	blx	r3
}
  4009fa:	bf00      	nop
  4009fc:	bd80      	pop	{r7, pc}
  4009fe:	bf00      	nop
  400a00:	e000ed04 	.word	0xe000ed04
  400a04:	00400971 	.word	0x00400971
  400a08:	004018c5 	.word	0x004018c5
  400a0c:	00400983 	.word	0x00400983

00400a10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__((weak)) void vPortSetupTimerInterrupt( void )
{
  400a10:	b598      	push	{r3, r4, r7, lr}
  400a12:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG
  400a14:	4c07      	ldr	r4, [pc, #28]	; (400a34 <vPortSetupTimerInterrupt+0x24>)
		= (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  400a16:	4b08      	ldr	r3, [pc, #32]	; (400a38 <vPortSetupTimerInterrupt+0x28>)
  400a18:	4798      	blx	r3
  400a1a:	4602      	mov	r2, r0
  400a1c:	4b07      	ldr	r3, [pc, #28]	; (400a3c <vPortSetupTimerInterrupt+0x2c>)
  400a1e:	fba3 2302 	umull	r2, r3, r3, r2
  400a22:	099b      	lsrs	r3, r3, #6
  400a24:	3b01      	subs	r3, #1
  400a26:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT |
  400a28:	4b05      	ldr	r3, [pc, #20]	; (400a40 <vPortSetupTimerInterrupt+0x30>)
  400a2a:	2207      	movs	r2, #7
  400a2c:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
}
  400a2e:	bf00      	nop
  400a30:	bd98      	pop	{r3, r4, r7, pc}
  400a32:	bf00      	nop
  400a34:	e000e014 	.word	0xe000e014
  400a38:	00400809 	.word	0x00400809
  400a3c:	10624dd3 	.word	0x10624dd3
  400a40:	e000e010 	.word	0xe000e010

00400a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400a44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400a54 <vPortEnableVFP+0x10>
  400a48:	6801      	ldr	r1, [r0, #0]
  400a4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400a4e:	6001      	str	r1, [r0, #0]
  400a50:	4770      	bx	lr
		"                            \n"
		" orr r1, r1, #( 0xf << 20 ) \n" /* Enable CP10 and CP11 coprocessors, then save back. */
		" str r1, [r0]               \n"
		" bx r14                     "
	);
}
  400a52:	bf00      	nop
  400a54:	e000ed88 	.word	0xe000ed88

00400a58 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  400a58:	b580      	push	{r7, lr}
  400a5a:	b086      	sub	sp, #24
  400a5c:	af00      	add	r7, sp, #0
  400a5e:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  400a60:	2300      	movs	r3, #0
  400a62:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  400a64:	4b34      	ldr	r3, [pc, #208]	; (400b38 <pvPortMalloc+0xe0>)
  400a66:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  400a68:	4b34      	ldr	r3, [pc, #208]	; (400b3c <pvPortMalloc+0xe4>)
  400a6a:	681b      	ldr	r3, [r3, #0]
  400a6c:	2b00      	cmp	r3, #0
  400a6e:	d101      	bne.n	400a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  400a70:	4b33      	ldr	r3, [pc, #204]	; (400b40 <pvPortMalloc+0xe8>)
  400a72:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  400a74:	687b      	ldr	r3, [r7, #4]
  400a76:	2b00      	cmp	r3, #0
  400a78:	d00e      	beq.n	400a98 <pvPortMalloc+0x40>
		{
			xWantedSize += heapSTRUCT_SIZE;
  400a7a:	2310      	movs	r3, #16
  400a7c:	461a      	mov	r2, r3
  400a7e:	687b      	ldr	r3, [r7, #4]
  400a80:	4413      	add	r3, r2
  400a82:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400a84:	687b      	ldr	r3, [r7, #4]
  400a86:	f003 0307 	and.w	r3, r3, #7
  400a8a:	2b00      	cmp	r3, #0
  400a8c:	d004      	beq.n	400a98 <pvPortMalloc+0x40>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400a8e:	687b      	ldr	r3, [r7, #4]
  400a90:	f023 0307 	bic.w	r3, r3, #7
  400a94:	3308      	adds	r3, #8
  400a96:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  400a98:	687b      	ldr	r3, [r7, #4]
  400a9a:	2b00      	cmp	r3, #0
  400a9c:	d045      	beq.n	400b2a <pvPortMalloc+0xd2>
  400a9e:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  400aa2:	687b      	ldr	r3, [r7, #4]
  400aa4:	4293      	cmp	r3, r2
  400aa6:	d240      	bcs.n	400b2a <pvPortMalloc+0xd2>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  400aa8:	4b26      	ldr	r3, [pc, #152]	; (400b44 <pvPortMalloc+0xec>)
  400aaa:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  400aac:	4b25      	ldr	r3, [pc, #148]	; (400b44 <pvPortMalloc+0xec>)
  400aae:	681b      	ldr	r3, [r3, #0]
  400ab0:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400ab2:	e004      	b.n	400abe <pvPortMalloc+0x66>
			{
				pxPreviousBlock = pxBlock;
  400ab4:	697b      	ldr	r3, [r7, #20]
  400ab6:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  400ab8:	697b      	ldr	r3, [r7, #20]
  400aba:	681b      	ldr	r3, [r3, #0]
  400abc:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400abe:	697b      	ldr	r3, [r7, #20]
  400ac0:	685a      	ldr	r2, [r3, #4]
  400ac2:	687b      	ldr	r3, [r7, #4]
  400ac4:	429a      	cmp	r2, r3
  400ac6:	d203      	bcs.n	400ad0 <pvPortMalloc+0x78>
  400ac8:	697b      	ldr	r3, [r7, #20]
  400aca:	681b      	ldr	r3, [r3, #0]
  400acc:	2b00      	cmp	r3, #0
  400ace:	d1f1      	bne.n	400ab4 <pvPortMalloc+0x5c>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  400ad0:	4b1a      	ldr	r3, [pc, #104]	; (400b3c <pvPortMalloc+0xe4>)
  400ad2:	681b      	ldr	r3, [r3, #0]
  400ad4:	697a      	ldr	r2, [r7, #20]
  400ad6:	429a      	cmp	r2, r3
  400ad8:	d027      	beq.n	400b2a <pvPortMalloc+0xd2>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  400ada:	693b      	ldr	r3, [r7, #16]
  400adc:	681b      	ldr	r3, [r3, #0]
  400ade:	2210      	movs	r2, #16
  400ae0:	4413      	add	r3, r2
  400ae2:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  400ae4:	697b      	ldr	r3, [r7, #20]
  400ae6:	681a      	ldr	r2, [r3, #0]
  400ae8:	693b      	ldr	r3, [r7, #16]
  400aea:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400aec:	697b      	ldr	r3, [r7, #20]
  400aee:	685a      	ldr	r2, [r3, #4]
  400af0:	687b      	ldr	r3, [r7, #4]
  400af2:	1ad3      	subs	r3, r2, r3
  400af4:	2210      	movs	r2, #16
  400af6:	0052      	lsls	r2, r2, #1
  400af8:	4293      	cmp	r3, r2
  400afa:	d90f      	bls.n	400b1c <pvPortMalloc+0xc4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  400afc:	697a      	ldr	r2, [r7, #20]
  400afe:	687b      	ldr	r3, [r7, #4]
  400b00:	4413      	add	r3, r2
  400b02:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  400b04:	697b      	ldr	r3, [r7, #20]
  400b06:	685a      	ldr	r2, [r3, #4]
  400b08:	687b      	ldr	r3, [r7, #4]
  400b0a:	1ad2      	subs	r2, r2, r3
  400b0c:	68bb      	ldr	r3, [r7, #8]
  400b0e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  400b10:	697b      	ldr	r3, [r7, #20]
  400b12:	687a      	ldr	r2, [r7, #4]
  400b14:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  400b16:	68b8      	ldr	r0, [r7, #8]
  400b18:	4b0b      	ldr	r3, [pc, #44]	; (400b48 <pvPortMalloc+0xf0>)
  400b1a:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  400b1c:	4b0b      	ldr	r3, [pc, #44]	; (400b4c <pvPortMalloc+0xf4>)
  400b1e:	681a      	ldr	r2, [r3, #0]
  400b20:	697b      	ldr	r3, [r7, #20]
  400b22:	685b      	ldr	r3, [r3, #4]
  400b24:	1ad3      	subs	r3, r2, r3
  400b26:	4a09      	ldr	r2, [pc, #36]	; (400b4c <pvPortMalloc+0xf4>)
  400b28:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  400b2a:	4b09      	ldr	r3, [pc, #36]	; (400b50 <pvPortMalloc+0xf8>)
  400b2c:	4798      	blx	r3
			;//SvApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
  400b2e:	68fb      	ldr	r3, [r7, #12]
}
  400b30:	4618      	mov	r0, r3
  400b32:	3718      	adds	r7, #24
  400b34:	46bd      	mov	sp, r7
  400b36:	bd80      	pop	{r7, pc}
  400b38:	0040175d 	.word	0x0040175d
  400b3c:	2000a4e8 	.word	0x2000a4e8
  400b40:	00400ba9 	.word	0x00400ba9
  400b44:	2000a4e0 	.word	0x2000a4e0
  400b48:	00400c39 	.word	0x00400c39
  400b4c:	20000014 	.word	0x20000014
  400b50:	00401779 	.word	0x00401779

00400b54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  400b54:	b580      	push	{r7, lr}
  400b56:	b084      	sub	sp, #16
  400b58:	af00      	add	r7, sp, #0
  400b5a:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  400b5c:	687b      	ldr	r3, [r7, #4]
  400b5e:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  400b60:	687b      	ldr	r3, [r7, #4]
  400b62:	2b00      	cmp	r3, #0
  400b64:	d014      	beq.n	400b90 <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  400b66:	2310      	movs	r3, #16
  400b68:	425b      	negs	r3, r3
  400b6a:	68fa      	ldr	r2, [r7, #12]
  400b6c:	4413      	add	r3, r2
  400b6e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  400b70:	68fb      	ldr	r3, [r7, #12]
  400b72:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  400b74:	4b08      	ldr	r3, [pc, #32]	; (400b98 <vPortFree+0x44>)
  400b76:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  400b78:	68bb      	ldr	r3, [r7, #8]
  400b7a:	685a      	ldr	r2, [r3, #4]
  400b7c:	4b07      	ldr	r3, [pc, #28]	; (400b9c <vPortFree+0x48>)
  400b7e:	681b      	ldr	r3, [r3, #0]
  400b80:	4413      	add	r3, r2
  400b82:	4a06      	ldr	r2, [pc, #24]	; (400b9c <vPortFree+0x48>)
  400b84:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  400b86:	68b8      	ldr	r0, [r7, #8]
  400b88:	4b05      	ldr	r3, [pc, #20]	; (400ba0 <vPortFree+0x4c>)
  400b8a:	4798      	blx	r3
		}
		xTaskResumeAll();
  400b8c:	4b05      	ldr	r3, [pc, #20]	; (400ba4 <vPortFree+0x50>)
  400b8e:	4798      	blx	r3
	}
}
  400b90:	bf00      	nop
  400b92:	3710      	adds	r7, #16
  400b94:	46bd      	mov	sp, r7
  400b96:	bd80      	pop	{r7, pc}
  400b98:	0040175d 	.word	0x0040175d
  400b9c:	20000014 	.word	0x20000014
  400ba0:	00400c39 	.word	0x00400c39
  400ba4:	00401779 	.word	0x00401779

00400ba8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  400ba8:	b580      	push	{r7, lr}
  400baa:	b082      	sub	sp, #8
  400bac:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  400bae:	4b1d      	ldr	r3, [pc, #116]	; (400c24 <prvHeapInit+0x7c>)
  400bb0:	4a1d      	ldr	r2, [pc, #116]	; (400c28 <prvHeapInit+0x80>)
  400bb2:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  400bb4:	4b1b      	ldr	r3, [pc, #108]	; (400c24 <prvHeapInit+0x7c>)
  400bb6:	2200      	movs	r2, #0
  400bb8:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  400bba:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  400bbe:	4b1a      	ldr	r3, [pc, #104]	; (400c28 <prvHeapInit+0x80>)
  400bc0:	4413      	add	r3, r2
  400bc2:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  400bc4:	2310      	movs	r3, #16
  400bc6:	425b      	negs	r3, r3
  400bc8:	687a      	ldr	r2, [r7, #4]
  400bca:	4413      	add	r3, r2
  400bcc:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  400bce:	4a17      	ldr	r2, [pc, #92]	; (400c2c <prvHeapInit+0x84>)
  400bd0:	687b      	ldr	r3, [r7, #4]
  400bd2:	6013      	str	r3, [r2, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  400bd4:	4b15      	ldr	r3, [pc, #84]	; (400c2c <prvHeapInit+0x84>)
  400bd6:	681b      	ldr	r3, [r3, #0]
  400bd8:	f003 0307 	and.w	r3, r3, #7
  400bdc:	2b00      	cmp	r3, #0
  400bde:	d003      	beq.n	400be8 <prvHeapInit+0x40>
  400be0:	4b13      	ldr	r3, [pc, #76]	; (400c30 <prvHeapInit+0x88>)
  400be2:	4798      	blx	r3
  400be4:	bf00      	nop
  400be6:	e7fd      	b.n	400be4 <prvHeapInit+0x3c>
	pxEnd->xBlockSize = 0;
  400be8:	4b10      	ldr	r3, [pc, #64]	; (400c2c <prvHeapInit+0x84>)
  400bea:	681b      	ldr	r3, [r3, #0]
  400bec:	2200      	movs	r2, #0
  400bee:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  400bf0:	4b0e      	ldr	r3, [pc, #56]	; (400c2c <prvHeapInit+0x84>)
  400bf2:	681b      	ldr	r3, [r3, #0]
  400bf4:	2200      	movs	r2, #0
  400bf6:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  400bf8:	4b0b      	ldr	r3, [pc, #44]	; (400c28 <prvHeapInit+0x80>)
  400bfa:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  400bfc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  400c00:	2210      	movs	r2, #16
  400c02:	1a9a      	subs	r2, r3, r2
  400c04:	683b      	ldr	r3, [r7, #0]
  400c06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  400c08:	4b08      	ldr	r3, [pc, #32]	; (400c2c <prvHeapInit+0x84>)
  400c0a:	681a      	ldr	r2, [r3, #0]
  400c0c:	683b      	ldr	r3, [r7, #0]
  400c0e:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  400c10:	4b08      	ldr	r3, [pc, #32]	; (400c34 <prvHeapInit+0x8c>)
  400c12:	681b      	ldr	r3, [r3, #0]
  400c14:	2210      	movs	r2, #16
  400c16:	1a9b      	subs	r3, r3, r2
  400c18:	4a06      	ldr	r2, [pc, #24]	; (400c34 <prvHeapInit+0x8c>)
  400c1a:	6013      	str	r3, [r2, #0]
}
  400c1c:	bf00      	nop
  400c1e:	3708      	adds	r7, #8
  400c20:	46bd      	mov	sp, r7
  400c22:	bd80      	pop	{r7, pc}
  400c24:	2000a4e0 	.word	0x2000a4e0
  400c28:	200004e0 	.word	0x200004e0
  400c2c:	2000a4e8 	.word	0x2000a4e8
  400c30:	00400971 	.word	0x00400971
  400c34:	20000014 	.word	0x20000014

00400c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  400c38:	b480      	push	{r7}
  400c3a:	b085      	sub	sp, #20
  400c3c:	af00      	add	r7, sp, #0
  400c3e:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  400c40:	4b28      	ldr	r3, [pc, #160]	; (400ce4 <prvInsertBlockIntoFreeList+0xac>)
  400c42:	60fb      	str	r3, [r7, #12]
  400c44:	e002      	b.n	400c4c <prvInsertBlockIntoFreeList+0x14>
  400c46:	68fb      	ldr	r3, [r7, #12]
  400c48:	681b      	ldr	r3, [r3, #0]
  400c4a:	60fb      	str	r3, [r7, #12]
  400c4c:	68fb      	ldr	r3, [r7, #12]
  400c4e:	681a      	ldr	r2, [r3, #0]
  400c50:	687b      	ldr	r3, [r7, #4]
  400c52:	429a      	cmp	r2, r3
  400c54:	d3f7      	bcc.n	400c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  400c56:	68fb      	ldr	r3, [r7, #12]
  400c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  400c5a:	68fb      	ldr	r3, [r7, #12]
  400c5c:	685b      	ldr	r3, [r3, #4]
  400c5e:	68ba      	ldr	r2, [r7, #8]
  400c60:	441a      	add	r2, r3
  400c62:	687b      	ldr	r3, [r7, #4]
  400c64:	429a      	cmp	r2, r3
  400c66:	d108      	bne.n	400c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  400c68:	68fb      	ldr	r3, [r7, #12]
  400c6a:	685a      	ldr	r2, [r3, #4]
  400c6c:	687b      	ldr	r3, [r7, #4]
  400c6e:	685b      	ldr	r3, [r3, #4]
  400c70:	441a      	add	r2, r3
  400c72:	68fb      	ldr	r3, [r7, #12]
  400c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  400c76:	68fb      	ldr	r3, [r7, #12]
  400c78:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  400c7a:	687b      	ldr	r3, [r7, #4]
  400c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  400c7e:	687b      	ldr	r3, [r7, #4]
  400c80:	685b      	ldr	r3, [r3, #4]
  400c82:	68ba      	ldr	r2, [r7, #8]
  400c84:	441a      	add	r2, r3
  400c86:	68fb      	ldr	r3, [r7, #12]
  400c88:	681b      	ldr	r3, [r3, #0]
  400c8a:	429a      	cmp	r2, r3
  400c8c:	d118      	bne.n	400cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  400c8e:	68fb      	ldr	r3, [r7, #12]
  400c90:	681a      	ldr	r2, [r3, #0]
  400c92:	4b15      	ldr	r3, [pc, #84]	; (400ce8 <prvInsertBlockIntoFreeList+0xb0>)
  400c94:	681b      	ldr	r3, [r3, #0]
  400c96:	429a      	cmp	r2, r3
  400c98:	d00d      	beq.n	400cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  400c9a:	687b      	ldr	r3, [r7, #4]
  400c9c:	685a      	ldr	r2, [r3, #4]
  400c9e:	68fb      	ldr	r3, [r7, #12]
  400ca0:	681b      	ldr	r3, [r3, #0]
  400ca2:	685b      	ldr	r3, [r3, #4]
  400ca4:	441a      	add	r2, r3
  400ca6:	687b      	ldr	r3, [r7, #4]
  400ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  400caa:	68fb      	ldr	r3, [r7, #12]
  400cac:	681b      	ldr	r3, [r3, #0]
  400cae:	681a      	ldr	r2, [r3, #0]
  400cb0:	687b      	ldr	r3, [r7, #4]
  400cb2:	601a      	str	r2, [r3, #0]
  400cb4:	e008      	b.n	400cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  400cb6:	4b0c      	ldr	r3, [pc, #48]	; (400ce8 <prvInsertBlockIntoFreeList+0xb0>)
  400cb8:	681a      	ldr	r2, [r3, #0]
  400cba:	687b      	ldr	r3, [r7, #4]
  400cbc:	601a      	str	r2, [r3, #0]
  400cbe:	e003      	b.n	400cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  400cc0:	68fb      	ldr	r3, [r7, #12]
  400cc2:	681a      	ldr	r2, [r3, #0]
  400cc4:	687b      	ldr	r3, [r7, #4]
  400cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  400cc8:	68fa      	ldr	r2, [r7, #12]
  400cca:	687b      	ldr	r3, [r7, #4]
  400ccc:	429a      	cmp	r2, r3
  400cce:	d002      	beq.n	400cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  400cd0:	68fb      	ldr	r3, [r7, #12]
  400cd2:	687a      	ldr	r2, [r7, #4]
  400cd4:	601a      	str	r2, [r3, #0]
	}
}
  400cd6:	bf00      	nop
  400cd8:	3714      	adds	r7, #20
  400cda:	46bd      	mov	sp, r7
  400cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ce0:	4770      	bx	lr
  400ce2:	bf00      	nop
  400ce4:	2000a4e0 	.word	0x2000a4e0
  400ce8:	2000a4e8 	.word	0x2000a4e8

00400cec <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  400cec:	b580      	push	{r7, lr}
  400cee:	b082      	sub	sp, #8
  400cf0:	af00      	add	r7, sp, #0
  400cf2:	6078      	str	r0, [r7, #4]
  400cf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  400cf6:	687b      	ldr	r3, [r7, #4]
  400cf8:	2b00      	cmp	r3, #0
  400cfa:	d103      	bne.n	400d04 <xQueueGenericReset+0x18>
  400cfc:	4b27      	ldr	r3, [pc, #156]	; (400d9c <xQueueGenericReset+0xb0>)
  400cfe:	4798      	blx	r3
  400d00:	bf00      	nop
  400d02:	e7fd      	b.n	400d00 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
  400d04:	4b26      	ldr	r3, [pc, #152]	; (400da0 <xQueueGenericReset+0xb4>)
  400d06:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400d08:	687b      	ldr	r3, [r7, #4]
  400d0a:	681a      	ldr	r2, [r3, #0]
  400d0c:	687b      	ldr	r3, [r7, #4]
  400d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400d10:	6879      	ldr	r1, [r7, #4]
  400d12:	6c09      	ldr	r1, [r1, #64]	; 0x40
  400d14:	fb01 f303 	mul.w	r3, r1, r3
  400d18:	441a      	add	r2, r3
  400d1a:	687b      	ldr	r3, [r7, #4]
  400d1c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  400d1e:	687b      	ldr	r3, [r7, #4]
  400d20:	2200      	movs	r2, #0
  400d22:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400d24:	687b      	ldr	r3, [r7, #4]
  400d26:	681a      	ldr	r2, [r3, #0]
  400d28:	687b      	ldr	r3, [r7, #4]
  400d2a:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  400d2c:	687b      	ldr	r3, [r7, #4]
  400d2e:	681a      	ldr	r2, [r3, #0]
  400d30:	687b      	ldr	r3, [r7, #4]
  400d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400d34:	3b01      	subs	r3, #1
  400d36:	6879      	ldr	r1, [r7, #4]
  400d38:	6c09      	ldr	r1, [r1, #64]	; 0x40
  400d3a:	fb01 f303 	mul.w	r3, r1, r3
  400d3e:	441a      	add	r2, r3
  400d40:	687b      	ldr	r3, [r7, #4]
  400d42:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400d44:	687b      	ldr	r3, [r7, #4]
  400d46:	f04f 32ff 	mov.w	r2, #4294967295
  400d4a:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400d4c:	687b      	ldr	r3, [r7, #4]
  400d4e:	f04f 32ff 	mov.w	r2, #4294967295
  400d52:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  400d54:	683b      	ldr	r3, [r7, #0]
  400d56:	2b00      	cmp	r3, #0
  400d58:	d10e      	bne.n	400d78 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400d5a:	687b      	ldr	r3, [r7, #4]
  400d5c:	691b      	ldr	r3, [r3, #16]
  400d5e:	2b00      	cmp	r3, #0
  400d60:	d014      	beq.n	400d8c <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400d62:	687b      	ldr	r3, [r7, #4]
  400d64:	3310      	adds	r3, #16
  400d66:	4618      	mov	r0, r3
  400d68:	4b0e      	ldr	r3, [pc, #56]	; (400da4 <xQueueGenericReset+0xb8>)
  400d6a:	4798      	blx	r3
  400d6c:	4603      	mov	r3, r0
  400d6e:	2b01      	cmp	r3, #1
  400d70:	d10c      	bne.n	400d8c <xQueueGenericReset+0xa0>
				{
					portYIELD_WITHIN_API();
  400d72:	4b0d      	ldr	r3, [pc, #52]	; (400da8 <xQueueGenericReset+0xbc>)
  400d74:	4798      	blx	r3
  400d76:	e009      	b.n	400d8c <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400d78:	687b      	ldr	r3, [r7, #4]
  400d7a:	3310      	adds	r3, #16
  400d7c:	4618      	mov	r0, r3
  400d7e:	4b0b      	ldr	r3, [pc, #44]	; (400dac <xQueueGenericReset+0xc0>)
  400d80:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400d82:	687b      	ldr	r3, [r7, #4]
  400d84:	3324      	adds	r3, #36	; 0x24
  400d86:	4618      	mov	r0, r3
  400d88:	4b08      	ldr	r3, [pc, #32]	; (400dac <xQueueGenericReset+0xc0>)
  400d8a:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  400d8c:	4b08      	ldr	r3, [pc, #32]	; (400db0 <xQueueGenericReset+0xc4>)
  400d8e:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  400d90:	2301      	movs	r3, #1
}
  400d92:	4618      	mov	r0, r3
  400d94:	3708      	adds	r7, #8
  400d96:	46bd      	mov	sp, r7
  400d98:	bd80      	pop	{r7, pc}
  400d9a:	bf00      	nop
  400d9c:	00400971 	.word	0x00400971
  400da0:	00400929 	.word	0x00400929
  400da4:	00401b9d 	.word	0x00401b9d
  400da8:	0040090d 	.word	0x0040090d
  400dac:	00400601 	.word	0x00400601
  400db0:	00400949 	.word	0x00400949

00400db4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  400db4:	b580      	push	{r7, lr}
  400db6:	b088      	sub	sp, #32
  400db8:	af00      	add	r7, sp, #0
  400dba:	60f8      	str	r0, [r7, #12]
  400dbc:	60b9      	str	r1, [r7, #8]
  400dbe:	4613      	mov	r3, r2
  400dc0:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  400dc2:	2300      	movs	r3, #0
  400dc4:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  400dc6:	68fb      	ldr	r3, [r7, #12]
  400dc8:	2b00      	cmp	r3, #0
  400dca:	d02a      	beq.n	400e22 <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  400dcc:	2050      	movs	r0, #80	; 0x50
  400dce:	4b1b      	ldr	r3, [pc, #108]	; (400e3c <xQueueGenericCreate+0x88>)
  400dd0:	4798      	blx	r3
  400dd2:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  400dd4:	69bb      	ldr	r3, [r7, #24]
  400dd6:	2b00      	cmp	r3, #0
  400dd8:	d023      	beq.n	400e22 <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  400dda:	68fb      	ldr	r3, [r7, #12]
  400ddc:	68ba      	ldr	r2, [r7, #8]
  400dde:	fb02 f303 	mul.w	r3, r2, r3
  400de2:	3301      	adds	r3, #1
  400de4:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  400de6:	6978      	ldr	r0, [r7, #20]
  400de8:	4b14      	ldr	r3, [pc, #80]	; (400e3c <xQueueGenericCreate+0x88>)
  400dea:	4798      	blx	r3
  400dec:	4602      	mov	r2, r0
  400dee:	69bb      	ldr	r3, [r7, #24]
  400df0:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  400df2:	69bb      	ldr	r3, [r7, #24]
  400df4:	681b      	ldr	r3, [r3, #0]
  400df6:	2b00      	cmp	r3, #0
  400df8:	d010      	beq.n	400e1c <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  400dfa:	69bb      	ldr	r3, [r7, #24]
  400dfc:	68fa      	ldr	r2, [r7, #12]
  400dfe:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  400e00:	69bb      	ldr	r3, [r7, #24]
  400e02:	68ba      	ldr	r2, [r7, #8]
  400e04:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  400e06:	2101      	movs	r1, #1
  400e08:	69b8      	ldr	r0, [r7, #24]
  400e0a:	4b0d      	ldr	r3, [pc, #52]	; (400e40 <xQueueGenericCreate+0x8c>)
  400e0c:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  400e0e:	69bb      	ldr	r3, [r7, #24]
  400e10:	79fa      	ldrb	r2, [r7, #7]
  400e12:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  400e16:	69bb      	ldr	r3, [r7, #24]
  400e18:	61fb      	str	r3, [r7, #28]
  400e1a:	e002      	b.n	400e22 <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  400e1c:	69b8      	ldr	r0, [r7, #24]
  400e1e:	4b09      	ldr	r3, [pc, #36]	; (400e44 <xQueueGenericCreate+0x90>)
  400e20:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  400e22:	69fb      	ldr	r3, [r7, #28]
  400e24:	2b00      	cmp	r3, #0
  400e26:	d103      	bne.n	400e30 <xQueueGenericCreate+0x7c>
  400e28:	4b07      	ldr	r3, [pc, #28]	; (400e48 <xQueueGenericCreate+0x94>)
  400e2a:	4798      	blx	r3
  400e2c:	bf00      	nop
  400e2e:	e7fd      	b.n	400e2c <xQueueGenericCreate+0x78>

	return xReturn;
  400e30:	69fb      	ldr	r3, [r7, #28]
}
  400e32:	4618      	mov	r0, r3
  400e34:	3720      	adds	r7, #32
  400e36:	46bd      	mov	sp, r7
  400e38:	bd80      	pop	{r7, pc}
  400e3a:	bf00      	nop
  400e3c:	00400a59 	.word	0x00400a59
  400e40:	00400ced 	.word	0x00400ced
  400e44:	00400b55 	.word	0x00400b55
  400e48:	00400971 	.word	0x00400971

00400e4c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  400e4c:	b580      	push	{r7, lr}
  400e4e:	b088      	sub	sp, #32
  400e50:	af00      	add	r7, sp, #0
  400e52:	60f8      	str	r0, [r7, #12]
  400e54:	60b9      	str	r1, [r7, #8]
  400e56:	607a      	str	r2, [r7, #4]
  400e58:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  400e5a:	2300      	movs	r3, #0
  400e5c:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  400e5e:	68fb      	ldr	r3, [r7, #12]
  400e60:	2b00      	cmp	r3, #0
  400e62:	d103      	bne.n	400e6c <xQueueGenericSend+0x20>
  400e64:	4b46      	ldr	r3, [pc, #280]	; (400f80 <xQueueGenericSend+0x134>)
  400e66:	4798      	blx	r3
  400e68:	bf00      	nop
  400e6a:	e7fd      	b.n	400e68 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400e6c:	68bb      	ldr	r3, [r7, #8]
  400e6e:	2b00      	cmp	r3, #0
  400e70:	d103      	bne.n	400e7a <xQueueGenericSend+0x2e>
  400e72:	68fb      	ldr	r3, [r7, #12]
  400e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400e76:	2b00      	cmp	r3, #0
  400e78:	d101      	bne.n	400e7e <xQueueGenericSend+0x32>
  400e7a:	2301      	movs	r3, #1
  400e7c:	e000      	b.n	400e80 <xQueueGenericSend+0x34>
  400e7e:	2300      	movs	r3, #0
  400e80:	2b00      	cmp	r3, #0
  400e82:	d103      	bne.n	400e8c <xQueueGenericSend+0x40>
  400e84:	4b3e      	ldr	r3, [pc, #248]	; (400f80 <xQueueGenericSend+0x134>)
  400e86:	4798      	blx	r3
  400e88:	bf00      	nop
  400e8a:	e7fd      	b.n	400e88 <xQueueGenericSend+0x3c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400e8c:	4b3d      	ldr	r3, [pc, #244]	; (400f84 <xQueueGenericSend+0x138>)
  400e8e:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400e90:	68fb      	ldr	r3, [r7, #12]
  400e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400e94:	68fb      	ldr	r3, [r7, #12]
  400e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400e98:	429a      	cmp	r2, r3
  400e9a:	d216      	bcs.n	400eca <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400e9c:	683a      	ldr	r2, [r7, #0]
  400e9e:	68b9      	ldr	r1, [r7, #8]
  400ea0:	68f8      	ldr	r0, [r7, #12]
  400ea2:	4b39      	ldr	r3, [pc, #228]	; (400f88 <xQueueGenericSend+0x13c>)
  400ea4:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400ea6:	68fb      	ldr	r3, [r7, #12]
  400ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400eaa:	2b00      	cmp	r3, #0
  400eac:	d009      	beq.n	400ec2 <xQueueGenericSend+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400eae:	68fb      	ldr	r3, [r7, #12]
  400eb0:	3324      	adds	r3, #36	; 0x24
  400eb2:	4618      	mov	r0, r3
  400eb4:	4b35      	ldr	r3, [pc, #212]	; (400f8c <xQueueGenericSend+0x140>)
  400eb6:	4798      	blx	r3
  400eb8:	4603      	mov	r3, r0
  400eba:	2b01      	cmp	r3, #1
  400ebc:	d101      	bne.n	400ec2 <xQueueGenericSend+0x76>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  400ebe:	4b34      	ldr	r3, [pc, #208]	; (400f90 <xQueueGenericSend+0x144>)
  400ec0:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  400ec2:	4b34      	ldr	r3, [pc, #208]	; (400f94 <xQueueGenericSend+0x148>)
  400ec4:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  400ec6:	2301      	movs	r3, #1
  400ec8:	e056      	b.n	400f78 <xQueueGenericSend+0x12c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  400eca:	687b      	ldr	r3, [r7, #4]
  400ecc:	2b00      	cmp	r3, #0
  400ece:	d103      	bne.n	400ed8 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400ed0:	4b30      	ldr	r3, [pc, #192]	; (400f94 <xQueueGenericSend+0x148>)
  400ed2:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  400ed4:	2300      	movs	r3, #0
  400ed6:	e04f      	b.n	400f78 <xQueueGenericSend+0x12c>
				}
				else if( xEntryTimeSet == pdFALSE )
  400ed8:	69fb      	ldr	r3, [r7, #28]
  400eda:	2b00      	cmp	r3, #0
  400edc:	d106      	bne.n	400eec <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400ede:	f107 0314 	add.w	r3, r7, #20
  400ee2:	4618      	mov	r0, r3
  400ee4:	4b2c      	ldr	r3, [pc, #176]	; (400f98 <xQueueGenericSend+0x14c>)
  400ee6:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400ee8:	2301      	movs	r3, #1
  400eea:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  400eec:	4b29      	ldr	r3, [pc, #164]	; (400f94 <xQueueGenericSend+0x148>)
  400eee:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400ef0:	4b2a      	ldr	r3, [pc, #168]	; (400f9c <xQueueGenericSend+0x150>)
  400ef2:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400ef4:	4b23      	ldr	r3, [pc, #140]	; (400f84 <xQueueGenericSend+0x138>)
  400ef6:	4798      	blx	r3
  400ef8:	68fb      	ldr	r3, [r7, #12]
  400efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400efc:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f00:	d102      	bne.n	400f08 <xQueueGenericSend+0xbc>
  400f02:	68fb      	ldr	r3, [r7, #12]
  400f04:	2200      	movs	r2, #0
  400f06:	645a      	str	r2, [r3, #68]	; 0x44
  400f08:	68fb      	ldr	r3, [r7, #12]
  400f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f10:	d102      	bne.n	400f18 <xQueueGenericSend+0xcc>
  400f12:	68fb      	ldr	r3, [r7, #12]
  400f14:	2200      	movs	r2, #0
  400f16:	649a      	str	r2, [r3, #72]	; 0x48
  400f18:	4b1e      	ldr	r3, [pc, #120]	; (400f94 <xQueueGenericSend+0x148>)
  400f1a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400f1c:	1d3a      	adds	r2, r7, #4
  400f1e:	f107 0314 	add.w	r3, r7, #20
  400f22:	4611      	mov	r1, r2
  400f24:	4618      	mov	r0, r3
  400f26:	4b1e      	ldr	r3, [pc, #120]	; (400fa0 <xQueueGenericSend+0x154>)
  400f28:	4798      	blx	r3
  400f2a:	4603      	mov	r3, r0
  400f2c:	2b00      	cmp	r3, #0
  400f2e:	d11d      	bne.n	400f6c <xQueueGenericSend+0x120>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400f30:	68f8      	ldr	r0, [r7, #12]
  400f32:	4b1c      	ldr	r3, [pc, #112]	; (400fa4 <xQueueGenericSend+0x158>)
  400f34:	4798      	blx	r3
  400f36:	4603      	mov	r3, r0
  400f38:	2b00      	cmp	r3, #0
  400f3a:	d011      	beq.n	400f60 <xQueueGenericSend+0x114>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400f3c:	68fb      	ldr	r3, [r7, #12]
  400f3e:	3310      	adds	r3, #16
  400f40:	687a      	ldr	r2, [r7, #4]
  400f42:	4611      	mov	r1, r2
  400f44:	4618      	mov	r0, r3
  400f46:	4b18      	ldr	r3, [pc, #96]	; (400fa8 <xQueueGenericSend+0x15c>)
  400f48:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  400f4a:	68f8      	ldr	r0, [r7, #12]
  400f4c:	4b17      	ldr	r3, [pc, #92]	; (400fac <xQueueGenericSend+0x160>)
  400f4e:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  400f50:	4b17      	ldr	r3, [pc, #92]	; (400fb0 <xQueueGenericSend+0x164>)
  400f52:	4798      	blx	r3
  400f54:	4603      	mov	r3, r0
  400f56:	2b00      	cmp	r3, #0
  400f58:	d198      	bne.n	400e8c <xQueueGenericSend+0x40>
				{
					portYIELD_WITHIN_API();
  400f5a:	4b0d      	ldr	r3, [pc, #52]	; (400f90 <xQueueGenericSend+0x144>)
  400f5c:	4798      	blx	r3
  400f5e:	e795      	b.n	400e8c <xQueueGenericSend+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400f60:	68f8      	ldr	r0, [r7, #12]
  400f62:	4b12      	ldr	r3, [pc, #72]	; (400fac <xQueueGenericSend+0x160>)
  400f64:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400f66:	4b12      	ldr	r3, [pc, #72]	; (400fb0 <xQueueGenericSend+0x164>)
  400f68:	4798      	blx	r3
  400f6a:	e78f      	b.n	400e8c <xQueueGenericSend+0x40>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  400f6c:	68f8      	ldr	r0, [r7, #12]
  400f6e:	4b0f      	ldr	r3, [pc, #60]	; (400fac <xQueueGenericSend+0x160>)
  400f70:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400f72:	4b0f      	ldr	r3, [pc, #60]	; (400fb0 <xQueueGenericSend+0x164>)
  400f74:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  400f76:	2300      	movs	r3, #0
		}
	}
}
  400f78:	4618      	mov	r0, r3
  400f7a:	3720      	adds	r7, #32
  400f7c:	46bd      	mov	sp, r7
  400f7e:	bd80      	pop	{r7, pc}
  400f80:	00400971 	.word	0x00400971
  400f84:	00400929 	.word	0x00400929
  400f88:	00401245 	.word	0x00401245
  400f8c:	00401b9d 	.word	0x00401b9d
  400f90:	0040090d 	.word	0x0040090d
  400f94:	00400949 	.word	0x00400949
  400f98:	00401c59 	.word	0x00401c59
  400f9c:	0040175d 	.word	0x0040175d
  400fa0:	00401c95 	.word	0x00401c95
  400fa4:	00401431 	.word	0x00401431
  400fa8:	00401ab5 	.word	0x00401ab5
  400fac:	00401355 	.word	0x00401355
  400fb0:	00401779 	.word	0x00401779

00400fb4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  400fb4:	b580      	push	{r7, lr}
  400fb6:	b086      	sub	sp, #24
  400fb8:	af00      	add	r7, sp, #0
  400fba:	60f8      	str	r0, [r7, #12]
  400fbc:	60b9      	str	r1, [r7, #8]
  400fbe:	607a      	str	r2, [r7, #4]
  400fc0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  400fc2:	68fb      	ldr	r3, [r7, #12]
  400fc4:	2b00      	cmp	r3, #0
  400fc6:	d103      	bne.n	400fd0 <xQueueGenericSendFromISR+0x1c>
  400fc8:	4b25      	ldr	r3, [pc, #148]	; (401060 <xQueueGenericSendFromISR+0xac>)
  400fca:	4798      	blx	r3
  400fcc:	bf00      	nop
  400fce:	e7fd      	b.n	400fcc <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400fd0:	68bb      	ldr	r3, [r7, #8]
  400fd2:	2b00      	cmp	r3, #0
  400fd4:	d103      	bne.n	400fde <xQueueGenericSendFromISR+0x2a>
  400fd6:	68fb      	ldr	r3, [r7, #12]
  400fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400fda:	2b00      	cmp	r3, #0
  400fdc:	d101      	bne.n	400fe2 <xQueueGenericSendFromISR+0x2e>
  400fde:	2301      	movs	r3, #1
  400fe0:	e000      	b.n	400fe4 <xQueueGenericSendFromISR+0x30>
  400fe2:	2300      	movs	r3, #0
  400fe4:	2b00      	cmp	r3, #0
  400fe6:	d103      	bne.n	400ff0 <xQueueGenericSendFromISR+0x3c>
  400fe8:	4b1d      	ldr	r3, [pc, #116]	; (401060 <xQueueGenericSendFromISR+0xac>)
  400fea:	4798      	blx	r3
  400fec:	bf00      	nop
  400fee:	e7fd      	b.n	400fec <xQueueGenericSendFromISR+0x38>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  400ff0:	4b1b      	ldr	r3, [pc, #108]	; (401060 <xQueueGenericSendFromISR+0xac>)
  400ff2:	4798      	blx	r3
  400ff4:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400ff6:	68fb      	ldr	r3, [r7, #12]
  400ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400ffa:	68fb      	ldr	r3, [r7, #12]
  400ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400ffe:	429a      	cmp	r2, r3
  401000:	d224      	bcs.n	40104c <xQueueGenericSendFromISR+0x98>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401002:	683a      	ldr	r2, [r7, #0]
  401004:	68b9      	ldr	r1, [r7, #8]
  401006:	68f8      	ldr	r0, [r7, #12]
  401008:	4b16      	ldr	r3, [pc, #88]	; (401064 <xQueueGenericSendFromISR+0xb0>)
  40100a:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  40100c:	68fb      	ldr	r3, [r7, #12]
  40100e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401010:	f1b3 3fff 	cmp.w	r3, #4294967295
  401014:	d112      	bne.n	40103c <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401016:	68fb      	ldr	r3, [r7, #12]
  401018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40101a:	2b00      	cmp	r3, #0
  40101c:	d013      	beq.n	401046 <xQueueGenericSendFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40101e:	68fb      	ldr	r3, [r7, #12]
  401020:	3324      	adds	r3, #36	; 0x24
  401022:	4618      	mov	r0, r3
  401024:	4b10      	ldr	r3, [pc, #64]	; (401068 <xQueueGenericSendFromISR+0xb4>)
  401026:	4798      	blx	r3
  401028:	4603      	mov	r3, r0
  40102a:	2b00      	cmp	r3, #0
  40102c:	d00b      	beq.n	401046 <xQueueGenericSendFromISR+0x92>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  40102e:	687b      	ldr	r3, [r7, #4]
  401030:	2b00      	cmp	r3, #0
  401032:	d008      	beq.n	401046 <xQueueGenericSendFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  401034:	687b      	ldr	r3, [r7, #4]
  401036:	2201      	movs	r2, #1
  401038:	601a      	str	r2, [r3, #0]
  40103a:	e004      	b.n	401046 <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  40103c:	68fb      	ldr	r3, [r7, #12]
  40103e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401040:	1c5a      	adds	r2, r3, #1
  401042:	68fb      	ldr	r3, [r7, #12]
  401044:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  401046:	2301      	movs	r3, #1
  401048:	617b      	str	r3, [r7, #20]
  40104a:	e001      	b.n	401050 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  40104c:	2300      	movs	r3, #0
  40104e:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  401050:	6938      	ldr	r0, [r7, #16]
  401052:	4b06      	ldr	r3, [pc, #24]	; (40106c <xQueueGenericSendFromISR+0xb8>)
  401054:	4798      	blx	r3

	return xReturn;
  401056:	697b      	ldr	r3, [r7, #20]
}
  401058:	4618      	mov	r0, r3
  40105a:	3718      	adds	r7, #24
  40105c:	46bd      	mov	sp, r7
  40105e:	bd80      	pop	{r7, pc}
  401060:	00400971 	.word	0x00400971
  401064:	00401245 	.word	0x00401245
  401068:	00401b9d 	.word	0x00401b9d
  40106c:	00400983 	.word	0x00400983

00401070 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  401070:	b580      	push	{r7, lr}
  401072:	b088      	sub	sp, #32
  401074:	af00      	add	r7, sp, #0
  401076:	60f8      	str	r0, [r7, #12]
  401078:	60b9      	str	r1, [r7, #8]
  40107a:	607a      	str	r2, [r7, #4]
  40107c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  40107e:	2300      	movs	r3, #0
  401080:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  401082:	68fb      	ldr	r3, [r7, #12]
  401084:	2b00      	cmp	r3, #0
  401086:	d103      	bne.n	401090 <xQueueGenericReceive+0x20>
  401088:	4b5f      	ldr	r3, [pc, #380]	; (401208 <xQueueGenericReceive+0x198>)
  40108a:	4798      	blx	r3
  40108c:	bf00      	nop
  40108e:	e7fd      	b.n	40108c <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  401090:	68bb      	ldr	r3, [r7, #8]
  401092:	2b00      	cmp	r3, #0
  401094:	d103      	bne.n	40109e <xQueueGenericReceive+0x2e>
  401096:	68fb      	ldr	r3, [r7, #12]
  401098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40109a:	2b00      	cmp	r3, #0
  40109c:	d101      	bne.n	4010a2 <xQueueGenericReceive+0x32>
  40109e:	2301      	movs	r3, #1
  4010a0:	e000      	b.n	4010a4 <xQueueGenericReceive+0x34>
  4010a2:	2300      	movs	r3, #0
  4010a4:	2b00      	cmp	r3, #0
  4010a6:	d103      	bne.n	4010b0 <xQueueGenericReceive+0x40>
  4010a8:	4b57      	ldr	r3, [pc, #348]	; (401208 <xQueueGenericReceive+0x198>)
  4010aa:	4798      	blx	r3
  4010ac:	bf00      	nop
  4010ae:	e7fd      	b.n	4010ac <xQueueGenericReceive+0x3c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  4010b0:	4b56      	ldr	r3, [pc, #344]	; (40120c <xQueueGenericReceive+0x19c>)
  4010b2:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  4010b4:	68fb      	ldr	r3, [r7, #12]
  4010b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4010b8:	2b00      	cmp	r3, #0
  4010ba:	d03b      	beq.n	401134 <xQueueGenericReceive+0xc4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  4010bc:	68fb      	ldr	r3, [r7, #12]
  4010be:	68db      	ldr	r3, [r3, #12]
  4010c0:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4010c2:	68b9      	ldr	r1, [r7, #8]
  4010c4:	68f8      	ldr	r0, [r7, #12]
  4010c6:	4b52      	ldr	r3, [pc, #328]	; (401210 <xQueueGenericReceive+0x1a0>)
  4010c8:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  4010ca:	683b      	ldr	r3, [r7, #0]
  4010cc:	2b00      	cmp	r3, #0
  4010ce:	d11c      	bne.n	40110a <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  4010d0:	68fb      	ldr	r3, [r7, #12]
  4010d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4010d4:	1e5a      	subs	r2, r3, #1
  4010d6:	68fb      	ldr	r3, [r7, #12]
  4010d8:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4010da:	68fb      	ldr	r3, [r7, #12]
  4010dc:	681b      	ldr	r3, [r3, #0]
  4010de:	2b00      	cmp	r3, #0
  4010e0:	d104      	bne.n	4010ec <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  4010e2:	4b4c      	ldr	r3, [pc, #304]	; (401214 <xQueueGenericReceive+0x1a4>)
  4010e4:	4798      	blx	r3
  4010e6:	4602      	mov	r2, r0
  4010e8:	68fb      	ldr	r3, [r7, #12]
  4010ea:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4010ec:	68fb      	ldr	r3, [r7, #12]
  4010ee:	691b      	ldr	r3, [r3, #16]
  4010f0:	2b00      	cmp	r3, #0
  4010f2:	d01b      	beq.n	40112c <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4010f4:	68fb      	ldr	r3, [r7, #12]
  4010f6:	3310      	adds	r3, #16
  4010f8:	4618      	mov	r0, r3
  4010fa:	4b47      	ldr	r3, [pc, #284]	; (401218 <xQueueGenericReceive+0x1a8>)
  4010fc:	4798      	blx	r3
  4010fe:	4603      	mov	r3, r0
  401100:	2b01      	cmp	r3, #1
  401102:	d113      	bne.n	40112c <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
  401104:	4b45      	ldr	r3, [pc, #276]	; (40121c <xQueueGenericReceive+0x1ac>)
  401106:	4798      	blx	r3
  401108:	e010      	b.n	40112c <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  40110a:	68fb      	ldr	r3, [r7, #12]
  40110c:	69ba      	ldr	r2, [r7, #24]
  40110e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401110:	68fb      	ldr	r3, [r7, #12]
  401112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401114:	2b00      	cmp	r3, #0
  401116:	d009      	beq.n	40112c <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401118:	68fb      	ldr	r3, [r7, #12]
  40111a:	3324      	adds	r3, #36	; 0x24
  40111c:	4618      	mov	r0, r3
  40111e:	4b3e      	ldr	r3, [pc, #248]	; (401218 <xQueueGenericReceive+0x1a8>)
  401120:	4798      	blx	r3
  401122:	4603      	mov	r3, r0
  401124:	2b00      	cmp	r3, #0
  401126:	d001      	beq.n	40112c <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  401128:	4b3c      	ldr	r3, [pc, #240]	; (40121c <xQueueGenericReceive+0x1ac>)
  40112a:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  40112c:	4b3c      	ldr	r3, [pc, #240]	; (401220 <xQueueGenericReceive+0x1b0>)
  40112e:	4798      	blx	r3
				return pdPASS;
  401130:	2301      	movs	r3, #1
  401132:	e064      	b.n	4011fe <xQueueGenericReceive+0x18e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  401134:	687b      	ldr	r3, [r7, #4]
  401136:	2b00      	cmp	r3, #0
  401138:	d103      	bne.n	401142 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  40113a:	4b39      	ldr	r3, [pc, #228]	; (401220 <xQueueGenericReceive+0x1b0>)
  40113c:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  40113e:	2300      	movs	r3, #0
  401140:	e05d      	b.n	4011fe <xQueueGenericReceive+0x18e>
				}
				else if( xEntryTimeSet == pdFALSE )
  401142:	69fb      	ldr	r3, [r7, #28]
  401144:	2b00      	cmp	r3, #0
  401146:	d106      	bne.n	401156 <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401148:	f107 0310 	add.w	r3, r7, #16
  40114c:	4618      	mov	r0, r3
  40114e:	4b35      	ldr	r3, [pc, #212]	; (401224 <xQueueGenericReceive+0x1b4>)
  401150:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  401152:	2301      	movs	r3, #1
  401154:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  401156:	4b32      	ldr	r3, [pc, #200]	; (401220 <xQueueGenericReceive+0x1b0>)
  401158:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  40115a:	4b33      	ldr	r3, [pc, #204]	; (401228 <xQueueGenericReceive+0x1b8>)
  40115c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40115e:	4b2b      	ldr	r3, [pc, #172]	; (40120c <xQueueGenericReceive+0x19c>)
  401160:	4798      	blx	r3
  401162:	68fb      	ldr	r3, [r7, #12]
  401164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  401166:	f1b3 3fff 	cmp.w	r3, #4294967295
  40116a:	d102      	bne.n	401172 <xQueueGenericReceive+0x102>
  40116c:	68fb      	ldr	r3, [r7, #12]
  40116e:	2200      	movs	r2, #0
  401170:	645a      	str	r2, [r3, #68]	; 0x44
  401172:	68fb      	ldr	r3, [r7, #12]
  401174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401176:	f1b3 3fff 	cmp.w	r3, #4294967295
  40117a:	d102      	bne.n	401182 <xQueueGenericReceive+0x112>
  40117c:	68fb      	ldr	r3, [r7, #12]
  40117e:	2200      	movs	r2, #0
  401180:	649a      	str	r2, [r3, #72]	; 0x48
  401182:	4b27      	ldr	r3, [pc, #156]	; (401220 <xQueueGenericReceive+0x1b0>)
  401184:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401186:	1d3a      	adds	r2, r7, #4
  401188:	f107 0310 	add.w	r3, r7, #16
  40118c:	4611      	mov	r1, r2
  40118e:	4618      	mov	r0, r3
  401190:	4b26      	ldr	r3, [pc, #152]	; (40122c <xQueueGenericReceive+0x1bc>)
  401192:	4798      	blx	r3
  401194:	4603      	mov	r3, r0
  401196:	2b00      	cmp	r3, #0
  401198:	d12b      	bne.n	4011f2 <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40119a:	68f8      	ldr	r0, [r7, #12]
  40119c:	4b24      	ldr	r3, [pc, #144]	; (401230 <xQueueGenericReceive+0x1c0>)
  40119e:	4798      	blx	r3
  4011a0:	4603      	mov	r3, r0
  4011a2:	2b00      	cmp	r3, #0
  4011a4:	d01f      	beq.n	4011e6 <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4011a6:	68fb      	ldr	r3, [r7, #12]
  4011a8:	681b      	ldr	r3, [r3, #0]
  4011aa:	2b00      	cmp	r3, #0
  4011ac:	d108      	bne.n	4011c0 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
  4011ae:	4b17      	ldr	r3, [pc, #92]	; (40120c <xQueueGenericReceive+0x19c>)
  4011b0:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4011b2:	68fb      	ldr	r3, [r7, #12]
  4011b4:	685b      	ldr	r3, [r3, #4]
  4011b6:	4618      	mov	r0, r3
  4011b8:	4b1e      	ldr	r3, [pc, #120]	; (401234 <xQueueGenericReceive+0x1c4>)
  4011ba:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  4011bc:	4b18      	ldr	r3, [pc, #96]	; (401220 <xQueueGenericReceive+0x1b0>)
  4011be:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4011c0:	68fb      	ldr	r3, [r7, #12]
  4011c2:	3324      	adds	r3, #36	; 0x24
  4011c4:	687a      	ldr	r2, [r7, #4]
  4011c6:	4611      	mov	r1, r2
  4011c8:	4618      	mov	r0, r3
  4011ca:	4b1b      	ldr	r3, [pc, #108]	; (401238 <xQueueGenericReceive+0x1c8>)
  4011cc:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4011ce:	68f8      	ldr	r0, [r7, #12]
  4011d0:	4b1a      	ldr	r3, [pc, #104]	; (40123c <xQueueGenericReceive+0x1cc>)
  4011d2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4011d4:	4b1a      	ldr	r3, [pc, #104]	; (401240 <xQueueGenericReceive+0x1d0>)
  4011d6:	4798      	blx	r3
  4011d8:	4603      	mov	r3, r0
  4011da:	2b00      	cmp	r3, #0
  4011dc:	f47f af68 	bne.w	4010b0 <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
  4011e0:	4b0e      	ldr	r3, [pc, #56]	; (40121c <xQueueGenericReceive+0x1ac>)
  4011e2:	4798      	blx	r3
  4011e4:	e764      	b.n	4010b0 <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  4011e6:	68f8      	ldr	r0, [r7, #12]
  4011e8:	4b14      	ldr	r3, [pc, #80]	; (40123c <xQueueGenericReceive+0x1cc>)
  4011ea:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4011ec:	4b14      	ldr	r3, [pc, #80]	; (401240 <xQueueGenericReceive+0x1d0>)
  4011ee:	4798      	blx	r3
  4011f0:	e75e      	b.n	4010b0 <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  4011f2:	68f8      	ldr	r0, [r7, #12]
  4011f4:	4b11      	ldr	r3, [pc, #68]	; (40123c <xQueueGenericReceive+0x1cc>)
  4011f6:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4011f8:	4b11      	ldr	r3, [pc, #68]	; (401240 <xQueueGenericReceive+0x1d0>)
  4011fa:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  4011fc:	2300      	movs	r3, #0
		}
	}
}
  4011fe:	4618      	mov	r0, r3
  401200:	3720      	adds	r7, #32
  401202:	46bd      	mov	sp, r7
  401204:	bd80      	pop	{r7, pc}
  401206:	bf00      	nop
  401208:	00400971 	.word	0x00400971
  40120c:	00400929 	.word	0x00400929
  401210:	00401305 	.word	0x00401305
  401214:	00402015 	.word	0x00402015
  401218:	00401b9d 	.word	0x00401b9d
  40121c:	0040090d 	.word	0x0040090d
  401220:	00400949 	.word	0x00400949
  401224:	00401c59 	.word	0x00401c59
  401228:	0040175d 	.word	0x0040175d
  40122c:	00401c95 	.word	0x00401c95
  401230:	004013fd 	.word	0x004013fd
  401234:	00402071 	.word	0x00402071
  401238:	00401ab5 	.word	0x00401ab5
  40123c:	00401355 	.word	0x00401355
  401240:	00401779 	.word	0x00401779

00401244 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  401244:	b580      	push	{r7, lr}
  401246:	b084      	sub	sp, #16
  401248:	af00      	add	r7, sp, #0
  40124a:	60f8      	str	r0, [r7, #12]
  40124c:	60b9      	str	r1, [r7, #8]
  40124e:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  401250:	68fb      	ldr	r3, [r7, #12]
  401252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401254:	2b00      	cmp	r3, #0
  401256:	d10c      	bne.n	401272 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401258:	68fb      	ldr	r3, [r7, #12]
  40125a:	681b      	ldr	r3, [r3, #0]
  40125c:	2b00      	cmp	r3, #0
  40125e:	d143      	bne.n	4012e8 <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401260:	68fb      	ldr	r3, [r7, #12]
  401262:	685b      	ldr	r3, [r3, #4]
  401264:	4618      	mov	r0, r3
  401266:	4b25      	ldr	r3, [pc, #148]	; (4012fc <prvCopyDataToQueue+0xb8>)
  401268:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  40126a:	68fb      	ldr	r3, [r7, #12]
  40126c:	2200      	movs	r2, #0
  40126e:	605a      	str	r2, [r3, #4]
  401270:	e03a      	b.n	4012e8 <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  401272:	687b      	ldr	r3, [r7, #4]
  401274:	2b00      	cmp	r3, #0
  401276:	d119      	bne.n	4012ac <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  401278:	68fb      	ldr	r3, [r7, #12]
  40127a:	6898      	ldr	r0, [r3, #8]
  40127c:	68fb      	ldr	r3, [r7, #12]
  40127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401280:	461a      	mov	r2, r3
  401282:	68b9      	ldr	r1, [r7, #8]
  401284:	4b1e      	ldr	r3, [pc, #120]	; (401300 <prvCopyDataToQueue+0xbc>)
  401286:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401288:	68fb      	ldr	r3, [r7, #12]
  40128a:	689a      	ldr	r2, [r3, #8]
  40128c:	68fb      	ldr	r3, [r7, #12]
  40128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401290:	441a      	add	r2, r3
  401292:	68fb      	ldr	r3, [r7, #12]
  401294:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  401296:	68fb      	ldr	r3, [r7, #12]
  401298:	689a      	ldr	r2, [r3, #8]
  40129a:	68fb      	ldr	r3, [r7, #12]
  40129c:	685b      	ldr	r3, [r3, #4]
  40129e:	429a      	cmp	r2, r3
  4012a0:	d322      	bcc.n	4012e8 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4012a2:	68fb      	ldr	r3, [r7, #12]
  4012a4:	681a      	ldr	r2, [r3, #0]
  4012a6:	68fb      	ldr	r3, [r7, #12]
  4012a8:	609a      	str	r2, [r3, #8]
  4012aa:	e01d      	b.n	4012e8 <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  4012ac:	68fb      	ldr	r3, [r7, #12]
  4012ae:	68d8      	ldr	r0, [r3, #12]
  4012b0:	68fb      	ldr	r3, [r7, #12]
  4012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4012b4:	461a      	mov	r2, r3
  4012b6:	68b9      	ldr	r1, [r7, #8]
  4012b8:	4b11      	ldr	r3, [pc, #68]	; (401300 <prvCopyDataToQueue+0xbc>)
  4012ba:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  4012bc:	68fb      	ldr	r3, [r7, #12]
  4012be:	68da      	ldr	r2, [r3, #12]
  4012c0:	68fb      	ldr	r3, [r7, #12]
  4012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4012c4:	425b      	negs	r3, r3
  4012c6:	441a      	add	r2, r3
  4012c8:	68fb      	ldr	r3, [r7, #12]
  4012ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  4012cc:	68fb      	ldr	r3, [r7, #12]
  4012ce:	68da      	ldr	r2, [r3, #12]
  4012d0:	68fb      	ldr	r3, [r7, #12]
  4012d2:	681b      	ldr	r3, [r3, #0]
  4012d4:	429a      	cmp	r2, r3
  4012d6:	d207      	bcs.n	4012e8 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4012d8:	68fb      	ldr	r3, [r7, #12]
  4012da:	685a      	ldr	r2, [r3, #4]
  4012dc:	68fb      	ldr	r3, [r7, #12]
  4012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4012e0:	425b      	negs	r3, r3
  4012e2:	441a      	add	r2, r3
  4012e4:	68fb      	ldr	r3, [r7, #12]
  4012e6:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4012e8:	68fb      	ldr	r3, [r7, #12]
  4012ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4012ec:	1c5a      	adds	r2, r3, #1
  4012ee:	68fb      	ldr	r3, [r7, #12]
  4012f0:	639a      	str	r2, [r3, #56]	; 0x38
}
  4012f2:	bf00      	nop
  4012f4:	3710      	adds	r7, #16
  4012f6:	46bd      	mov	sp, r7
  4012f8:	bd80      	pop	{r7, pc}
  4012fa:	bf00      	nop
  4012fc:	00402125 	.word	0x00402125
  401300:	00404111 	.word	0x00404111

00401304 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  401304:	b580      	push	{r7, lr}
  401306:	b082      	sub	sp, #8
  401308:	af00      	add	r7, sp, #0
  40130a:	6078      	str	r0, [r7, #4]
  40130c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  40130e:	687b      	ldr	r3, [r7, #4]
  401310:	681b      	ldr	r3, [r3, #0]
  401312:	2b00      	cmp	r3, #0
  401314:	d018      	beq.n	401348 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  401316:	687b      	ldr	r3, [r7, #4]
  401318:	68da      	ldr	r2, [r3, #12]
  40131a:	687b      	ldr	r3, [r7, #4]
  40131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40131e:	441a      	add	r2, r3
  401320:	687b      	ldr	r3, [r7, #4]
  401322:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  401324:	687b      	ldr	r3, [r7, #4]
  401326:	68da      	ldr	r2, [r3, #12]
  401328:	687b      	ldr	r3, [r7, #4]
  40132a:	685b      	ldr	r3, [r3, #4]
  40132c:	429a      	cmp	r2, r3
  40132e:	d303      	bcc.n	401338 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  401330:	687b      	ldr	r3, [r7, #4]
  401332:	681a      	ldr	r2, [r3, #0]
  401334:	687b      	ldr	r3, [r7, #4]
  401336:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  401338:	687b      	ldr	r3, [r7, #4]
  40133a:	68d9      	ldr	r1, [r3, #12]
  40133c:	687b      	ldr	r3, [r7, #4]
  40133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401340:	461a      	mov	r2, r3
  401342:	6838      	ldr	r0, [r7, #0]
  401344:	4b02      	ldr	r3, [pc, #8]	; (401350 <prvCopyDataFromQueue+0x4c>)
  401346:	4798      	blx	r3
	}
}
  401348:	bf00      	nop
  40134a:	3708      	adds	r7, #8
  40134c:	46bd      	mov	sp, r7
  40134e:	bd80      	pop	{r7, pc}
  401350:	00404111 	.word	0x00404111

00401354 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  401354:	b580      	push	{r7, lr}
  401356:	b082      	sub	sp, #8
  401358:	af00      	add	r7, sp, #0
  40135a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  40135c:	4b23      	ldr	r3, [pc, #140]	; (4013ec <prvUnlockQueue+0x98>)
  40135e:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401360:	e012      	b.n	401388 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401362:	687b      	ldr	r3, [r7, #4]
  401364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401366:	2b00      	cmp	r3, #0
  401368:	d013      	beq.n	401392 <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40136a:	687b      	ldr	r3, [r7, #4]
  40136c:	3324      	adds	r3, #36	; 0x24
  40136e:	4618      	mov	r0, r3
  401370:	4b1f      	ldr	r3, [pc, #124]	; (4013f0 <prvUnlockQueue+0x9c>)
  401372:	4798      	blx	r3
  401374:	4603      	mov	r3, r0
  401376:	2b00      	cmp	r3, #0
  401378:	d001      	beq.n	40137e <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  40137a:	4b1e      	ldr	r3, [pc, #120]	; (4013f4 <prvUnlockQueue+0xa0>)
  40137c:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  40137e:	687b      	ldr	r3, [r7, #4]
  401380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401382:	1e5a      	subs	r2, r3, #1
  401384:	687b      	ldr	r3, [r7, #4]
  401386:	649a      	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401388:	687b      	ldr	r3, [r7, #4]
  40138a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40138c:	2b00      	cmp	r3, #0
  40138e:	dce8      	bgt.n	401362 <prvUnlockQueue+0xe>
  401390:	e000      	b.n	401394 <prvUnlockQueue+0x40>
			}
			else
			{
				break;
  401392:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  401394:	687b      	ldr	r3, [r7, #4]
  401396:	f04f 32ff 	mov.w	r2, #4294967295
  40139a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  40139c:	4b16      	ldr	r3, [pc, #88]	; (4013f8 <prvUnlockQueue+0xa4>)
  40139e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  4013a0:	4b12      	ldr	r3, [pc, #72]	; (4013ec <prvUnlockQueue+0x98>)
  4013a2:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4013a4:	e012      	b.n	4013cc <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4013a6:	687b      	ldr	r3, [r7, #4]
  4013a8:	691b      	ldr	r3, [r3, #16]
  4013aa:	2b00      	cmp	r3, #0
  4013ac:	d013      	beq.n	4013d6 <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4013ae:	687b      	ldr	r3, [r7, #4]
  4013b0:	3310      	adds	r3, #16
  4013b2:	4618      	mov	r0, r3
  4013b4:	4b0e      	ldr	r3, [pc, #56]	; (4013f0 <prvUnlockQueue+0x9c>)
  4013b6:	4798      	blx	r3
  4013b8:	4603      	mov	r3, r0
  4013ba:	2b00      	cmp	r3, #0
  4013bc:	d001      	beq.n	4013c2 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  4013be:	4b0d      	ldr	r3, [pc, #52]	; (4013f4 <prvUnlockQueue+0xa0>)
  4013c0:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  4013c2:	687b      	ldr	r3, [r7, #4]
  4013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  4013c6:	1e5a      	subs	r2, r3, #1
  4013c8:	687b      	ldr	r3, [r7, #4]
  4013ca:	645a      	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4013cc:	687b      	ldr	r3, [r7, #4]
  4013ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  4013d0:	2b00      	cmp	r3, #0
  4013d2:	dce8      	bgt.n	4013a6 <prvUnlockQueue+0x52>
  4013d4:	e000      	b.n	4013d8 <prvUnlockQueue+0x84>
			}
			else
			{
				break;
  4013d6:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  4013d8:	687b      	ldr	r3, [r7, #4]
  4013da:	f04f 32ff 	mov.w	r2, #4294967295
  4013de:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  4013e0:	4b05      	ldr	r3, [pc, #20]	; (4013f8 <prvUnlockQueue+0xa4>)
  4013e2:	4798      	blx	r3
}
  4013e4:	bf00      	nop
  4013e6:	3708      	adds	r7, #8
  4013e8:	46bd      	mov	sp, r7
  4013ea:	bd80      	pop	{r7, pc}
  4013ec:	00400929 	.word	0x00400929
  4013f0:	00401b9d 	.word	0x00401b9d
  4013f4:	00401d49 	.word	0x00401d49
  4013f8:	00400949 	.word	0x00400949

004013fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  4013fc:	b580      	push	{r7, lr}
  4013fe:	b084      	sub	sp, #16
  401400:	af00      	add	r7, sp, #0
  401402:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  401404:	4b08      	ldr	r3, [pc, #32]	; (401428 <prvIsQueueEmpty+0x2c>)
  401406:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  401408:	687b      	ldr	r3, [r7, #4]
  40140a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40140c:	2b00      	cmp	r3, #0
  40140e:	bf0c      	ite	eq
  401410:	2301      	moveq	r3, #1
  401412:	2300      	movne	r3, #0
  401414:	b2db      	uxtb	r3, r3
  401416:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  401418:	4b04      	ldr	r3, [pc, #16]	; (40142c <prvIsQueueEmpty+0x30>)
  40141a:	4798      	blx	r3

	return xReturn;
  40141c:	68fb      	ldr	r3, [r7, #12]
}
  40141e:	4618      	mov	r0, r3
  401420:	3710      	adds	r7, #16
  401422:	46bd      	mov	sp, r7
  401424:	bd80      	pop	{r7, pc}
  401426:	bf00      	nop
  401428:	00400929 	.word	0x00400929
  40142c:	00400949 	.word	0x00400949

00401430 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  401430:	b580      	push	{r7, lr}
  401432:	b084      	sub	sp, #16
  401434:	af00      	add	r7, sp, #0
  401436:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  401438:	4b09      	ldr	r3, [pc, #36]	; (401460 <prvIsQueueFull+0x30>)
  40143a:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  40143c:	687b      	ldr	r3, [r7, #4]
  40143e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  401440:	687b      	ldr	r3, [r7, #4]
  401442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  401444:	429a      	cmp	r2, r3
  401446:	bf0c      	ite	eq
  401448:	2301      	moveq	r3, #1
  40144a:	2300      	movne	r3, #0
  40144c:	b2db      	uxtb	r3, r3
  40144e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  401450:	4b04      	ldr	r3, [pc, #16]	; (401464 <prvIsQueueFull+0x34>)
  401452:	4798      	blx	r3

	return xReturn;
  401454:	68fb      	ldr	r3, [r7, #12]
}
  401456:	4618      	mov	r0, r3
  401458:	3710      	adds	r7, #16
  40145a:	46bd      	mov	sp, r7
  40145c:	bd80      	pop	{r7, pc}
  40145e:	bf00      	nop
  401460:	00400929 	.word	0x00400929
  401464:	00400949 	.word	0x00400949

00401468 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  401468:	b580      	push	{r7, lr}
  40146a:	b082      	sub	sp, #8
  40146c:	af00      	add	r7, sp, #0
  40146e:	6078      	str	r0, [r7, #4]
  401470:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  401472:	4b12      	ldr	r3, [pc, #72]	; (4014bc <vQueueWaitForMessageRestricted+0x54>)
  401474:	4798      	blx	r3
  401476:	687b      	ldr	r3, [r7, #4]
  401478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40147a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40147e:	d102      	bne.n	401486 <vQueueWaitForMessageRestricted+0x1e>
  401480:	687b      	ldr	r3, [r7, #4]
  401482:	2200      	movs	r2, #0
  401484:	645a      	str	r2, [r3, #68]	; 0x44
  401486:	687b      	ldr	r3, [r7, #4]
  401488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40148a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40148e:	d102      	bne.n	401496 <vQueueWaitForMessageRestricted+0x2e>
  401490:	687b      	ldr	r3, [r7, #4]
  401492:	2200      	movs	r2, #0
  401494:	649a      	str	r2, [r3, #72]	; 0x48
  401496:	4b0a      	ldr	r3, [pc, #40]	; (4014c0 <vQueueWaitForMessageRestricted+0x58>)
  401498:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  40149a:	687b      	ldr	r3, [r7, #4]
  40149c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40149e:	2b00      	cmp	r3, #0
  4014a0:	d105      	bne.n	4014ae <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4014a2:	687b      	ldr	r3, [r7, #4]
  4014a4:	3324      	adds	r3, #36	; 0x24
  4014a6:	6839      	ldr	r1, [r7, #0]
  4014a8:	4618      	mov	r0, r3
  4014aa:	4b06      	ldr	r3, [pc, #24]	; (4014c4 <vQueueWaitForMessageRestricted+0x5c>)
  4014ac:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  4014ae:	6878      	ldr	r0, [r7, #4]
  4014b0:	4b05      	ldr	r3, [pc, #20]	; (4014c8 <vQueueWaitForMessageRestricted+0x60>)
  4014b2:	4798      	blx	r3
	}
  4014b4:	bf00      	nop
  4014b6:	3708      	adds	r7, #8
  4014b8:	46bd      	mov	sp, r7
  4014ba:	bd80      	pop	{r7, pc}
  4014bc:	00400929 	.word	0x00400929
  4014c0:	00400949 	.word	0x00400949
  4014c4:	00401b39 	.word	0x00401b39
  4014c8:	00401355 	.word	0x00401355

004014cc <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  4014cc:	b590      	push	{r4, r7, lr}
  4014ce:	b08b      	sub	sp, #44	; 0x2c
  4014d0:	af02      	add	r7, sp, #8
  4014d2:	60f8      	str	r0, [r7, #12]
  4014d4:	60b9      	str	r1, [r7, #8]
  4014d6:	603b      	str	r3, [r7, #0]
  4014d8:	4613      	mov	r3, r2
  4014da:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  4014dc:	68fb      	ldr	r3, [r7, #12]
  4014de:	2b00      	cmp	r3, #0
  4014e0:	d103      	bne.n	4014ea <xTaskGenericCreate+0x1e>
  4014e2:	4b54      	ldr	r3, [pc, #336]	; (401634 <xTaskGenericCreate+0x168>)
  4014e4:	4798      	blx	r3
  4014e6:	bf00      	nop
  4014e8:	e7fd      	b.n	4014e6 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  4014ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4014ec:	2b04      	cmp	r3, #4
  4014ee:	d903      	bls.n	4014f8 <xTaskGenericCreate+0x2c>
  4014f0:	4b50      	ldr	r3, [pc, #320]	; (401634 <xTaskGenericCreate+0x168>)
  4014f2:	4798      	blx	r3
  4014f4:	bf00      	nop
  4014f6:	e7fd      	b.n	4014f4 <xTaskGenericCreate+0x28>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  4014f8:	88fb      	ldrh	r3, [r7, #6]
  4014fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  4014fc:	4618      	mov	r0, r3
  4014fe:	4b4e      	ldr	r3, [pc, #312]	; (401638 <xTaskGenericCreate+0x16c>)
  401500:	4798      	blx	r3
  401502:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  401504:	69bb      	ldr	r3, [r7, #24]
  401506:	2b00      	cmp	r3, #0
  401508:	d07d      	beq.n	401606 <xTaskGenericCreate+0x13a>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  40150a:	69bb      	ldr	r3, [r7, #24]
  40150c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40150e:	88fb      	ldrh	r3, [r7, #6]
  401510:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  401514:	3b01      	subs	r3, #1
  401516:	009b      	lsls	r3, r3, #2
  401518:	4413      	add	r3, r2
  40151a:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  40151c:	697b      	ldr	r3, [r7, #20]
  40151e:	f023 0307 	bic.w	r3, r3, #7
  401522:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  401524:	697b      	ldr	r3, [r7, #20]
  401526:	f003 0307 	and.w	r3, r3, #7
  40152a:	2b00      	cmp	r3, #0
  40152c:	d003      	beq.n	401536 <xTaskGenericCreate+0x6a>
  40152e:	4b41      	ldr	r3, [pc, #260]	; (401634 <xTaskGenericCreate+0x168>)
  401530:	4798      	blx	r3
  401532:	bf00      	nop
  401534:	e7fd      	b.n	401532 <xTaskGenericCreate+0x66>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  401536:	88fb      	ldrh	r3, [r7, #6]
  401538:	9300      	str	r3, [sp, #0]
  40153a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40153c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40153e:	68b9      	ldr	r1, [r7, #8]
  401540:	69b8      	ldr	r0, [r7, #24]
  401542:	4c3e      	ldr	r4, [pc, #248]	; (40163c <xTaskGenericCreate+0x170>)
  401544:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401546:	683a      	ldr	r2, [r7, #0]
  401548:	68f9      	ldr	r1, [r7, #12]
  40154a:	6978      	ldr	r0, [r7, #20]
  40154c:	4b3c      	ldr	r3, [pc, #240]	; (401640 <xTaskGenericCreate+0x174>)
  40154e:	4798      	blx	r3
  401550:	4602      	mov	r2, r0
  401552:	69bb      	ldr	r3, [r7, #24]
  401554:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
  401556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  401558:	2b00      	cmp	r3, #0
  40155a:	d002      	beq.n	401562 <xTaskGenericCreate+0x96>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  40155c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40155e:	69ba      	ldr	r2, [r7, #24]
  401560:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  401562:	4b38      	ldr	r3, [pc, #224]	; (401644 <xTaskGenericCreate+0x178>)
  401564:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  401566:	4b38      	ldr	r3, [pc, #224]	; (401648 <xTaskGenericCreate+0x17c>)
  401568:	681b      	ldr	r3, [r3, #0]
  40156a:	3301      	adds	r3, #1
  40156c:	4a36      	ldr	r2, [pc, #216]	; (401648 <xTaskGenericCreate+0x17c>)
  40156e:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401570:	4b36      	ldr	r3, [pc, #216]	; (40164c <xTaskGenericCreate+0x180>)
  401572:	681b      	ldr	r3, [r3, #0]
  401574:	2b00      	cmp	r3, #0
  401576:	d109      	bne.n	40158c <xTaskGenericCreate+0xc0>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  401578:	4a34      	ldr	r2, [pc, #208]	; (40164c <xTaskGenericCreate+0x180>)
  40157a:	69bb      	ldr	r3, [r7, #24]
  40157c:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  40157e:	4b32      	ldr	r3, [pc, #200]	; (401648 <xTaskGenericCreate+0x17c>)
  401580:	681b      	ldr	r3, [r3, #0]
  401582:	2b01      	cmp	r3, #1
  401584:	d10f      	bne.n	4015a6 <xTaskGenericCreate+0xda>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  401586:	4b32      	ldr	r3, [pc, #200]	; (401650 <xTaskGenericCreate+0x184>)
  401588:	4798      	blx	r3
  40158a:	e00c      	b.n	4015a6 <xTaskGenericCreate+0xda>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  40158c:	4b31      	ldr	r3, [pc, #196]	; (401654 <xTaskGenericCreate+0x188>)
  40158e:	681b      	ldr	r3, [r3, #0]
  401590:	2b00      	cmp	r3, #0
  401592:	d108      	bne.n	4015a6 <xTaskGenericCreate+0xda>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401594:	4b2d      	ldr	r3, [pc, #180]	; (40164c <xTaskGenericCreate+0x180>)
  401596:	681b      	ldr	r3, [r3, #0]
  401598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40159a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40159c:	429a      	cmp	r2, r3
  40159e:	d802      	bhi.n	4015a6 <xTaskGenericCreate+0xda>
					{
						pxCurrentTCB = pxNewTCB;
  4015a0:	4a2a      	ldr	r2, [pc, #168]	; (40164c <xTaskGenericCreate+0x180>)
  4015a2:	69bb      	ldr	r3, [r7, #24]
  4015a4:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  4015a6:	69bb      	ldr	r3, [r7, #24]
  4015a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4015aa:	4b2b      	ldr	r3, [pc, #172]	; (401658 <xTaskGenericCreate+0x18c>)
  4015ac:	681b      	ldr	r3, [r3, #0]
  4015ae:	429a      	cmp	r2, r3
  4015b0:	d903      	bls.n	4015ba <xTaskGenericCreate+0xee>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  4015b2:	69bb      	ldr	r3, [r7, #24]
  4015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4015b6:	4a28      	ldr	r2, [pc, #160]	; (401658 <xTaskGenericCreate+0x18c>)
  4015b8:	6013      	str	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4015ba:	4b28      	ldr	r3, [pc, #160]	; (40165c <xTaskGenericCreate+0x190>)
  4015bc:	681a      	ldr	r2, [r3, #0]
  4015be:	69bb      	ldr	r3, [r7, #24]
  4015c0:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  4015c2:	4b26      	ldr	r3, [pc, #152]	; (40165c <xTaskGenericCreate+0x190>)
  4015c4:	681b      	ldr	r3, [r3, #0]
  4015c6:	3301      	adds	r3, #1
  4015c8:	4a24      	ldr	r2, [pc, #144]	; (40165c <xTaskGenericCreate+0x190>)
  4015ca:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  4015cc:	69bb      	ldr	r3, [r7, #24]
  4015ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4015d0:	4b23      	ldr	r3, [pc, #140]	; (401660 <xTaskGenericCreate+0x194>)
  4015d2:	681b      	ldr	r3, [r3, #0]
  4015d4:	429a      	cmp	r2, r3
  4015d6:	d903      	bls.n	4015e0 <xTaskGenericCreate+0x114>
  4015d8:	69bb      	ldr	r3, [r7, #24]
  4015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4015dc:	4a20      	ldr	r2, [pc, #128]	; (401660 <xTaskGenericCreate+0x194>)
  4015de:	6013      	str	r3, [r2, #0]
  4015e0:	69bb      	ldr	r3, [r7, #24]
  4015e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4015e4:	4613      	mov	r3, r2
  4015e6:	009b      	lsls	r3, r3, #2
  4015e8:	4413      	add	r3, r2
  4015ea:	009b      	lsls	r3, r3, #2
  4015ec:	4a1d      	ldr	r2, [pc, #116]	; (401664 <xTaskGenericCreate+0x198>)
  4015ee:	441a      	add	r2, r3
  4015f0:	69bb      	ldr	r3, [r7, #24]
  4015f2:	3304      	adds	r3, #4
  4015f4:	4619      	mov	r1, r3
  4015f6:	4610      	mov	r0, r2
  4015f8:	4b1b      	ldr	r3, [pc, #108]	; (401668 <xTaskGenericCreate+0x19c>)
  4015fa:	4798      	blx	r3

			xReturn = pdPASS;
  4015fc:	2301      	movs	r3, #1
  4015fe:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  401600:	4b1a      	ldr	r3, [pc, #104]	; (40166c <xTaskGenericCreate+0x1a0>)
  401602:	4798      	blx	r3
  401604:	e002      	b.n	40160c <xTaskGenericCreate+0x140>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401606:	f04f 33ff 	mov.w	r3, #4294967295
  40160a:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  40160c:	69fb      	ldr	r3, [r7, #28]
  40160e:	2b01      	cmp	r3, #1
  401610:	d10b      	bne.n	40162a <xTaskGenericCreate+0x15e>
	{
		if( xSchedulerRunning != pdFALSE )
  401612:	4b10      	ldr	r3, [pc, #64]	; (401654 <xTaskGenericCreate+0x188>)
  401614:	681b      	ldr	r3, [r3, #0]
  401616:	2b00      	cmp	r3, #0
  401618:	d007      	beq.n	40162a <xTaskGenericCreate+0x15e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  40161a:	4b0c      	ldr	r3, [pc, #48]	; (40164c <xTaskGenericCreate+0x180>)
  40161c:	681b      	ldr	r3, [r3, #0]
  40161e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401622:	429a      	cmp	r2, r3
  401624:	d201      	bcs.n	40162a <xTaskGenericCreate+0x15e>
			{
				portYIELD_WITHIN_API();
  401626:	4b12      	ldr	r3, [pc, #72]	; (401670 <xTaskGenericCreate+0x1a4>)
  401628:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  40162a:	69fb      	ldr	r3, [r7, #28]
}
  40162c:	4618      	mov	r0, r3
  40162e:	3724      	adds	r7, #36	; 0x24
  401630:	46bd      	mov	sp, r7
  401632:	bd90      	pop	{r4, r7, pc}
  401634:	00400971 	.word	0x00400971
  401638:	00401f81 	.word	0x00401f81
  40163c:	00401d89 	.word	0x00401d89
  401640:	0040081d 	.word	0x0040081d
  401644:	00400929 	.word	0x00400929
  401648:	2000a5c4 	.word	0x2000a5c4
  40164c:	2000a4ec 	.word	0x2000a4ec
  401650:	00401dfd 	.word	0x00401dfd
  401654:	2000a5d4 	.word	0x2000a5d4
  401658:	2000a5cc 	.word	0x2000a5cc
  40165c:	2000a5e8 	.word	0x2000a5e8
  401660:	2000a5d0 	.word	0x2000a5d0
  401664:	2000a4f0 	.word	0x2000a4f0
  401668:	0040065b 	.word	0x0040065b
  40166c:	00400949 	.word	0x00400949
  401670:	0040090d 	.word	0x0040090d

00401674 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  401674:	b580      	push	{r7, lr}
  401676:	b084      	sub	sp, #16
  401678:	af00      	add	r7, sp, #0
  40167a:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  40167c:	2300      	movs	r3, #0
  40167e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  401680:	687b      	ldr	r3, [r7, #4]
  401682:	2b00      	cmp	r3, #0
  401684:	d012      	beq.n	4016ac <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  401686:	4b0e      	ldr	r3, [pc, #56]	; (4016c0 <vTaskDelay+0x4c>)
  401688:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  40168a:	4b0e      	ldr	r3, [pc, #56]	; (4016c4 <vTaskDelay+0x50>)
  40168c:	681a      	ldr	r2, [r3, #0]
  40168e:	687b      	ldr	r3, [r7, #4]
  401690:	4413      	add	r3, r2
  401692:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401694:	4b0c      	ldr	r3, [pc, #48]	; (4016c8 <vTaskDelay+0x54>)
  401696:	681b      	ldr	r3, [r3, #0]
  401698:	3304      	adds	r3, #4
  40169a:	4618      	mov	r0, r3
  40169c:	4b0b      	ldr	r3, [pc, #44]	; (4016cc <vTaskDelay+0x58>)
  40169e:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4016a0:	68b8      	ldr	r0, [r7, #8]
  4016a2:	4b0b      	ldr	r3, [pc, #44]	; (4016d0 <vTaskDelay+0x5c>)
  4016a4:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  4016a6:	4b0b      	ldr	r3, [pc, #44]	; (4016d4 <vTaskDelay+0x60>)
  4016a8:	4798      	blx	r3
  4016aa:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  4016ac:	68fb      	ldr	r3, [r7, #12]
  4016ae:	2b00      	cmp	r3, #0
  4016b0:	d101      	bne.n	4016b6 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  4016b2:	4b09      	ldr	r3, [pc, #36]	; (4016d8 <vTaskDelay+0x64>)
  4016b4:	4798      	blx	r3
		}
	}
  4016b6:	bf00      	nop
  4016b8:	3710      	adds	r7, #16
  4016ba:	46bd      	mov	sp, r7
  4016bc:	bd80      	pop	{r7, pc}
  4016be:	bf00      	nop
  4016c0:	0040175d 	.word	0x0040175d
  4016c4:	2000a5c8 	.word	0x2000a5c8
  4016c8:	2000a4ec 	.word	0x2000a4ec
  4016cc:	0040071d 	.word	0x0040071d
  4016d0:	00401f11 	.word	0x00401f11
  4016d4:	00401779 	.word	0x00401779
  4016d8:	0040090d 	.word	0x0040090d

004016dc <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  4016dc:	b590      	push	{r4, r7, lr}
  4016de:	b087      	sub	sp, #28
  4016e0:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  4016e2:	2300      	movs	r3, #0
  4016e4:	9303      	str	r3, [sp, #12]
  4016e6:	2300      	movs	r3, #0
  4016e8:	9302      	str	r3, [sp, #8]
  4016ea:	2300      	movs	r3, #0
  4016ec:	9301      	str	r3, [sp, #4]
  4016ee:	2300      	movs	r3, #0
  4016f0:	9300      	str	r3, [sp, #0]
  4016f2:	2300      	movs	r3, #0
  4016f4:	2282      	movs	r2, #130	; 0x82
  4016f6:	4911      	ldr	r1, [pc, #68]	; (40173c <vTaskStartScheduler+0x60>)
  4016f8:	4811      	ldr	r0, [pc, #68]	; (401740 <vTaskStartScheduler+0x64>)
  4016fa:	4c12      	ldr	r4, [pc, #72]	; (401744 <vTaskStartScheduler+0x68>)
  4016fc:	47a0      	blx	r4
  4016fe:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  401700:	687b      	ldr	r3, [r7, #4]
  401702:	2b01      	cmp	r3, #1
  401704:	d102      	bne.n	40170c <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  401706:	4b10      	ldr	r3, [pc, #64]	; (401748 <vTaskStartScheduler+0x6c>)
  401708:	4798      	blx	r3
  40170a:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  40170c:	687b      	ldr	r3, [r7, #4]
  40170e:	2b01      	cmp	r3, #1
  401710:	d109      	bne.n	401726 <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  401712:	4b0e      	ldr	r3, [pc, #56]	; (40174c <vTaskStartScheduler+0x70>)
  401714:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  401716:	4b0e      	ldr	r3, [pc, #56]	; (401750 <vTaskStartScheduler+0x74>)
  401718:	2201      	movs	r2, #1
  40171a:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  40171c:	4b0d      	ldr	r3, [pc, #52]	; (401754 <vTaskStartScheduler+0x78>)
  40171e:	2200      	movs	r2, #0
  401720:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  401722:	4b0d      	ldr	r3, [pc, #52]	; (401758 <vTaskStartScheduler+0x7c>)
  401724:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  401726:	687b      	ldr	r3, [r7, #4]
  401728:	2b00      	cmp	r3, #0
  40172a:	d103      	bne.n	401734 <vTaskStartScheduler+0x58>
  40172c:	4b07      	ldr	r3, [pc, #28]	; (40174c <vTaskStartScheduler+0x70>)
  40172e:	4798      	blx	r3
  401730:	bf00      	nop
  401732:	e7fd      	b.n	401730 <vTaskStartScheduler+0x54>
}
  401734:	bf00      	nop
  401736:	370c      	adds	r7, #12
  401738:	46bd      	mov	sp, r7
  40173a:	bd90      	pop	{r4, r7, pc}
  40173c:	00404464 	.word	0x00404464
  401740:	00401d61 	.word	0x00401d61
  401744:	004014cd 	.word	0x004014cd
  401748:	004021a9 	.word	0x004021a9
  40174c:	00400971 	.word	0x00400971
  401750:	2000a5d4 	.word	0x2000a5d4
  401754:	2000a5c8 	.word	0x2000a5c8
  401758:	004008b5 	.word	0x004008b5

0040175c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  40175c:	b480      	push	{r7}
  40175e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  401760:	4b04      	ldr	r3, [pc, #16]	; (401774 <vTaskSuspendAll+0x18>)
  401762:	681b      	ldr	r3, [r3, #0]
  401764:	3301      	adds	r3, #1
  401766:	4a03      	ldr	r2, [pc, #12]	; (401774 <vTaskSuspendAll+0x18>)
  401768:	6013      	str	r3, [r2, #0]
}
  40176a:	bf00      	nop
  40176c:	46bd      	mov	sp, r7
  40176e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401772:	4770      	bx	lr
  401774:	2000a5d8 	.word	0x2000a5d8

00401778 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  401778:	b590      	push	{r4, r7, lr}
  40177a:	b083      	sub	sp, #12
  40177c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  40177e:	2300      	movs	r3, #0
  401780:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401782:	4b36      	ldr	r3, [pc, #216]	; (40185c <xTaskResumeAll+0xe4>)
  401784:	681b      	ldr	r3, [r3, #0]
  401786:	2b00      	cmp	r3, #0
  401788:	d103      	bne.n	401792 <xTaskResumeAll+0x1a>
  40178a:	4b35      	ldr	r3, [pc, #212]	; (401860 <xTaskResumeAll+0xe8>)
  40178c:	4798      	blx	r3
  40178e:	bf00      	nop
  401790:	e7fd      	b.n	40178e <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401792:	4b34      	ldr	r3, [pc, #208]	; (401864 <xTaskResumeAll+0xec>)
  401794:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401796:	4b31      	ldr	r3, [pc, #196]	; (40185c <xTaskResumeAll+0xe4>)
  401798:	681b      	ldr	r3, [r3, #0]
  40179a:	3b01      	subs	r3, #1
  40179c:	4a2f      	ldr	r2, [pc, #188]	; (40185c <xTaskResumeAll+0xe4>)
  40179e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4017a0:	4b2e      	ldr	r3, [pc, #184]	; (40185c <xTaskResumeAll+0xe4>)
  4017a2:	681b      	ldr	r3, [r3, #0]
  4017a4:	2b00      	cmp	r3, #0
  4017a6:	d152      	bne.n	40184e <xTaskResumeAll+0xd6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  4017a8:	4b2f      	ldr	r3, [pc, #188]	; (401868 <xTaskResumeAll+0xf0>)
  4017aa:	681b      	ldr	r3, [r3, #0]
  4017ac:	2b00      	cmp	r3, #0
  4017ae:	d04e      	beq.n	40184e <xTaskResumeAll+0xd6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  4017b0:	2300      	movs	r3, #0
  4017b2:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  4017b4:	e027      	b.n	401806 <xTaskResumeAll+0x8e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  4017b6:	4b2d      	ldr	r3, [pc, #180]	; (40186c <xTaskResumeAll+0xf4>)
  4017b8:	68db      	ldr	r3, [r3, #12]
  4017ba:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  4017bc:	f104 0318 	add.w	r3, r4, #24
  4017c0:	4618      	mov	r0, r3
  4017c2:	4b2b      	ldr	r3, [pc, #172]	; (401870 <xTaskResumeAll+0xf8>)
  4017c4:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  4017c6:	1d23      	adds	r3, r4, #4
  4017c8:	4618      	mov	r0, r3
  4017ca:	4b29      	ldr	r3, [pc, #164]	; (401870 <xTaskResumeAll+0xf8>)
  4017cc:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  4017ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4017d0:	4b28      	ldr	r3, [pc, #160]	; (401874 <xTaskResumeAll+0xfc>)
  4017d2:	681b      	ldr	r3, [r3, #0]
  4017d4:	429a      	cmp	r2, r3
  4017d6:	d902      	bls.n	4017de <xTaskResumeAll+0x66>
  4017d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4017da:	4a26      	ldr	r2, [pc, #152]	; (401874 <xTaskResumeAll+0xfc>)
  4017dc:	6013      	str	r3, [r2, #0]
  4017de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4017e0:	4613      	mov	r3, r2
  4017e2:	009b      	lsls	r3, r3, #2
  4017e4:	4413      	add	r3, r2
  4017e6:	009b      	lsls	r3, r3, #2
  4017e8:	4a23      	ldr	r2, [pc, #140]	; (401878 <xTaskResumeAll+0x100>)
  4017ea:	4413      	add	r3, r2
  4017ec:	1d22      	adds	r2, r4, #4
  4017ee:	4611      	mov	r1, r2
  4017f0:	4618      	mov	r0, r3
  4017f2:	4b22      	ldr	r3, [pc, #136]	; (40187c <xTaskResumeAll+0x104>)
  4017f4:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4017f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4017f8:	4b21      	ldr	r3, [pc, #132]	; (401880 <xTaskResumeAll+0x108>)
  4017fa:	681b      	ldr	r3, [r3, #0]
  4017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4017fe:	429a      	cmp	r2, r3
  401800:	d301      	bcc.n	401806 <xTaskResumeAll+0x8e>
					{
						xYieldRequired = pdTRUE;
  401802:	2301      	movs	r3, #1
  401804:	603b      	str	r3, [r7, #0]
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  401806:	4b19      	ldr	r3, [pc, #100]	; (40186c <xTaskResumeAll+0xf4>)
  401808:	681b      	ldr	r3, [r3, #0]
  40180a:	2b00      	cmp	r3, #0
  40180c:	d1d3      	bne.n	4017b6 <xTaskResumeAll+0x3e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  40180e:	4b1d      	ldr	r3, [pc, #116]	; (401884 <xTaskResumeAll+0x10c>)
  401810:	681b      	ldr	r3, [r3, #0]
  401812:	2b00      	cmp	r3, #0
  401814:	d00d      	beq.n	401832 <xTaskResumeAll+0xba>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401816:	e006      	b.n	401826 <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  401818:	4b1b      	ldr	r3, [pc, #108]	; (401888 <xTaskResumeAll+0x110>)
  40181a:	4798      	blx	r3
						--uxMissedTicks;
  40181c:	4b19      	ldr	r3, [pc, #100]	; (401884 <xTaskResumeAll+0x10c>)
  40181e:	681b      	ldr	r3, [r3, #0]
  401820:	3b01      	subs	r3, #1
  401822:	4a18      	ldr	r2, [pc, #96]	; (401884 <xTaskResumeAll+0x10c>)
  401824:	6013      	str	r3, [r2, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401826:	4b17      	ldr	r3, [pc, #92]	; (401884 <xTaskResumeAll+0x10c>)
  401828:	681b      	ldr	r3, [r3, #0]
  40182a:	2b00      	cmp	r3, #0
  40182c:	d1f4      	bne.n	401818 <xTaskResumeAll+0xa0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  40182e:	2301      	movs	r3, #1
  401830:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  401832:	683b      	ldr	r3, [r7, #0]
  401834:	2b01      	cmp	r3, #1
  401836:	d003      	beq.n	401840 <xTaskResumeAll+0xc8>
  401838:	4b14      	ldr	r3, [pc, #80]	; (40188c <xTaskResumeAll+0x114>)
  40183a:	681b      	ldr	r3, [r3, #0]
  40183c:	2b01      	cmp	r3, #1
  40183e:	d106      	bne.n	40184e <xTaskResumeAll+0xd6>
				{
					xAlreadyYielded = pdTRUE;
  401840:	2301      	movs	r3, #1
  401842:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  401844:	4b11      	ldr	r3, [pc, #68]	; (40188c <xTaskResumeAll+0x114>)
  401846:	2200      	movs	r2, #0
  401848:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  40184a:	4b11      	ldr	r3, [pc, #68]	; (401890 <xTaskResumeAll+0x118>)
  40184c:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  40184e:	4b11      	ldr	r3, [pc, #68]	; (401894 <xTaskResumeAll+0x11c>)
  401850:	4798      	blx	r3

	return xAlreadyYielded;
  401852:	687b      	ldr	r3, [r7, #4]
}
  401854:	4618      	mov	r0, r3
  401856:	370c      	adds	r7, #12
  401858:	46bd      	mov	sp, r7
  40185a:	bd90      	pop	{r4, r7, pc}
  40185c:	2000a5d8 	.word	0x2000a5d8
  401860:	00400971 	.word	0x00400971
  401864:	00400929 	.word	0x00400929
  401868:	2000a5c4 	.word	0x2000a5c4
  40186c:	2000a584 	.word	0x2000a584
  401870:	0040071d 	.word	0x0040071d
  401874:	2000a5d0 	.word	0x2000a5d0
  401878:	2000a4f0 	.word	0x2000a4f0
  40187c:	0040065b 	.word	0x0040065b
  401880:	2000a4ec 	.word	0x2000a4ec
  401884:	2000a5dc 	.word	0x2000a5dc
  401888:	004018c5 	.word	0x004018c5
  40188c:	2000a5e0 	.word	0x2000a5e0
  401890:	0040090d 	.word	0x0040090d
  401894:	00400949 	.word	0x00400949

00401898 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  401898:	b580      	push	{r7, lr}
  40189a:	b082      	sub	sp, #8
  40189c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  40189e:	4b06      	ldr	r3, [pc, #24]	; (4018b8 <xTaskGetTickCount+0x20>)
  4018a0:	4798      	blx	r3
	{
		xTicks = xTickCount;
  4018a2:	4b06      	ldr	r3, [pc, #24]	; (4018bc <xTaskGetTickCount+0x24>)
  4018a4:	681b      	ldr	r3, [r3, #0]
  4018a6:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  4018a8:	4b05      	ldr	r3, [pc, #20]	; (4018c0 <xTaskGetTickCount+0x28>)
  4018aa:	4798      	blx	r3

	return xTicks;
  4018ac:	687b      	ldr	r3, [r7, #4]
}
  4018ae:	4618      	mov	r0, r3
  4018b0:	3708      	adds	r7, #8
  4018b2:	46bd      	mov	sp, r7
  4018b4:	bd80      	pop	{r7, pc}
  4018b6:	bf00      	nop
  4018b8:	00400929 	.word	0x00400929
  4018bc:	2000a5c8 	.word	0x2000a5c8
  4018c0:	00400949 	.word	0x00400949

004018c4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  4018c4:	b580      	push	{r7, lr}
  4018c6:	b084      	sub	sp, #16
  4018c8:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4018ca:	4b45      	ldr	r3, [pc, #276]	; (4019e0 <vTaskIncrementTick+0x11c>)
  4018cc:	681b      	ldr	r3, [r3, #0]
  4018ce:	2b00      	cmp	r3, #0
  4018d0:	d17b      	bne.n	4019ca <vTaskIncrementTick+0x106>
	{
		++xTickCount;
  4018d2:	4b44      	ldr	r3, [pc, #272]	; (4019e4 <vTaskIncrementTick+0x120>)
  4018d4:	681b      	ldr	r3, [r3, #0]
  4018d6:	3301      	adds	r3, #1
  4018d8:	4a42      	ldr	r2, [pc, #264]	; (4019e4 <vTaskIncrementTick+0x120>)
  4018da:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
  4018dc:	4b41      	ldr	r3, [pc, #260]	; (4019e4 <vTaskIncrementTick+0x120>)
  4018de:	681b      	ldr	r3, [r3, #0]
  4018e0:	2b00      	cmp	r3, #0
  4018e2:	d12a      	bne.n	40193a <vTaskIncrementTick+0x76>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  4018e4:	4b40      	ldr	r3, [pc, #256]	; (4019e8 <vTaskIncrementTick+0x124>)
  4018e6:	681b      	ldr	r3, [r3, #0]
  4018e8:	681b      	ldr	r3, [r3, #0]
  4018ea:	2b00      	cmp	r3, #0
  4018ec:	d003      	beq.n	4018f6 <vTaskIncrementTick+0x32>
  4018ee:	4b3f      	ldr	r3, [pc, #252]	; (4019ec <vTaskIncrementTick+0x128>)
  4018f0:	4798      	blx	r3
  4018f2:	bf00      	nop
  4018f4:	e7fd      	b.n	4018f2 <vTaskIncrementTick+0x2e>

			pxTemp = pxDelayedTaskList;
  4018f6:	4b3c      	ldr	r3, [pc, #240]	; (4019e8 <vTaskIncrementTick+0x124>)
  4018f8:	681b      	ldr	r3, [r3, #0]
  4018fa:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  4018fc:	4b3c      	ldr	r3, [pc, #240]	; (4019f0 <vTaskIncrementTick+0x12c>)
  4018fe:	681b      	ldr	r3, [r3, #0]
  401900:	4a39      	ldr	r2, [pc, #228]	; (4019e8 <vTaskIncrementTick+0x124>)
  401902:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
  401904:	4a3a      	ldr	r2, [pc, #232]	; (4019f0 <vTaskIncrementTick+0x12c>)
  401906:	68fb      	ldr	r3, [r7, #12]
  401908:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
  40190a:	4b3a      	ldr	r3, [pc, #232]	; (4019f4 <vTaskIncrementTick+0x130>)
  40190c:	681b      	ldr	r3, [r3, #0]
  40190e:	3301      	adds	r3, #1
  401910:	4a38      	ldr	r2, [pc, #224]	; (4019f4 <vTaskIncrementTick+0x130>)
  401912:	6013      	str	r3, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401914:	4b34      	ldr	r3, [pc, #208]	; (4019e8 <vTaskIncrementTick+0x124>)
  401916:	681b      	ldr	r3, [r3, #0]
  401918:	681b      	ldr	r3, [r3, #0]
  40191a:	2b00      	cmp	r3, #0
  40191c:	d104      	bne.n	401928 <vTaskIncrementTick+0x64>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  40191e:	4b36      	ldr	r3, [pc, #216]	; (4019f8 <vTaskIncrementTick+0x134>)
  401920:	f04f 32ff 	mov.w	r2, #4294967295
  401924:	601a      	str	r2, [r3, #0]
  401926:	e008      	b.n	40193a <vTaskIncrementTick+0x76>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401928:	4b2f      	ldr	r3, [pc, #188]	; (4019e8 <vTaskIncrementTick+0x124>)
  40192a:	681b      	ldr	r3, [r3, #0]
  40192c:	68db      	ldr	r3, [r3, #12]
  40192e:	68db      	ldr	r3, [r3, #12]
  401930:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401932:	68bb      	ldr	r3, [r7, #8]
  401934:	685b      	ldr	r3, [r3, #4]
  401936:	4a30      	ldr	r2, [pc, #192]	; (4019f8 <vTaskIncrementTick+0x134>)
  401938:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  40193a:	4b2a      	ldr	r3, [pc, #168]	; (4019e4 <vTaskIncrementTick+0x120>)
  40193c:	681a      	ldr	r2, [r3, #0]
  40193e:	4b2e      	ldr	r3, [pc, #184]	; (4019f8 <vTaskIncrementTick+0x134>)
  401940:	681b      	ldr	r3, [r3, #0]
  401942:	429a      	cmp	r2, r3
  401944:	d347      	bcc.n	4019d6 <vTaskIncrementTick+0x112>
  401946:	4b28      	ldr	r3, [pc, #160]	; (4019e8 <vTaskIncrementTick+0x124>)
  401948:	681b      	ldr	r3, [r3, #0]
  40194a:	681b      	ldr	r3, [r3, #0]
  40194c:	2b00      	cmp	r3, #0
  40194e:	d104      	bne.n	40195a <vTaskIncrementTick+0x96>
  401950:	4b29      	ldr	r3, [pc, #164]	; (4019f8 <vTaskIncrementTick+0x134>)
  401952:	f04f 32ff 	mov.w	r2, #4294967295
  401956:	601a      	str	r2, [r3, #0]
  401958:	e03d      	b.n	4019d6 <vTaskIncrementTick+0x112>
  40195a:	4b23      	ldr	r3, [pc, #140]	; (4019e8 <vTaskIncrementTick+0x124>)
  40195c:	681b      	ldr	r3, [r3, #0]
  40195e:	68db      	ldr	r3, [r3, #12]
  401960:	68db      	ldr	r3, [r3, #12]
  401962:	60bb      	str	r3, [r7, #8]
  401964:	68bb      	ldr	r3, [r7, #8]
  401966:	685b      	ldr	r3, [r3, #4]
  401968:	607b      	str	r3, [r7, #4]
  40196a:	4b1e      	ldr	r3, [pc, #120]	; (4019e4 <vTaskIncrementTick+0x120>)
  40196c:	681a      	ldr	r2, [r3, #0]
  40196e:	687b      	ldr	r3, [r7, #4]
  401970:	429a      	cmp	r2, r3
  401972:	d203      	bcs.n	40197c <vTaskIncrementTick+0xb8>
  401974:	4a20      	ldr	r2, [pc, #128]	; (4019f8 <vTaskIncrementTick+0x134>)
  401976:	687b      	ldr	r3, [r7, #4]
  401978:	6013      	str	r3, [r2, #0]
  40197a:	e02c      	b.n	4019d6 <vTaskIncrementTick+0x112>
  40197c:	68bb      	ldr	r3, [r7, #8]
  40197e:	3304      	adds	r3, #4
  401980:	4618      	mov	r0, r3
  401982:	4b1e      	ldr	r3, [pc, #120]	; (4019fc <vTaskIncrementTick+0x138>)
  401984:	4798      	blx	r3
  401986:	68bb      	ldr	r3, [r7, #8]
  401988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40198a:	2b00      	cmp	r3, #0
  40198c:	d004      	beq.n	401998 <vTaskIncrementTick+0xd4>
  40198e:	68bb      	ldr	r3, [r7, #8]
  401990:	3318      	adds	r3, #24
  401992:	4618      	mov	r0, r3
  401994:	4b19      	ldr	r3, [pc, #100]	; (4019fc <vTaskIncrementTick+0x138>)
  401996:	4798      	blx	r3
  401998:	68bb      	ldr	r3, [r7, #8]
  40199a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40199c:	4b18      	ldr	r3, [pc, #96]	; (401a00 <vTaskIncrementTick+0x13c>)
  40199e:	681b      	ldr	r3, [r3, #0]
  4019a0:	429a      	cmp	r2, r3
  4019a2:	d903      	bls.n	4019ac <vTaskIncrementTick+0xe8>
  4019a4:	68bb      	ldr	r3, [r7, #8]
  4019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4019a8:	4a15      	ldr	r2, [pc, #84]	; (401a00 <vTaskIncrementTick+0x13c>)
  4019aa:	6013      	str	r3, [r2, #0]
  4019ac:	68bb      	ldr	r3, [r7, #8]
  4019ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4019b0:	4613      	mov	r3, r2
  4019b2:	009b      	lsls	r3, r3, #2
  4019b4:	4413      	add	r3, r2
  4019b6:	009b      	lsls	r3, r3, #2
  4019b8:	4a12      	ldr	r2, [pc, #72]	; (401a04 <vTaskIncrementTick+0x140>)
  4019ba:	441a      	add	r2, r3
  4019bc:	68bb      	ldr	r3, [r7, #8]
  4019be:	3304      	adds	r3, #4
  4019c0:	4619      	mov	r1, r3
  4019c2:	4610      	mov	r0, r2
  4019c4:	4b10      	ldr	r3, [pc, #64]	; (401a08 <vTaskIncrementTick+0x144>)
  4019c6:	4798      	blx	r3
  4019c8:	e7bd      	b.n	401946 <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
  4019ca:	4b10      	ldr	r3, [pc, #64]	; (401a0c <vTaskIncrementTick+0x148>)
  4019cc:	681b      	ldr	r3, [r3, #0]
  4019ce:	3301      	adds	r3, #1
  4019d0:	4a0e      	ldr	r2, [pc, #56]	; (401a0c <vTaskIncrementTick+0x148>)
  4019d2:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  4019d4:	e7ff      	b.n	4019d6 <vTaskIncrementTick+0x112>
  4019d6:	bf00      	nop
  4019d8:	3710      	adds	r7, #16
  4019da:	46bd      	mov	sp, r7
  4019dc:	bd80      	pop	{r7, pc}
  4019de:	bf00      	nop
  4019e0:	2000a5d8 	.word	0x2000a5d8
  4019e4:	2000a5c8 	.word	0x2000a5c8
  4019e8:	2000a57c 	.word	0x2000a57c
  4019ec:	00400971 	.word	0x00400971
  4019f0:	2000a580 	.word	0x2000a580
  4019f4:	2000a5e4 	.word	0x2000a5e4
  4019f8:	20000018 	.word	0x20000018
  4019fc:	0040071d 	.word	0x0040071d
  401a00:	2000a5d0 	.word	0x2000a5d0
  401a04:	2000a4f0 	.word	0x2000a4f0
  401a08:	0040065b 	.word	0x0040065b
  401a0c:	2000a5dc 	.word	0x2000a5dc

00401a10 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401a10:	b580      	push	{r7, lr}
  401a12:	b082      	sub	sp, #8
  401a14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  401a16:	4b21      	ldr	r3, [pc, #132]	; (401a9c <vTaskSwitchContext+0x8c>)
  401a18:	681b      	ldr	r3, [r3, #0]
  401a1a:	2b00      	cmp	r3, #0
  401a1c:	d010      	beq.n	401a40 <vTaskSwitchContext+0x30>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  401a1e:	4b20      	ldr	r3, [pc, #128]	; (401aa0 <vTaskSwitchContext+0x90>)
  401a20:	2201      	movs	r2, #1
  401a22:	601a      	str	r2, [r3, #0]

		taskSELECT_HIGHEST_PRIORITY_TASK();

		traceTASK_SWITCHED_IN();
	}
}
  401a24:	e035      	b.n	401a92 <vTaskSwitchContext+0x82>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401a26:	4b1f      	ldr	r3, [pc, #124]	; (401aa4 <vTaskSwitchContext+0x94>)
  401a28:	681b      	ldr	r3, [r3, #0]
  401a2a:	2b00      	cmp	r3, #0
  401a2c:	d103      	bne.n	401a36 <vTaskSwitchContext+0x26>
  401a2e:	4b1e      	ldr	r3, [pc, #120]	; (401aa8 <vTaskSwitchContext+0x98>)
  401a30:	4798      	blx	r3
  401a32:	bf00      	nop
  401a34:	e7fd      	b.n	401a32 <vTaskSwitchContext+0x22>
  401a36:	4b1b      	ldr	r3, [pc, #108]	; (401aa4 <vTaskSwitchContext+0x94>)
  401a38:	681b      	ldr	r3, [r3, #0]
  401a3a:	3b01      	subs	r3, #1
  401a3c:	4a19      	ldr	r2, [pc, #100]	; (401aa4 <vTaskSwitchContext+0x94>)
  401a3e:	6013      	str	r3, [r2, #0]
  401a40:	4b18      	ldr	r3, [pc, #96]	; (401aa4 <vTaskSwitchContext+0x94>)
  401a42:	681a      	ldr	r2, [r3, #0]
  401a44:	4919      	ldr	r1, [pc, #100]	; (401aac <vTaskSwitchContext+0x9c>)
  401a46:	4613      	mov	r3, r2
  401a48:	009b      	lsls	r3, r3, #2
  401a4a:	4413      	add	r3, r2
  401a4c:	009b      	lsls	r3, r3, #2
  401a4e:	440b      	add	r3, r1
  401a50:	681b      	ldr	r3, [r3, #0]
  401a52:	2b00      	cmp	r3, #0
  401a54:	d0e7      	beq.n	401a26 <vTaskSwitchContext+0x16>
  401a56:	4b13      	ldr	r3, [pc, #76]	; (401aa4 <vTaskSwitchContext+0x94>)
  401a58:	681a      	ldr	r2, [r3, #0]
  401a5a:	4613      	mov	r3, r2
  401a5c:	009b      	lsls	r3, r3, #2
  401a5e:	4413      	add	r3, r2
  401a60:	009b      	lsls	r3, r3, #2
  401a62:	4a12      	ldr	r2, [pc, #72]	; (401aac <vTaskSwitchContext+0x9c>)
  401a64:	4413      	add	r3, r2
  401a66:	607b      	str	r3, [r7, #4]
  401a68:	687b      	ldr	r3, [r7, #4]
  401a6a:	685b      	ldr	r3, [r3, #4]
  401a6c:	685a      	ldr	r2, [r3, #4]
  401a6e:	687b      	ldr	r3, [r7, #4]
  401a70:	605a      	str	r2, [r3, #4]
  401a72:	687b      	ldr	r3, [r7, #4]
  401a74:	685a      	ldr	r2, [r3, #4]
  401a76:	687b      	ldr	r3, [r7, #4]
  401a78:	3308      	adds	r3, #8
  401a7a:	429a      	cmp	r2, r3
  401a7c:	d104      	bne.n	401a88 <vTaskSwitchContext+0x78>
  401a7e:	687b      	ldr	r3, [r7, #4]
  401a80:	685b      	ldr	r3, [r3, #4]
  401a82:	685a      	ldr	r2, [r3, #4]
  401a84:	687b      	ldr	r3, [r7, #4]
  401a86:	605a      	str	r2, [r3, #4]
  401a88:	687b      	ldr	r3, [r7, #4]
  401a8a:	685b      	ldr	r3, [r3, #4]
  401a8c:	68db      	ldr	r3, [r3, #12]
  401a8e:	4a08      	ldr	r2, [pc, #32]	; (401ab0 <vTaskSwitchContext+0xa0>)
  401a90:	6013      	str	r3, [r2, #0]
}
  401a92:	bf00      	nop
  401a94:	3708      	adds	r7, #8
  401a96:	46bd      	mov	sp, r7
  401a98:	bd80      	pop	{r7, pc}
  401a9a:	bf00      	nop
  401a9c:	2000a5d8 	.word	0x2000a5d8
  401aa0:	2000a5e0 	.word	0x2000a5e0
  401aa4:	2000a5d0 	.word	0x2000a5d0
  401aa8:	00400971 	.word	0x00400971
  401aac:	2000a4f0 	.word	0x2000a4f0
  401ab0:	2000a4ec 	.word	0x2000a4ec

00401ab4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  401ab4:	b580      	push	{r7, lr}
  401ab6:	b084      	sub	sp, #16
  401ab8:	af00      	add	r7, sp, #0
  401aba:	6078      	str	r0, [r7, #4]
  401abc:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  401abe:	687b      	ldr	r3, [r7, #4]
  401ac0:	2b00      	cmp	r3, #0
  401ac2:	d103      	bne.n	401acc <vTaskPlaceOnEventList+0x18>
  401ac4:	4b14      	ldr	r3, [pc, #80]	; (401b18 <vTaskPlaceOnEventList+0x64>)
  401ac6:	4798      	blx	r3
  401ac8:	bf00      	nop
  401aca:	e7fd      	b.n	401ac8 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  401acc:	4b13      	ldr	r3, [pc, #76]	; (401b1c <vTaskPlaceOnEventList+0x68>)
  401ace:	681b      	ldr	r3, [r3, #0]
  401ad0:	3318      	adds	r3, #24
  401ad2:	4619      	mov	r1, r3
  401ad4:	6878      	ldr	r0, [r7, #4]
  401ad6:	4b12      	ldr	r3, [pc, #72]	; (401b20 <vTaskPlaceOnEventList+0x6c>)
  401ad8:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401ada:	4b10      	ldr	r3, [pc, #64]	; (401b1c <vTaskPlaceOnEventList+0x68>)
  401adc:	681b      	ldr	r3, [r3, #0]
  401ade:	3304      	adds	r3, #4
  401ae0:	4618      	mov	r0, r3
  401ae2:	4b10      	ldr	r3, [pc, #64]	; (401b24 <vTaskPlaceOnEventList+0x70>)
  401ae4:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401ae6:	683b      	ldr	r3, [r7, #0]
  401ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
  401aec:	d107      	bne.n	401afe <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401aee:	4b0b      	ldr	r3, [pc, #44]	; (401b1c <vTaskPlaceOnEventList+0x68>)
  401af0:	681b      	ldr	r3, [r3, #0]
  401af2:	3304      	adds	r3, #4
  401af4:	4619      	mov	r1, r3
  401af6:	480c      	ldr	r0, [pc, #48]	; (401b28 <vTaskPlaceOnEventList+0x74>)
  401af8:	4b0c      	ldr	r3, [pc, #48]	; (401b2c <vTaskPlaceOnEventList+0x78>)
  401afa:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  401afc:	e007      	b.n	401b0e <vTaskPlaceOnEventList+0x5a>
			xTimeToWake = xTickCount + xTicksToWait;
  401afe:	4b0c      	ldr	r3, [pc, #48]	; (401b30 <vTaskPlaceOnEventList+0x7c>)
  401b00:	681a      	ldr	r2, [r3, #0]
  401b02:	683b      	ldr	r3, [r7, #0]
  401b04:	4413      	add	r3, r2
  401b06:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401b08:	68f8      	ldr	r0, [r7, #12]
  401b0a:	4b0a      	ldr	r3, [pc, #40]	; (401b34 <vTaskPlaceOnEventList+0x80>)
  401b0c:	4798      	blx	r3
}
  401b0e:	bf00      	nop
  401b10:	3710      	adds	r7, #16
  401b12:	46bd      	mov	sp, r7
  401b14:	bd80      	pop	{r7, pc}
  401b16:	bf00      	nop
  401b18:	00400971 	.word	0x00400971
  401b1c:	2000a4ec 	.word	0x2000a4ec
  401b20:	004006ab 	.word	0x004006ab
  401b24:	0040071d 	.word	0x0040071d
  401b28:	2000a5b0 	.word	0x2000a5b0
  401b2c:	0040065b 	.word	0x0040065b
  401b30:	2000a5c8 	.word	0x2000a5c8
  401b34:	00401f11 	.word	0x00401f11

00401b38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  401b38:	b580      	push	{r7, lr}
  401b3a:	b084      	sub	sp, #16
  401b3c:	af00      	add	r7, sp, #0
  401b3e:	6078      	str	r0, [r7, #4]
  401b40:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  401b42:	687b      	ldr	r3, [r7, #4]
  401b44:	2b00      	cmp	r3, #0
  401b46:	d103      	bne.n	401b50 <vTaskPlaceOnEventListRestricted+0x18>
  401b48:	4b0e      	ldr	r3, [pc, #56]	; (401b84 <vTaskPlaceOnEventListRestricted+0x4c>)
  401b4a:	4798      	blx	r3
  401b4c:	bf00      	nop
  401b4e:	e7fd      	b.n	401b4c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  401b50:	4b0d      	ldr	r3, [pc, #52]	; (401b88 <vTaskPlaceOnEventListRestricted+0x50>)
  401b52:	681b      	ldr	r3, [r3, #0]
  401b54:	3318      	adds	r3, #24
  401b56:	4619      	mov	r1, r3
  401b58:	6878      	ldr	r0, [r7, #4]
  401b5a:	4b0c      	ldr	r3, [pc, #48]	; (401b8c <vTaskPlaceOnEventListRestricted+0x54>)
  401b5c:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401b5e:	4b0a      	ldr	r3, [pc, #40]	; (401b88 <vTaskPlaceOnEventListRestricted+0x50>)
  401b60:	681b      	ldr	r3, [r3, #0]
  401b62:	3304      	adds	r3, #4
  401b64:	4618      	mov	r0, r3
  401b66:	4b0a      	ldr	r3, [pc, #40]	; (401b90 <vTaskPlaceOnEventListRestricted+0x58>)
  401b68:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  401b6a:	4b0a      	ldr	r3, [pc, #40]	; (401b94 <vTaskPlaceOnEventListRestricted+0x5c>)
  401b6c:	681a      	ldr	r2, [r3, #0]
  401b6e:	683b      	ldr	r3, [r7, #0]
  401b70:	4413      	add	r3, r2
  401b72:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  401b74:	68f8      	ldr	r0, [r7, #12]
  401b76:	4b08      	ldr	r3, [pc, #32]	; (401b98 <vTaskPlaceOnEventListRestricted+0x60>)
  401b78:	4798      	blx	r3
	}
  401b7a:	bf00      	nop
  401b7c:	3710      	adds	r7, #16
  401b7e:	46bd      	mov	sp, r7
  401b80:	bd80      	pop	{r7, pc}
  401b82:	bf00      	nop
  401b84:	00400971 	.word	0x00400971
  401b88:	2000a4ec 	.word	0x2000a4ec
  401b8c:	0040065b 	.word	0x0040065b
  401b90:	0040071d 	.word	0x0040071d
  401b94:	2000a5c8 	.word	0x2000a5c8
  401b98:	00401f11 	.word	0x00401f11

00401b9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  401b9c:	b580      	push	{r7, lr}
  401b9e:	b084      	sub	sp, #16
  401ba0:	af00      	add	r7, sp, #0
  401ba2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401ba4:	687b      	ldr	r3, [r7, #4]
  401ba6:	68db      	ldr	r3, [r3, #12]
  401ba8:	68db      	ldr	r3, [r3, #12]
  401baa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  401bac:	68bb      	ldr	r3, [r7, #8]
  401bae:	2b00      	cmp	r3, #0
  401bb0:	d103      	bne.n	401bba <xTaskRemoveFromEventList+0x1e>
  401bb2:	4b21      	ldr	r3, [pc, #132]	; (401c38 <xTaskRemoveFromEventList+0x9c>)
  401bb4:	4798      	blx	r3
  401bb6:	bf00      	nop
  401bb8:	e7fd      	b.n	401bb6 <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401bba:	68bb      	ldr	r3, [r7, #8]
  401bbc:	3318      	adds	r3, #24
  401bbe:	4618      	mov	r0, r3
  401bc0:	4b1e      	ldr	r3, [pc, #120]	; (401c3c <xTaskRemoveFromEventList+0xa0>)
  401bc2:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401bc4:	4b1e      	ldr	r3, [pc, #120]	; (401c40 <xTaskRemoveFromEventList+0xa4>)
  401bc6:	681b      	ldr	r3, [r3, #0]
  401bc8:	2b00      	cmp	r3, #0
  401bca:	d11d      	bne.n	401c08 <xTaskRemoveFromEventList+0x6c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401bcc:	68bb      	ldr	r3, [r7, #8]
  401bce:	3304      	adds	r3, #4
  401bd0:	4618      	mov	r0, r3
  401bd2:	4b1a      	ldr	r3, [pc, #104]	; (401c3c <xTaskRemoveFromEventList+0xa0>)
  401bd4:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  401bd6:	68bb      	ldr	r3, [r7, #8]
  401bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401bda:	4b1a      	ldr	r3, [pc, #104]	; (401c44 <xTaskRemoveFromEventList+0xa8>)
  401bdc:	681b      	ldr	r3, [r3, #0]
  401bde:	429a      	cmp	r2, r3
  401be0:	d903      	bls.n	401bea <xTaskRemoveFromEventList+0x4e>
  401be2:	68bb      	ldr	r3, [r7, #8]
  401be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401be6:	4a17      	ldr	r2, [pc, #92]	; (401c44 <xTaskRemoveFromEventList+0xa8>)
  401be8:	6013      	str	r3, [r2, #0]
  401bea:	68bb      	ldr	r3, [r7, #8]
  401bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401bee:	4613      	mov	r3, r2
  401bf0:	009b      	lsls	r3, r3, #2
  401bf2:	4413      	add	r3, r2
  401bf4:	009b      	lsls	r3, r3, #2
  401bf6:	4a14      	ldr	r2, [pc, #80]	; (401c48 <xTaskRemoveFromEventList+0xac>)
  401bf8:	441a      	add	r2, r3
  401bfa:	68bb      	ldr	r3, [r7, #8]
  401bfc:	3304      	adds	r3, #4
  401bfe:	4619      	mov	r1, r3
  401c00:	4610      	mov	r0, r2
  401c02:	4b12      	ldr	r3, [pc, #72]	; (401c4c <xTaskRemoveFromEventList+0xb0>)
  401c04:	4798      	blx	r3
  401c06:	e005      	b.n	401c14 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401c08:	68bb      	ldr	r3, [r7, #8]
  401c0a:	3318      	adds	r3, #24
  401c0c:	4619      	mov	r1, r3
  401c0e:	4810      	ldr	r0, [pc, #64]	; (401c50 <xTaskRemoveFromEventList+0xb4>)
  401c10:	4b0e      	ldr	r3, [pc, #56]	; (401c4c <xTaskRemoveFromEventList+0xb0>)
  401c12:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401c14:	68bb      	ldr	r3, [r7, #8]
  401c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401c18:	4b0e      	ldr	r3, [pc, #56]	; (401c54 <xTaskRemoveFromEventList+0xb8>)
  401c1a:	681b      	ldr	r3, [r3, #0]
  401c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401c1e:	429a      	cmp	r2, r3
  401c20:	d302      	bcc.n	401c28 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  401c22:	2301      	movs	r3, #1
  401c24:	60fb      	str	r3, [r7, #12]
  401c26:	e001      	b.n	401c2c <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
  401c28:	2300      	movs	r3, #0
  401c2a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  401c2c:	68fb      	ldr	r3, [r7, #12]
}
  401c2e:	4618      	mov	r0, r3
  401c30:	3710      	adds	r7, #16
  401c32:	46bd      	mov	sp, r7
  401c34:	bd80      	pop	{r7, pc}
  401c36:	bf00      	nop
  401c38:	00400971 	.word	0x00400971
  401c3c:	0040071d 	.word	0x0040071d
  401c40:	2000a5d8 	.word	0x2000a5d8
  401c44:	2000a5d0 	.word	0x2000a5d0
  401c48:	2000a4f0 	.word	0x2000a4f0
  401c4c:	0040065b 	.word	0x0040065b
  401c50:	2000a584 	.word	0x2000a584
  401c54:	2000a4ec 	.word	0x2000a4ec

00401c58 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  401c58:	b580      	push	{r7, lr}
  401c5a:	b082      	sub	sp, #8
  401c5c:	af00      	add	r7, sp, #0
  401c5e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  401c60:	687b      	ldr	r3, [r7, #4]
  401c62:	2b00      	cmp	r3, #0
  401c64:	d103      	bne.n	401c6e <vTaskSetTimeOutState+0x16>
  401c66:	4b08      	ldr	r3, [pc, #32]	; (401c88 <vTaskSetTimeOutState+0x30>)
  401c68:	4798      	blx	r3
  401c6a:	bf00      	nop
  401c6c:	e7fd      	b.n	401c6a <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401c6e:	4b07      	ldr	r3, [pc, #28]	; (401c8c <vTaskSetTimeOutState+0x34>)
  401c70:	681a      	ldr	r2, [r3, #0]
  401c72:	687b      	ldr	r3, [r7, #4]
  401c74:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401c76:	4b06      	ldr	r3, [pc, #24]	; (401c90 <vTaskSetTimeOutState+0x38>)
  401c78:	681a      	ldr	r2, [r3, #0]
  401c7a:	687b      	ldr	r3, [r7, #4]
  401c7c:	605a      	str	r2, [r3, #4]
}
  401c7e:	bf00      	nop
  401c80:	3708      	adds	r7, #8
  401c82:	46bd      	mov	sp, r7
  401c84:	bd80      	pop	{r7, pc}
  401c86:	bf00      	nop
  401c88:	00400971 	.word	0x00400971
  401c8c:	2000a5e4 	.word	0x2000a5e4
  401c90:	2000a5c8 	.word	0x2000a5c8

00401c94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  401c94:	b580      	push	{r7, lr}
  401c96:	b084      	sub	sp, #16
  401c98:	af00      	add	r7, sp, #0
  401c9a:	6078      	str	r0, [r7, #4]
  401c9c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  401c9e:	687b      	ldr	r3, [r7, #4]
  401ca0:	2b00      	cmp	r3, #0
  401ca2:	d103      	bne.n	401cac <xTaskCheckForTimeOut+0x18>
  401ca4:	4b22      	ldr	r3, [pc, #136]	; (401d30 <xTaskCheckForTimeOut+0x9c>)
  401ca6:	4798      	blx	r3
  401ca8:	bf00      	nop
  401caa:	e7fd      	b.n	401ca8 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
  401cac:	683b      	ldr	r3, [r7, #0]
  401cae:	2b00      	cmp	r3, #0
  401cb0:	d103      	bne.n	401cba <xTaskCheckForTimeOut+0x26>
  401cb2:	4b1f      	ldr	r3, [pc, #124]	; (401d30 <xTaskCheckForTimeOut+0x9c>)
  401cb4:	4798      	blx	r3
  401cb6:	bf00      	nop
  401cb8:	e7fd      	b.n	401cb6 <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
  401cba:	4b1e      	ldr	r3, [pc, #120]	; (401d34 <xTaskCheckForTimeOut+0xa0>)
  401cbc:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  401cbe:	683b      	ldr	r3, [r7, #0]
  401cc0:	681b      	ldr	r3, [r3, #0]
  401cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
  401cc6:	d102      	bne.n	401cce <xTaskCheckForTimeOut+0x3a>
			{
				xReturn = pdFALSE;
  401cc8:	2300      	movs	r3, #0
  401cca:	60fb      	str	r3, [r7, #12]
  401ccc:	e029      	b.n	401d22 <xTaskCheckForTimeOut+0x8e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  401cce:	687b      	ldr	r3, [r7, #4]
  401cd0:	681a      	ldr	r2, [r3, #0]
  401cd2:	4b19      	ldr	r3, [pc, #100]	; (401d38 <xTaskCheckForTimeOut+0xa4>)
  401cd4:	681b      	ldr	r3, [r3, #0]
  401cd6:	429a      	cmp	r2, r3
  401cd8:	d008      	beq.n	401cec <xTaskCheckForTimeOut+0x58>
  401cda:	687b      	ldr	r3, [r7, #4]
  401cdc:	685a      	ldr	r2, [r3, #4]
  401cde:	4b17      	ldr	r3, [pc, #92]	; (401d3c <xTaskCheckForTimeOut+0xa8>)
  401ce0:	681b      	ldr	r3, [r3, #0]
  401ce2:	429a      	cmp	r2, r3
  401ce4:	d802      	bhi.n	401cec <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  401ce6:	2301      	movs	r3, #1
  401ce8:	60fb      	str	r3, [r7, #12]
  401cea:	e01a      	b.n	401d22 <xTaskCheckForTimeOut+0x8e>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  401cec:	4b13      	ldr	r3, [pc, #76]	; (401d3c <xTaskCheckForTimeOut+0xa8>)
  401cee:	681a      	ldr	r2, [r3, #0]
  401cf0:	687b      	ldr	r3, [r7, #4]
  401cf2:	685b      	ldr	r3, [r3, #4]
  401cf4:	1ad2      	subs	r2, r2, r3
  401cf6:	683b      	ldr	r3, [r7, #0]
  401cf8:	681b      	ldr	r3, [r3, #0]
  401cfa:	429a      	cmp	r2, r3
  401cfc:	d20f      	bcs.n	401d1e <xTaskCheckForTimeOut+0x8a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  401cfe:	4b0f      	ldr	r3, [pc, #60]	; (401d3c <xTaskCheckForTimeOut+0xa8>)
  401d00:	681a      	ldr	r2, [r3, #0]
  401d02:	687b      	ldr	r3, [r7, #4]
  401d04:	685b      	ldr	r3, [r3, #4]
  401d06:	1ad3      	subs	r3, r2, r3
  401d08:	683a      	ldr	r2, [r7, #0]
  401d0a:	6812      	ldr	r2, [r2, #0]
  401d0c:	1ad2      	subs	r2, r2, r3
  401d0e:	683b      	ldr	r3, [r7, #0]
  401d10:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401d12:	6878      	ldr	r0, [r7, #4]
  401d14:	4b0a      	ldr	r3, [pc, #40]	; (401d40 <xTaskCheckForTimeOut+0xac>)
  401d16:	4798      	blx	r3
			xReturn = pdFALSE;
  401d18:	2300      	movs	r3, #0
  401d1a:	60fb      	str	r3, [r7, #12]
  401d1c:	e001      	b.n	401d22 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			xReturn = pdTRUE;
  401d1e:	2301      	movs	r3, #1
  401d20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  401d22:	4b08      	ldr	r3, [pc, #32]	; (401d44 <xTaskCheckForTimeOut+0xb0>)
  401d24:	4798      	blx	r3

	return xReturn;
  401d26:	68fb      	ldr	r3, [r7, #12]
}
  401d28:	4618      	mov	r0, r3
  401d2a:	3710      	adds	r7, #16
  401d2c:	46bd      	mov	sp, r7
  401d2e:	bd80      	pop	{r7, pc}
  401d30:	00400971 	.word	0x00400971
  401d34:	00400929 	.word	0x00400929
  401d38:	2000a5e4 	.word	0x2000a5e4
  401d3c:	2000a5c8 	.word	0x2000a5c8
  401d40:	00401c59 	.word	0x00401c59
  401d44:	00400949 	.word	0x00400949

00401d48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  401d48:	b480      	push	{r7}
  401d4a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  401d4c:	4b03      	ldr	r3, [pc, #12]	; (401d5c <vTaskMissedYield+0x14>)
  401d4e:	2201      	movs	r2, #1
  401d50:	601a      	str	r2, [r3, #0]
}
  401d52:	bf00      	nop
  401d54:	46bd      	mov	sp, r7
  401d56:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d5a:	4770      	bx	lr
  401d5c:	2000a5e0 	.word	0x2000a5e0

00401d60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401d60:	b580      	push	{r7, lr}
  401d62:	b082      	sub	sp, #8
  401d64:	af00      	add	r7, sp, #0
  401d66:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  401d68:	4b04      	ldr	r3, [pc, #16]	; (401d7c <prvIdleTask+0x1c>)
  401d6a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  401d6c:	4b04      	ldr	r3, [pc, #16]	; (401d80 <prvIdleTask+0x20>)
  401d6e:	681b      	ldr	r3, [r3, #0]
  401d70:	2b01      	cmp	r3, #1
  401d72:	d9f9      	bls.n	401d68 <prvIdleTask+0x8>
			{
				taskYIELD();
  401d74:	4b03      	ldr	r3, [pc, #12]	; (401d84 <prvIdleTask+0x24>)
  401d76:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
  401d78:	e7f6      	b.n	401d68 <prvIdleTask+0x8>
  401d7a:	bf00      	nop
  401d7c:	00401e81 	.word	0x00401e81
  401d80:	2000a4f0 	.word	0x2000a4f0
  401d84:	0040090d 	.word	0x0040090d

00401d88 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  401d88:	b580      	push	{r7, lr}
  401d8a:	b084      	sub	sp, #16
  401d8c:	af00      	add	r7, sp, #0
  401d8e:	60f8      	str	r0, [r7, #12]
  401d90:	60b9      	str	r1, [r7, #8]
  401d92:	607a      	str	r2, [r7, #4]
  401d94:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  401d96:	68fb      	ldr	r3, [r7, #12]
  401d98:	3334      	adds	r3, #52	; 0x34
  401d9a:	220a      	movs	r2, #10
  401d9c:	68b9      	ldr	r1, [r7, #8]
  401d9e:	4618      	mov	r0, r3
  401da0:	4b14      	ldr	r3, [pc, #80]	; (401df4 <prvInitialiseTCBVariables+0x6c>)
  401da2:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  401da4:	68fb      	ldr	r3, [r7, #12]
  401da6:	2200      	movs	r2, #0
  401da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  401dac:	687b      	ldr	r3, [r7, #4]
  401dae:	2b04      	cmp	r3, #4
  401db0:	d901      	bls.n	401db6 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  401db2:	2304      	movs	r3, #4
  401db4:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  401db6:	68fb      	ldr	r3, [r7, #12]
  401db8:	687a      	ldr	r2, [r7, #4]
  401dba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  401dbc:	68fb      	ldr	r3, [r7, #12]
  401dbe:	687a      	ldr	r2, [r7, #4]
  401dc0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401dc2:	68fb      	ldr	r3, [r7, #12]
  401dc4:	3304      	adds	r3, #4
  401dc6:	4618      	mov	r0, r3
  401dc8:	4b0b      	ldr	r3, [pc, #44]	; (401df8 <prvInitialiseTCBVariables+0x70>)
  401dca:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401dcc:	68fb      	ldr	r3, [r7, #12]
  401dce:	3318      	adds	r3, #24
  401dd0:	4618      	mov	r0, r3
  401dd2:	4b09      	ldr	r3, [pc, #36]	; (401df8 <prvInitialiseTCBVariables+0x70>)
  401dd4:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401dd6:	68fb      	ldr	r3, [r7, #12]
  401dd8:	68fa      	ldr	r2, [r7, #12]
  401dda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  401ddc:	687b      	ldr	r3, [r7, #4]
  401dde:	f1c3 0205 	rsb	r2, r3, #5
  401de2:	68fb      	ldr	r3, [r7, #12]
  401de4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401de6:	68fb      	ldr	r3, [r7, #12]
  401de8:	68fa      	ldr	r2, [r7, #12]
  401dea:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  401dec:	bf00      	nop
  401dee:	3710      	adds	r7, #16
  401df0:	46bd      	mov	sp, r7
  401df2:	bd80      	pop	{r7, pc}
  401df4:	004042e1 	.word	0x004042e1
  401df8:	00400641 	.word	0x00400641

00401dfc <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  401dfc:	b580      	push	{r7, lr}
  401dfe:	b082      	sub	sp, #8
  401e00:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  401e02:	2300      	movs	r3, #0
  401e04:	607b      	str	r3, [r7, #4]
  401e06:	e00c      	b.n	401e22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  401e08:	687a      	ldr	r2, [r7, #4]
  401e0a:	4613      	mov	r3, r2
  401e0c:	009b      	lsls	r3, r3, #2
  401e0e:	4413      	add	r3, r2
  401e10:	009b      	lsls	r3, r3, #2
  401e12:	4a12      	ldr	r2, [pc, #72]	; (401e5c <prvInitialiseTaskLists+0x60>)
  401e14:	4413      	add	r3, r2
  401e16:	4618      	mov	r0, r3
  401e18:	4b11      	ldr	r3, [pc, #68]	; (401e60 <prvInitialiseTaskLists+0x64>)
  401e1a:	4798      	blx	r3
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  401e1c:	687b      	ldr	r3, [r7, #4]
  401e1e:	3301      	adds	r3, #1
  401e20:	607b      	str	r3, [r7, #4]
  401e22:	687b      	ldr	r3, [r7, #4]
  401e24:	2b04      	cmp	r3, #4
  401e26:	d9ef      	bls.n	401e08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  401e28:	480e      	ldr	r0, [pc, #56]	; (401e64 <prvInitialiseTaskLists+0x68>)
  401e2a:	4b0d      	ldr	r3, [pc, #52]	; (401e60 <prvInitialiseTaskLists+0x64>)
  401e2c:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  401e2e:	480e      	ldr	r0, [pc, #56]	; (401e68 <prvInitialiseTaskLists+0x6c>)
  401e30:	4b0b      	ldr	r3, [pc, #44]	; (401e60 <prvInitialiseTaskLists+0x64>)
  401e32:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  401e34:	480d      	ldr	r0, [pc, #52]	; (401e6c <prvInitialiseTaskLists+0x70>)
  401e36:	4b0a      	ldr	r3, [pc, #40]	; (401e60 <prvInitialiseTaskLists+0x64>)
  401e38:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  401e3a:	480d      	ldr	r0, [pc, #52]	; (401e70 <prvInitialiseTaskLists+0x74>)
  401e3c:	4b08      	ldr	r3, [pc, #32]	; (401e60 <prvInitialiseTaskLists+0x64>)
  401e3e:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  401e40:	480c      	ldr	r0, [pc, #48]	; (401e74 <prvInitialiseTaskLists+0x78>)
  401e42:	4b07      	ldr	r3, [pc, #28]	; (401e60 <prvInitialiseTaskLists+0x64>)
  401e44:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401e46:	4b0c      	ldr	r3, [pc, #48]	; (401e78 <prvInitialiseTaskLists+0x7c>)
  401e48:	4a06      	ldr	r2, [pc, #24]	; (401e64 <prvInitialiseTaskLists+0x68>)
  401e4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401e4c:	4b0b      	ldr	r3, [pc, #44]	; (401e7c <prvInitialiseTaskLists+0x80>)
  401e4e:	4a06      	ldr	r2, [pc, #24]	; (401e68 <prvInitialiseTaskLists+0x6c>)
  401e50:	601a      	str	r2, [r3, #0]
}
  401e52:	bf00      	nop
  401e54:	3708      	adds	r7, #8
  401e56:	46bd      	mov	sp, r7
  401e58:	bd80      	pop	{r7, pc}
  401e5a:	bf00      	nop
  401e5c:	2000a4f0 	.word	0x2000a4f0
  401e60:	00400601 	.word	0x00400601
  401e64:	2000a554 	.word	0x2000a554
  401e68:	2000a568 	.word	0x2000a568
  401e6c:	2000a584 	.word	0x2000a584
  401e70:	2000a598 	.word	0x2000a598
  401e74:	2000a5b0 	.word	0x2000a5b0
  401e78:	2000a57c 	.word	0x2000a57c
  401e7c:	2000a580 	.word	0x2000a580

00401e80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  401e80:	b580      	push	{r7, lr}
  401e82:	b082      	sub	sp, #8
  401e84:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401e86:	e028      	b.n	401eda <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  401e88:	4b18      	ldr	r3, [pc, #96]	; (401eec <prvCheckTasksWaitingTermination+0x6c>)
  401e8a:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401e8c:	4b18      	ldr	r3, [pc, #96]	; (401ef0 <prvCheckTasksWaitingTermination+0x70>)
  401e8e:	681b      	ldr	r3, [r3, #0]
  401e90:	2b00      	cmp	r3, #0
  401e92:	bf0c      	ite	eq
  401e94:	2301      	moveq	r3, #1
  401e96:	2300      	movne	r3, #0
  401e98:	b2db      	uxtb	r3, r3
  401e9a:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  401e9c:	4b15      	ldr	r3, [pc, #84]	; (401ef4 <prvCheckTasksWaitingTermination+0x74>)
  401e9e:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  401ea0:	687b      	ldr	r3, [r7, #4]
  401ea2:	2b00      	cmp	r3, #0
  401ea4:	d119      	bne.n	401eda <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  401ea6:	4b14      	ldr	r3, [pc, #80]	; (401ef8 <prvCheckTasksWaitingTermination+0x78>)
  401ea8:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  401eaa:	4b11      	ldr	r3, [pc, #68]	; (401ef0 <prvCheckTasksWaitingTermination+0x70>)
  401eac:	68db      	ldr	r3, [r3, #12]
  401eae:	68db      	ldr	r3, [r3, #12]
  401eb0:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401eb2:	683b      	ldr	r3, [r7, #0]
  401eb4:	3304      	adds	r3, #4
  401eb6:	4618      	mov	r0, r3
  401eb8:	4b10      	ldr	r3, [pc, #64]	; (401efc <prvCheckTasksWaitingTermination+0x7c>)
  401eba:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401ebc:	4b10      	ldr	r3, [pc, #64]	; (401f00 <prvCheckTasksWaitingTermination+0x80>)
  401ebe:	681b      	ldr	r3, [r3, #0]
  401ec0:	3b01      	subs	r3, #1
  401ec2:	4a0f      	ldr	r2, [pc, #60]	; (401f00 <prvCheckTasksWaitingTermination+0x80>)
  401ec4:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401ec6:	4b0f      	ldr	r3, [pc, #60]	; (401f04 <prvCheckTasksWaitingTermination+0x84>)
  401ec8:	681b      	ldr	r3, [r3, #0]
  401eca:	3b01      	subs	r3, #1
  401ecc:	4a0d      	ldr	r2, [pc, #52]	; (401f04 <prvCheckTasksWaitingTermination+0x84>)
  401ece:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
  401ed0:	4b0d      	ldr	r3, [pc, #52]	; (401f08 <prvCheckTasksWaitingTermination+0x88>)
  401ed2:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  401ed4:	6838      	ldr	r0, [r7, #0]
  401ed6:	4b0d      	ldr	r3, [pc, #52]	; (401f0c <prvCheckTasksWaitingTermination+0x8c>)
  401ed8:	4798      	blx	r3
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401eda:	4b0a      	ldr	r3, [pc, #40]	; (401f04 <prvCheckTasksWaitingTermination+0x84>)
  401edc:	681b      	ldr	r3, [r3, #0]
  401ede:	2b00      	cmp	r3, #0
  401ee0:	d1d2      	bne.n	401e88 <prvCheckTasksWaitingTermination+0x8>
			}
		}
	}
	#endif
}
  401ee2:	bf00      	nop
  401ee4:	3708      	adds	r7, #8
  401ee6:	46bd      	mov	sp, r7
  401ee8:	bd80      	pop	{r7, pc}
  401eea:	bf00      	nop
  401eec:	0040175d 	.word	0x0040175d
  401ef0:	2000a598 	.word	0x2000a598
  401ef4:	00401779 	.word	0x00401779
  401ef8:	00400929 	.word	0x00400929
  401efc:	0040071d 	.word	0x0040071d
  401f00:	2000a5c4 	.word	0x2000a5c4
  401f04:	2000a5ac 	.word	0x2000a5ac
  401f08:	00400949 	.word	0x00400949
  401f0c:	00401ff1 	.word	0x00401ff1

00401f10 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  401f10:	b580      	push	{r7, lr}
  401f12:	b082      	sub	sp, #8
  401f14:	af00      	add	r7, sp, #0
  401f16:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401f18:	4b13      	ldr	r3, [pc, #76]	; (401f68 <prvAddCurrentTaskToDelayedList+0x58>)
  401f1a:	681b      	ldr	r3, [r3, #0]
  401f1c:	687a      	ldr	r2, [r7, #4]
  401f1e:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  401f20:	4b12      	ldr	r3, [pc, #72]	; (401f6c <prvAddCurrentTaskToDelayedList+0x5c>)
  401f22:	681b      	ldr	r3, [r3, #0]
  401f24:	687a      	ldr	r2, [r7, #4]
  401f26:	429a      	cmp	r2, r3
  401f28:	d209      	bcs.n	401f3e <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401f2a:	4b11      	ldr	r3, [pc, #68]	; (401f70 <prvAddCurrentTaskToDelayedList+0x60>)
  401f2c:	681a      	ldr	r2, [r3, #0]
  401f2e:	4b0e      	ldr	r3, [pc, #56]	; (401f68 <prvAddCurrentTaskToDelayedList+0x58>)
  401f30:	681b      	ldr	r3, [r3, #0]
  401f32:	3304      	adds	r3, #4
  401f34:	4619      	mov	r1, r3
  401f36:	4610      	mov	r0, r2
  401f38:	4b0e      	ldr	r3, [pc, #56]	; (401f74 <prvAddCurrentTaskToDelayedList+0x64>)
  401f3a:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
  401f3c:	e010      	b.n	401f60 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401f3e:	4b0e      	ldr	r3, [pc, #56]	; (401f78 <prvAddCurrentTaskToDelayedList+0x68>)
  401f40:	681a      	ldr	r2, [r3, #0]
  401f42:	4b09      	ldr	r3, [pc, #36]	; (401f68 <prvAddCurrentTaskToDelayedList+0x58>)
  401f44:	681b      	ldr	r3, [r3, #0]
  401f46:	3304      	adds	r3, #4
  401f48:	4619      	mov	r1, r3
  401f4a:	4610      	mov	r0, r2
  401f4c:	4b09      	ldr	r3, [pc, #36]	; (401f74 <prvAddCurrentTaskToDelayedList+0x64>)
  401f4e:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401f50:	4b0a      	ldr	r3, [pc, #40]	; (401f7c <prvAddCurrentTaskToDelayedList+0x6c>)
  401f52:	681b      	ldr	r3, [r3, #0]
  401f54:	687a      	ldr	r2, [r7, #4]
  401f56:	429a      	cmp	r2, r3
  401f58:	d202      	bcs.n	401f60 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
  401f5a:	4a08      	ldr	r2, [pc, #32]	; (401f7c <prvAddCurrentTaskToDelayedList+0x6c>)
  401f5c:	687b      	ldr	r3, [r7, #4]
  401f5e:	6013      	str	r3, [r2, #0]
}
  401f60:	bf00      	nop
  401f62:	3708      	adds	r7, #8
  401f64:	46bd      	mov	sp, r7
  401f66:	bd80      	pop	{r7, pc}
  401f68:	2000a4ec 	.word	0x2000a4ec
  401f6c:	2000a5c8 	.word	0x2000a5c8
  401f70:	2000a580 	.word	0x2000a580
  401f74:	004006ab 	.word	0x004006ab
  401f78:	2000a57c 	.word	0x2000a57c
  401f7c:	20000018 	.word	0x20000018

00401f80 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  401f80:	b580      	push	{r7, lr}
  401f82:	b084      	sub	sp, #16
  401f84:	af00      	add	r7, sp, #0
  401f86:	4603      	mov	r3, r0
  401f88:	6039      	str	r1, [r7, #0]
  401f8a:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  401f8c:	204c      	movs	r0, #76	; 0x4c
  401f8e:	4b15      	ldr	r3, [pc, #84]	; (401fe4 <prvAllocateTCBAndStack+0x64>)
  401f90:	4798      	blx	r3
  401f92:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  401f94:	68fb      	ldr	r3, [r7, #12]
  401f96:	2b00      	cmp	r3, #0
  401f98:	d01e      	beq.n	401fd8 <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  401f9a:	683b      	ldr	r3, [r7, #0]
  401f9c:	2b00      	cmp	r3, #0
  401f9e:	d106      	bne.n	401fae <prvAllocateTCBAndStack+0x2e>
  401fa0:	88fb      	ldrh	r3, [r7, #6]
  401fa2:	009b      	lsls	r3, r3, #2
  401fa4:	4618      	mov	r0, r3
  401fa6:	4b0f      	ldr	r3, [pc, #60]	; (401fe4 <prvAllocateTCBAndStack+0x64>)
  401fa8:	4798      	blx	r3
  401faa:	4603      	mov	r3, r0
  401fac:	e000      	b.n	401fb0 <prvAllocateTCBAndStack+0x30>
  401fae:	683b      	ldr	r3, [r7, #0]
  401fb0:	68fa      	ldr	r2, [r7, #12]
  401fb2:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  401fb4:	68fb      	ldr	r3, [r7, #12]
  401fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401fb8:	2b00      	cmp	r3, #0
  401fba:	d105      	bne.n	401fc8 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  401fbc:	68f8      	ldr	r0, [r7, #12]
  401fbe:	4b0a      	ldr	r3, [pc, #40]	; (401fe8 <prvAllocateTCBAndStack+0x68>)
  401fc0:	4798      	blx	r3
			pxNewTCB = NULL;
  401fc2:	2300      	movs	r3, #0
  401fc4:	60fb      	str	r3, [r7, #12]
  401fc6:	e007      	b.n	401fd8 <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  401fc8:	68fb      	ldr	r3, [r7, #12]
  401fca:	6b18      	ldr	r0, [r3, #48]	; 0x30
  401fcc:	88fb      	ldrh	r3, [r7, #6]
  401fce:	009b      	lsls	r3, r3, #2
  401fd0:	461a      	mov	r2, r3
  401fd2:	21a5      	movs	r1, #165	; 0xa5
  401fd4:	4b05      	ldr	r3, [pc, #20]	; (401fec <prvAllocateTCBAndStack+0x6c>)
  401fd6:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  401fd8:	68fb      	ldr	r3, [r7, #12]
}
  401fda:	4618      	mov	r0, r3
  401fdc:	3710      	adds	r7, #16
  401fde:	46bd      	mov	sp, r7
  401fe0:	bd80      	pop	{r7, pc}
  401fe2:	bf00      	nop
  401fe4:	00400a59 	.word	0x00400a59
  401fe8:	00400b55 	.word	0x00400b55
  401fec:	00404245 	.word	0x00404245

00401ff0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  401ff0:	b580      	push	{r7, lr}
  401ff2:	b082      	sub	sp, #8
  401ff4:	af00      	add	r7, sp, #0
  401ff6:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  401ff8:	687b      	ldr	r3, [r7, #4]
  401ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ffc:	4618      	mov	r0, r3
  401ffe:	4b04      	ldr	r3, [pc, #16]	; (402010 <prvDeleteTCB+0x20>)
  402000:	4798      	blx	r3
		vPortFree( pxTCB );
  402002:	6878      	ldr	r0, [r7, #4]
  402004:	4b02      	ldr	r3, [pc, #8]	; (402010 <prvDeleteTCB+0x20>)
  402006:	4798      	blx	r3
	}
  402008:	bf00      	nop
  40200a:	3708      	adds	r7, #8
  40200c:	46bd      	mov	sp, r7
  40200e:	bd80      	pop	{r7, pc}
  402010:	00400b55 	.word	0x00400b55

00402014 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  402014:	b480      	push	{r7}
  402016:	b083      	sub	sp, #12
  402018:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  40201a:	4b05      	ldr	r3, [pc, #20]	; (402030 <xTaskGetCurrentTaskHandle+0x1c>)
  40201c:	681b      	ldr	r3, [r3, #0]
  40201e:	607b      	str	r3, [r7, #4]

		return xReturn;
  402020:	687b      	ldr	r3, [r7, #4]
	}
  402022:	4618      	mov	r0, r3
  402024:	370c      	adds	r7, #12
  402026:	46bd      	mov	sp, r7
  402028:	f85d 7b04 	ldr.w	r7, [sp], #4
  40202c:	4770      	bx	lr
  40202e:	bf00      	nop
  402030:	2000a4ec 	.word	0x2000a4ec

00402034 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  402034:	b480      	push	{r7}
  402036:	b083      	sub	sp, #12
  402038:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  40203a:	4b0b      	ldr	r3, [pc, #44]	; (402068 <xTaskGetSchedulerState+0x34>)
  40203c:	681b      	ldr	r3, [r3, #0]
  40203e:	2b00      	cmp	r3, #0
  402040:	d102      	bne.n	402048 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  402042:	2300      	movs	r3, #0
  402044:	607b      	str	r3, [r7, #4]
  402046:	e008      	b.n	40205a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  402048:	4b08      	ldr	r3, [pc, #32]	; (40206c <xTaskGetSchedulerState+0x38>)
  40204a:	681b      	ldr	r3, [r3, #0]
  40204c:	2b00      	cmp	r3, #0
  40204e:	d102      	bne.n	402056 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  402050:	2301      	movs	r3, #1
  402052:	607b      	str	r3, [r7, #4]
  402054:	e001      	b.n	40205a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402056:	2302      	movs	r3, #2
  402058:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  40205a:	687b      	ldr	r3, [r7, #4]
	}
  40205c:	4618      	mov	r0, r3
  40205e:	370c      	adds	r7, #12
  402060:	46bd      	mov	sp, r7
  402062:	f85d 7b04 	ldr.w	r7, [sp], #4
  402066:	4770      	bx	lr
  402068:	2000a5d4 	.word	0x2000a5d4
  40206c:	2000a5d8 	.word	0x2000a5d8

00402070 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  402070:	b580      	push	{r7, lr}
  402072:	b084      	sub	sp, #16
  402074:	af00      	add	r7, sp, #0
  402076:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  402078:	687b      	ldr	r3, [r7, #4]
  40207a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  40207c:	687b      	ldr	r3, [r7, #4]
  40207e:	2b00      	cmp	r3, #0
  402080:	d041      	beq.n	402106 <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402082:	68fb      	ldr	r3, [r7, #12]
  402084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402086:	4b22      	ldr	r3, [pc, #136]	; (402110 <vTaskPriorityInherit+0xa0>)
  402088:	681b      	ldr	r3, [r3, #0]
  40208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40208c:	429a      	cmp	r2, r3
  40208e:	d23a      	bcs.n	402106 <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  402090:	4b1f      	ldr	r3, [pc, #124]	; (402110 <vTaskPriorityInherit+0xa0>)
  402092:	681b      	ldr	r3, [r3, #0]
  402094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402096:	f1c3 0205 	rsb	r2, r3, #5
  40209a:	68fb      	ldr	r3, [r7, #12]
  40209c:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  40209e:	68fb      	ldr	r3, [r7, #12]
  4020a0:	6959      	ldr	r1, [r3, #20]
  4020a2:	68fb      	ldr	r3, [r7, #12]
  4020a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4020a6:	4613      	mov	r3, r2
  4020a8:	009b      	lsls	r3, r3, #2
  4020aa:	4413      	add	r3, r2
  4020ac:	009b      	lsls	r3, r3, #2
  4020ae:	4a19      	ldr	r2, [pc, #100]	; (402114 <vTaskPriorityInherit+0xa4>)
  4020b0:	4413      	add	r3, r2
  4020b2:	4299      	cmp	r1, r3
  4020b4:	d122      	bne.n	4020fc <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  4020b6:	68fb      	ldr	r3, [r7, #12]
  4020b8:	3304      	adds	r3, #4
  4020ba:	4618      	mov	r0, r3
  4020bc:	4b16      	ldr	r3, [pc, #88]	; (402118 <vTaskPriorityInherit+0xa8>)
  4020be:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4020c0:	4b13      	ldr	r3, [pc, #76]	; (402110 <vTaskPriorityInherit+0xa0>)
  4020c2:	681b      	ldr	r3, [r3, #0]
  4020c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4020c6:	68fb      	ldr	r3, [r7, #12]
  4020c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  4020ca:	68fb      	ldr	r3, [r7, #12]
  4020cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4020ce:	4b13      	ldr	r3, [pc, #76]	; (40211c <vTaskPriorityInherit+0xac>)
  4020d0:	681b      	ldr	r3, [r3, #0]
  4020d2:	429a      	cmp	r2, r3
  4020d4:	d903      	bls.n	4020de <vTaskPriorityInherit+0x6e>
  4020d6:	68fb      	ldr	r3, [r7, #12]
  4020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4020da:	4a10      	ldr	r2, [pc, #64]	; (40211c <vTaskPriorityInherit+0xac>)
  4020dc:	6013      	str	r3, [r2, #0]
  4020de:	68fb      	ldr	r3, [r7, #12]
  4020e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4020e2:	4613      	mov	r3, r2
  4020e4:	009b      	lsls	r3, r3, #2
  4020e6:	4413      	add	r3, r2
  4020e8:	009b      	lsls	r3, r3, #2
  4020ea:	4a0a      	ldr	r2, [pc, #40]	; (402114 <vTaskPriorityInherit+0xa4>)
  4020ec:	441a      	add	r2, r3
  4020ee:	68fb      	ldr	r3, [r7, #12]
  4020f0:	3304      	adds	r3, #4
  4020f2:	4619      	mov	r1, r3
  4020f4:	4610      	mov	r0, r2
  4020f6:	4b0a      	ldr	r3, [pc, #40]	; (402120 <vTaskPriorityInherit+0xb0>)
  4020f8:	4798      	blx	r3
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  4020fa:	e004      	b.n	402106 <vTaskPriorityInherit+0x96>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4020fc:	4b04      	ldr	r3, [pc, #16]	; (402110 <vTaskPriorityInherit+0xa0>)
  4020fe:	681b      	ldr	r3, [r3, #0]
  402100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402102:	68fb      	ldr	r3, [r7, #12]
  402104:	62da      	str	r2, [r3, #44]	; 0x2c
	}
  402106:	bf00      	nop
  402108:	3710      	adds	r7, #16
  40210a:	46bd      	mov	sp, r7
  40210c:	bd80      	pop	{r7, pc}
  40210e:	bf00      	nop
  402110:	2000a4ec 	.word	0x2000a4ec
  402114:	2000a4f0 	.word	0x2000a4f0
  402118:	0040071d 	.word	0x0040071d
  40211c:	2000a5d0 	.word	0x2000a5d0
  402120:	0040065b 	.word	0x0040065b

00402124 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  402124:	b580      	push	{r7, lr}
  402126:	b084      	sub	sp, #16
  402128:	af00      	add	r7, sp, #0
  40212a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  40212c:	687b      	ldr	r3, [r7, #4]
  40212e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  402130:	687b      	ldr	r3, [r7, #4]
  402132:	2b00      	cmp	r3, #0
  402134:	d02c      	beq.n	402190 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402136:	68fb      	ldr	r3, [r7, #12]
  402138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40213a:	68fb      	ldr	r3, [r7, #12]
  40213c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40213e:	429a      	cmp	r2, r3
  402140:	d026      	beq.n	402190 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  402142:	68fb      	ldr	r3, [r7, #12]
  402144:	3304      	adds	r3, #4
  402146:	4618      	mov	r0, r3
  402148:	4b13      	ldr	r3, [pc, #76]	; (402198 <vTaskPriorityDisinherit+0x74>)
  40214a:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  40214c:	68fb      	ldr	r3, [r7, #12]
  40214e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  402150:	68fb      	ldr	r3, [r7, #12]
  402152:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  402154:	68fb      	ldr	r3, [r7, #12]
  402156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402158:	f1c3 0205 	rsb	r2, r3, #5
  40215c:	68fb      	ldr	r3, [r7, #12]
  40215e:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  402160:	68fb      	ldr	r3, [r7, #12]
  402162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402164:	4b0d      	ldr	r3, [pc, #52]	; (40219c <vTaskPriorityDisinherit+0x78>)
  402166:	681b      	ldr	r3, [r3, #0]
  402168:	429a      	cmp	r2, r3
  40216a:	d903      	bls.n	402174 <vTaskPriorityDisinherit+0x50>
  40216c:	68fb      	ldr	r3, [r7, #12]
  40216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402170:	4a0a      	ldr	r2, [pc, #40]	; (40219c <vTaskPriorityDisinherit+0x78>)
  402172:	6013      	str	r3, [r2, #0]
  402174:	68fb      	ldr	r3, [r7, #12]
  402176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402178:	4613      	mov	r3, r2
  40217a:	009b      	lsls	r3, r3, #2
  40217c:	4413      	add	r3, r2
  40217e:	009b      	lsls	r3, r3, #2
  402180:	4a07      	ldr	r2, [pc, #28]	; (4021a0 <vTaskPriorityDisinherit+0x7c>)
  402182:	441a      	add	r2, r3
  402184:	68fb      	ldr	r3, [r7, #12]
  402186:	3304      	adds	r3, #4
  402188:	4619      	mov	r1, r3
  40218a:	4610      	mov	r0, r2
  40218c:	4b05      	ldr	r3, [pc, #20]	; (4021a4 <vTaskPriorityDisinherit+0x80>)
  40218e:	4798      	blx	r3
			}
		}
	}
  402190:	bf00      	nop
  402192:	3710      	adds	r7, #16
  402194:	46bd      	mov	sp, r7
  402196:	bd80      	pop	{r7, pc}
  402198:	0040071d 	.word	0x0040071d
  40219c:	2000a5d0 	.word	0x2000a5d0
  4021a0:	2000a4f0 	.word	0x2000a4f0
  4021a4:	0040065b 	.word	0x0040065b

004021a8 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  4021a8:	b590      	push	{r4, r7, lr}
  4021aa:	b087      	sub	sp, #28
  4021ac:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  4021ae:	2300      	movs	r3, #0
  4021b0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  4021b2:	4b11      	ldr	r3, [pc, #68]	; (4021f8 <xTimerCreateTimerTask+0x50>)
  4021b4:	4798      	blx	r3

	if( xTimerQueue != NULL )
  4021b6:	4b11      	ldr	r3, [pc, #68]	; (4021fc <xTimerCreateTimerTask+0x54>)
  4021b8:	681b      	ldr	r3, [r3, #0]
  4021ba:	2b00      	cmp	r3, #0
  4021bc:	d00f      	beq.n	4021de <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4021be:	2300      	movs	r3, #0
  4021c0:	9303      	str	r3, [sp, #12]
  4021c2:	2300      	movs	r3, #0
  4021c4:	9302      	str	r3, [sp, #8]
  4021c6:	2300      	movs	r3, #0
  4021c8:	9301      	str	r3, [sp, #4]
  4021ca:	2304      	movs	r3, #4
  4021cc:	9300      	str	r3, [sp, #0]
  4021ce:	2300      	movs	r3, #0
  4021d0:	f44f 7282 	mov.w	r2, #260	; 0x104
  4021d4:	490a      	ldr	r1, [pc, #40]	; (402200 <xTimerCreateTimerTask+0x58>)
  4021d6:	480b      	ldr	r0, [pc, #44]	; (402204 <xTimerCreateTimerTask+0x5c>)
  4021d8:	4c0b      	ldr	r4, [pc, #44]	; (402208 <xTimerCreateTimerTask+0x60>)
  4021da:	47a0      	blx	r4
  4021dc:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  4021de:	687b      	ldr	r3, [r7, #4]
  4021e0:	2b00      	cmp	r3, #0
  4021e2:	d103      	bne.n	4021ec <xTimerCreateTimerTask+0x44>
  4021e4:	4b09      	ldr	r3, [pc, #36]	; (40220c <xTimerCreateTimerTask+0x64>)
  4021e6:	4798      	blx	r3
  4021e8:	bf00      	nop
  4021ea:	e7fd      	b.n	4021e8 <xTimerCreateTimerTask+0x40>
	return xReturn;
  4021ec:	687b      	ldr	r3, [r7, #4]
}
  4021ee:	4618      	mov	r0, r3
  4021f0:	370c      	adds	r7, #12
  4021f2:	46bd      	mov	sp, r7
  4021f4:	bd90      	pop	{r4, r7, pc}
  4021f6:	bf00      	nop
  4021f8:	004026c5 	.word	0x004026c5
  4021fc:	2000a61c 	.word	0x2000a61c
  402200:	00404484 	.word	0x00404484
  402204:	00402321 	.word	0x00402321
  402208:	004014cd 	.word	0x004014cd
  40220c:	00400971 	.word	0x00400971

00402210 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  402210:	b590      	push	{r4, r7, lr}
  402212:	b089      	sub	sp, #36	; 0x24
  402214:	af00      	add	r7, sp, #0
  402216:	60f8      	str	r0, [r7, #12]
  402218:	60b9      	str	r1, [r7, #8]
  40221a:	607a      	str	r2, [r7, #4]
  40221c:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  40221e:	2300      	movs	r3, #0
  402220:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  402222:	4b1a      	ldr	r3, [pc, #104]	; (40228c <xTimerGenericCommand+0x7c>)
  402224:	681b      	ldr	r3, [r3, #0]
  402226:	2b00      	cmp	r3, #0
  402228:	d02a      	beq.n	402280 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  40222a:	68bb      	ldr	r3, [r7, #8]
  40222c:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  40222e:	687b      	ldr	r3, [r7, #4]
  402230:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  402232:	68fb      	ldr	r3, [r7, #12]
  402234:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  402236:	683b      	ldr	r3, [r7, #0]
  402238:	2b00      	cmp	r3, #0
  40223a:	d118      	bne.n	40226e <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40223c:	4b14      	ldr	r3, [pc, #80]	; (402290 <xTimerGenericCommand+0x80>)
  40223e:	4798      	blx	r3
  402240:	4603      	mov	r3, r0
  402242:	2b01      	cmp	r3, #1
  402244:	d109      	bne.n	40225a <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  402246:	4b11      	ldr	r3, [pc, #68]	; (40228c <xTimerGenericCommand+0x7c>)
  402248:	6818      	ldr	r0, [r3, #0]
  40224a:	f107 0110 	add.w	r1, r7, #16
  40224e:	2300      	movs	r3, #0
  402250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  402252:	4c10      	ldr	r4, [pc, #64]	; (402294 <xTimerGenericCommand+0x84>)
  402254:	47a0      	blx	r4
  402256:	61f8      	str	r0, [r7, #28]
  402258:	e012      	b.n	402280 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40225a:	4b0c      	ldr	r3, [pc, #48]	; (40228c <xTimerGenericCommand+0x7c>)
  40225c:	6818      	ldr	r0, [r3, #0]
  40225e:	f107 0110 	add.w	r1, r7, #16
  402262:	2300      	movs	r3, #0
  402264:	2200      	movs	r2, #0
  402266:	4c0b      	ldr	r4, [pc, #44]	; (402294 <xTimerGenericCommand+0x84>)
  402268:	47a0      	blx	r4
  40226a:	61f8      	str	r0, [r7, #28]
  40226c:	e008      	b.n	402280 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40226e:	4b07      	ldr	r3, [pc, #28]	; (40228c <xTimerGenericCommand+0x7c>)
  402270:	6818      	ldr	r0, [r3, #0]
  402272:	f107 0110 	add.w	r1, r7, #16
  402276:	2300      	movs	r3, #0
  402278:	683a      	ldr	r2, [r7, #0]
  40227a:	4c07      	ldr	r4, [pc, #28]	; (402298 <xTimerGenericCommand+0x88>)
  40227c:	47a0      	blx	r4
  40227e:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  402280:	69fb      	ldr	r3, [r7, #28]
}
  402282:	4618      	mov	r0, r3
  402284:	3724      	adds	r7, #36	; 0x24
  402286:	46bd      	mov	sp, r7
  402288:	bd90      	pop	{r4, r7, pc}
  40228a:	bf00      	nop
  40228c:	2000a61c 	.word	0x2000a61c
  402290:	00402035 	.word	0x00402035
  402294:	00400e4d 	.word	0x00400e4d
  402298:	00400fb5 	.word	0x00400fb5

0040229c <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  40229c:	b590      	push	{r4, r7, lr}
  40229e:	b087      	sub	sp, #28
  4022a0:	af02      	add	r7, sp, #8
  4022a2:	6078      	str	r0, [r7, #4]
  4022a4:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4022a6:	4b19      	ldr	r3, [pc, #100]	; (40230c <prvProcessExpiredTimer+0x70>)
  4022a8:	681b      	ldr	r3, [r3, #0]
  4022aa:	68db      	ldr	r3, [r3, #12]
  4022ac:	68db      	ldr	r3, [r3, #12]
  4022ae:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  4022b0:	68fb      	ldr	r3, [r7, #12]
  4022b2:	3304      	adds	r3, #4
  4022b4:	4618      	mov	r0, r3
  4022b6:	4b16      	ldr	r3, [pc, #88]	; (402310 <prvProcessExpiredTimer+0x74>)
  4022b8:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4022ba:	68fb      	ldr	r3, [r7, #12]
  4022bc:	69db      	ldr	r3, [r3, #28]
  4022be:	2b01      	cmp	r3, #1
  4022c0:	d11b      	bne.n	4022fa <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4022c2:	68fb      	ldr	r3, [r7, #12]
  4022c4:	699a      	ldr	r2, [r3, #24]
  4022c6:	687b      	ldr	r3, [r7, #4]
  4022c8:	18d1      	adds	r1, r2, r3
  4022ca:	687b      	ldr	r3, [r7, #4]
  4022cc:	683a      	ldr	r2, [r7, #0]
  4022ce:	68f8      	ldr	r0, [r7, #12]
  4022d0:	4c10      	ldr	r4, [pc, #64]	; (402314 <prvProcessExpiredTimer+0x78>)
  4022d2:	47a0      	blx	r4
  4022d4:	4603      	mov	r3, r0
  4022d6:	2b01      	cmp	r3, #1
  4022d8:	d10f      	bne.n	4022fa <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  4022da:	2300      	movs	r3, #0
  4022dc:	9300      	str	r3, [sp, #0]
  4022de:	2300      	movs	r3, #0
  4022e0:	687a      	ldr	r2, [r7, #4]
  4022e2:	2100      	movs	r1, #0
  4022e4:	68f8      	ldr	r0, [r7, #12]
  4022e6:	4c0c      	ldr	r4, [pc, #48]	; (402318 <prvProcessExpiredTimer+0x7c>)
  4022e8:	47a0      	blx	r4
  4022ea:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  4022ec:	68bb      	ldr	r3, [r7, #8]
  4022ee:	2b00      	cmp	r3, #0
  4022f0:	d103      	bne.n	4022fa <prvProcessExpiredTimer+0x5e>
  4022f2:	4b0a      	ldr	r3, [pc, #40]	; (40231c <prvProcessExpiredTimer+0x80>)
  4022f4:	4798      	blx	r3
  4022f6:	bf00      	nop
  4022f8:	e7fd      	b.n	4022f6 <prvProcessExpiredTimer+0x5a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4022fa:	68fb      	ldr	r3, [r7, #12]
  4022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4022fe:	68f8      	ldr	r0, [r7, #12]
  402300:	4798      	blx	r3
}
  402302:	bf00      	nop
  402304:	3714      	adds	r7, #20
  402306:	46bd      	mov	sp, r7
  402308:	bd90      	pop	{r4, r7, pc}
  40230a:	bf00      	nop
  40230c:	2000a614 	.word	0x2000a614
  402310:	0040071d 	.word	0x0040071d
  402314:	00402469 	.word	0x00402469
  402318:	00402211 	.word	0x00402211
  40231c:	00400971 	.word	0x00400971

00402320 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  402320:	b580      	push	{r7, lr}
  402322:	b084      	sub	sp, #16
  402324:	af00      	add	r7, sp, #0
  402326:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  402328:	f107 0308 	add.w	r3, r7, #8
  40232c:	4618      	mov	r0, r3
  40232e:	4b05      	ldr	r3, [pc, #20]	; (402344 <prvTimerTask+0x24>)
  402330:	4798      	blx	r3
  402332:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  402334:	68bb      	ldr	r3, [r7, #8]
  402336:	4619      	mov	r1, r3
  402338:	68f8      	ldr	r0, [r7, #12]
  40233a:	4b03      	ldr	r3, [pc, #12]	; (402348 <prvTimerTask+0x28>)
  40233c:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  40233e:	4b03      	ldr	r3, [pc, #12]	; (40234c <prvTimerTask+0x2c>)
  402340:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  402342:	e7f1      	b.n	402328 <prvTimerTask+0x8>
  402344:	004023d5 	.word	0x004023d5
  402348:	00402351 	.word	0x00402351
  40234c:	004024f1 	.word	0x004024f1

00402350 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  402350:	b580      	push	{r7, lr}
  402352:	b084      	sub	sp, #16
  402354:	af00      	add	r7, sp, #0
  402356:	6078      	str	r0, [r7, #4]
  402358:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  40235a:	4b17      	ldr	r3, [pc, #92]	; (4023b8 <prvProcessTimerOrBlockTask+0x68>)
  40235c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40235e:	f107 0308 	add.w	r3, r7, #8
  402362:	4618      	mov	r0, r3
  402364:	4b15      	ldr	r3, [pc, #84]	; (4023bc <prvProcessTimerOrBlockTask+0x6c>)
  402366:	4798      	blx	r3
  402368:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  40236a:	68bb      	ldr	r3, [r7, #8]
  40236c:	2b00      	cmp	r3, #0
  40236e:	d11d      	bne.n	4023ac <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402370:	683b      	ldr	r3, [r7, #0]
  402372:	2b00      	cmp	r3, #0
  402374:	d10a      	bne.n	40238c <prvProcessTimerOrBlockTask+0x3c>
  402376:	687a      	ldr	r2, [r7, #4]
  402378:	68fb      	ldr	r3, [r7, #12]
  40237a:	429a      	cmp	r2, r3
  40237c:	d806      	bhi.n	40238c <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  40237e:	4b10      	ldr	r3, [pc, #64]	; (4023c0 <prvProcessTimerOrBlockTask+0x70>)
  402380:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  402382:	68f9      	ldr	r1, [r7, #12]
  402384:	6878      	ldr	r0, [r7, #4]
  402386:	4b0f      	ldr	r3, [pc, #60]	; (4023c4 <prvProcessTimerOrBlockTask+0x74>)
  402388:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
  40238a:	e011      	b.n	4023b0 <prvProcessTimerOrBlockTask+0x60>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  40238c:	4b0e      	ldr	r3, [pc, #56]	; (4023c8 <prvProcessTimerOrBlockTask+0x78>)
  40238e:	6818      	ldr	r0, [r3, #0]
  402390:	687a      	ldr	r2, [r7, #4]
  402392:	68fb      	ldr	r3, [r7, #12]
  402394:	1ad3      	subs	r3, r2, r3
  402396:	4619      	mov	r1, r3
  402398:	4b0c      	ldr	r3, [pc, #48]	; (4023cc <prvProcessTimerOrBlockTask+0x7c>)
  40239a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40239c:	4b08      	ldr	r3, [pc, #32]	; (4023c0 <prvProcessTimerOrBlockTask+0x70>)
  40239e:	4798      	blx	r3
  4023a0:	4603      	mov	r3, r0
  4023a2:	2b00      	cmp	r3, #0
  4023a4:	d104      	bne.n	4023b0 <prvProcessTimerOrBlockTask+0x60>
					portYIELD_WITHIN_API();
  4023a6:	4b0a      	ldr	r3, [pc, #40]	; (4023d0 <prvProcessTimerOrBlockTask+0x80>)
  4023a8:	4798      	blx	r3
}
  4023aa:	e001      	b.n	4023b0 <prvProcessTimerOrBlockTask+0x60>
			xTaskResumeAll();
  4023ac:	4b04      	ldr	r3, [pc, #16]	; (4023c0 <prvProcessTimerOrBlockTask+0x70>)
  4023ae:	4798      	blx	r3
}
  4023b0:	bf00      	nop
  4023b2:	3710      	adds	r7, #16
  4023b4:	46bd      	mov	sp, r7
  4023b6:	bd80      	pop	{r7, pc}
  4023b8:	0040175d 	.word	0x0040175d
  4023bc:	0040241d 	.word	0x0040241d
  4023c0:	00401779 	.word	0x00401779
  4023c4:	0040229d 	.word	0x0040229d
  4023c8:	2000a61c 	.word	0x2000a61c
  4023cc:	00401469 	.word	0x00401469
  4023d0:	0040090d 	.word	0x0040090d

004023d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  4023d4:	b480      	push	{r7}
  4023d6:	b085      	sub	sp, #20
  4023d8:	af00      	add	r7, sp, #0
  4023da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4023dc:	4b0e      	ldr	r3, [pc, #56]	; (402418 <prvGetNextExpireTime+0x44>)
  4023de:	681b      	ldr	r3, [r3, #0]
  4023e0:	681b      	ldr	r3, [r3, #0]
  4023e2:	2b00      	cmp	r3, #0
  4023e4:	bf0c      	ite	eq
  4023e6:	2301      	moveq	r3, #1
  4023e8:	2300      	movne	r3, #0
  4023ea:	b2db      	uxtb	r3, r3
  4023ec:	461a      	mov	r2, r3
  4023ee:	687b      	ldr	r3, [r7, #4]
  4023f0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  4023f2:	687b      	ldr	r3, [r7, #4]
  4023f4:	681b      	ldr	r3, [r3, #0]
  4023f6:	2b00      	cmp	r3, #0
  4023f8:	d105      	bne.n	402406 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4023fa:	4b07      	ldr	r3, [pc, #28]	; (402418 <prvGetNextExpireTime+0x44>)
  4023fc:	681b      	ldr	r3, [r3, #0]
  4023fe:	68db      	ldr	r3, [r3, #12]
  402400:	681b      	ldr	r3, [r3, #0]
  402402:	60fb      	str	r3, [r7, #12]
  402404:	e001      	b.n	40240a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  402406:	2300      	movs	r3, #0
  402408:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  40240a:	68fb      	ldr	r3, [r7, #12]
}
  40240c:	4618      	mov	r0, r3
  40240e:	3714      	adds	r7, #20
  402410:	46bd      	mov	sp, r7
  402412:	f85d 7b04 	ldr.w	r7, [sp], #4
  402416:	4770      	bx	lr
  402418:	2000a614 	.word	0x2000a614

0040241c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  40241c:	b580      	push	{r7, lr}
  40241e:	b084      	sub	sp, #16
  402420:	af00      	add	r7, sp, #0
  402422:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  402424:	4b0d      	ldr	r3, [pc, #52]	; (40245c <prvSampleTimeNow+0x40>)
  402426:	4798      	blx	r3
  402428:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  40242a:	4b0d      	ldr	r3, [pc, #52]	; (402460 <prvSampleTimeNow+0x44>)
  40242c:	681b      	ldr	r3, [r3, #0]
  40242e:	68fa      	ldr	r2, [r7, #12]
  402430:	429a      	cmp	r2, r3
  402432:	d208      	bcs.n	402446 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  402434:	4b0a      	ldr	r3, [pc, #40]	; (402460 <prvSampleTimeNow+0x44>)
  402436:	681b      	ldr	r3, [r3, #0]
  402438:	4618      	mov	r0, r3
  40243a:	4b0a      	ldr	r3, [pc, #40]	; (402464 <prvSampleTimeNow+0x48>)
  40243c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  40243e:	687b      	ldr	r3, [r7, #4]
  402440:	2201      	movs	r2, #1
  402442:	601a      	str	r2, [r3, #0]
  402444:	e002      	b.n	40244c <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  402446:	687b      	ldr	r3, [r7, #4]
  402448:	2200      	movs	r2, #0
  40244a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  40244c:	4a04      	ldr	r2, [pc, #16]	; (402460 <prvSampleTimeNow+0x44>)
  40244e:	68fb      	ldr	r3, [r7, #12]
  402450:	6013      	str	r3, [r2, #0]

	return xTimeNow;
  402452:	68fb      	ldr	r3, [r7, #12]
}
  402454:	4618      	mov	r0, r3
  402456:	3710      	adds	r7, #16
  402458:	46bd      	mov	sp, r7
  40245a:	bd80      	pop	{r7, pc}
  40245c:	00401899 	.word	0x00401899
  402460:	2000a620 	.word	0x2000a620
  402464:	004025fd 	.word	0x004025fd

00402468 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  402468:	b580      	push	{r7, lr}
  40246a:	b086      	sub	sp, #24
  40246c:	af00      	add	r7, sp, #0
  40246e:	60f8      	str	r0, [r7, #12]
  402470:	60b9      	str	r1, [r7, #8]
  402472:	607a      	str	r2, [r7, #4]
  402474:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  402476:	2300      	movs	r3, #0
  402478:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40247a:	68fb      	ldr	r3, [r7, #12]
  40247c:	68ba      	ldr	r2, [r7, #8]
  40247e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402480:	68fb      	ldr	r3, [r7, #12]
  402482:	68fa      	ldr	r2, [r7, #12]
  402484:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  402486:	68ba      	ldr	r2, [r7, #8]
  402488:	687b      	ldr	r3, [r7, #4]
  40248a:	429a      	cmp	r2, r3
  40248c:	d812      	bhi.n	4024b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  40248e:	687a      	ldr	r2, [r7, #4]
  402490:	683b      	ldr	r3, [r7, #0]
  402492:	1ad2      	subs	r2, r2, r3
  402494:	68fb      	ldr	r3, [r7, #12]
  402496:	699b      	ldr	r3, [r3, #24]
  402498:	429a      	cmp	r2, r3
  40249a:	d302      	bcc.n	4024a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40249c:	2301      	movs	r3, #1
  40249e:	617b      	str	r3, [r7, #20]
  4024a0:	e01b      	b.n	4024da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4024a2:	4b10      	ldr	r3, [pc, #64]	; (4024e4 <prvInsertTimerInActiveList+0x7c>)
  4024a4:	681a      	ldr	r2, [r3, #0]
  4024a6:	68fb      	ldr	r3, [r7, #12]
  4024a8:	3304      	adds	r3, #4
  4024aa:	4619      	mov	r1, r3
  4024ac:	4610      	mov	r0, r2
  4024ae:	4b0e      	ldr	r3, [pc, #56]	; (4024e8 <prvInsertTimerInActiveList+0x80>)
  4024b0:	4798      	blx	r3
  4024b2:	e012      	b.n	4024da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4024b4:	687a      	ldr	r2, [r7, #4]
  4024b6:	683b      	ldr	r3, [r7, #0]
  4024b8:	429a      	cmp	r2, r3
  4024ba:	d206      	bcs.n	4024ca <prvInsertTimerInActiveList+0x62>
  4024bc:	68ba      	ldr	r2, [r7, #8]
  4024be:	683b      	ldr	r3, [r7, #0]
  4024c0:	429a      	cmp	r2, r3
  4024c2:	d302      	bcc.n	4024ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4024c4:	2301      	movs	r3, #1
  4024c6:	617b      	str	r3, [r7, #20]
  4024c8:	e007      	b.n	4024da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4024ca:	4b08      	ldr	r3, [pc, #32]	; (4024ec <prvInsertTimerInActiveList+0x84>)
  4024cc:	681a      	ldr	r2, [r3, #0]
  4024ce:	68fb      	ldr	r3, [r7, #12]
  4024d0:	3304      	adds	r3, #4
  4024d2:	4619      	mov	r1, r3
  4024d4:	4610      	mov	r0, r2
  4024d6:	4b04      	ldr	r3, [pc, #16]	; (4024e8 <prvInsertTimerInActiveList+0x80>)
  4024d8:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  4024da:	697b      	ldr	r3, [r7, #20]
}
  4024dc:	4618      	mov	r0, r3
  4024de:	3718      	adds	r7, #24
  4024e0:	46bd      	mov	sp, r7
  4024e2:	bd80      	pop	{r7, pc}
  4024e4:	2000a618 	.word	0x2000a618
  4024e8:	004006ab 	.word	0x004006ab
  4024ec:	2000a614 	.word	0x2000a614

004024f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  4024f0:	b590      	push	{r4, r7, lr}
  4024f2:	b08b      	sub	sp, #44	; 0x2c
  4024f4:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4024f6:	1d3b      	adds	r3, r7, #4
  4024f8:	4618      	mov	r0, r3
  4024fa:	4b38      	ldr	r3, [pc, #224]	; (4025dc <prvProcessReceivedCommands+0xec>)
  4024fc:	4798      	blx	r3
  4024fe:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  402500:	e05d      	b.n	4025be <prvProcessReceivedCommands+0xce>
	{
		pxTimer = xMessage.pxTimer;
  402502:	693b      	ldr	r3, [r7, #16]
  402504:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  402506:	69bb      	ldr	r3, [r7, #24]
  402508:	2b00      	cmp	r3, #0
  40250a:	d008      	beq.n	40251e <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40250c:	69bb      	ldr	r3, [r7, #24]
  40250e:	695b      	ldr	r3, [r3, #20]
  402510:	2b00      	cmp	r3, #0
  402512:	d004      	beq.n	40251e <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  402514:	69bb      	ldr	r3, [r7, #24]
  402516:	3304      	adds	r3, #4
  402518:	4618      	mov	r0, r3
  40251a:	4b31      	ldr	r3, [pc, #196]	; (4025e0 <prvProcessReceivedCommands+0xf0>)
  40251c:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  40251e:	68bb      	ldr	r3, [r7, #8]
  402520:	2b03      	cmp	r3, #3
  402522:	d84b      	bhi.n	4025bc <prvProcessReceivedCommands+0xcc>
  402524:	a201      	add	r2, pc, #4	; (adr r2, 40252c <prvProcessReceivedCommands+0x3c>)
  402526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40252a:	bf00      	nop
  40252c:	0040253d 	.word	0x0040253d
  402530:	004025bf 	.word	0x004025bf
  402534:	0040258b 	.word	0x0040258b
  402538:	004025b5 	.word	0x004025b5
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  40253c:	68fa      	ldr	r2, [r7, #12]
  40253e:	69bb      	ldr	r3, [r7, #24]
  402540:	699b      	ldr	r3, [r3, #24]
  402542:	18d1      	adds	r1, r2, r3
  402544:	68fb      	ldr	r3, [r7, #12]
  402546:	69fa      	ldr	r2, [r7, #28]
  402548:	69b8      	ldr	r0, [r7, #24]
  40254a:	4c26      	ldr	r4, [pc, #152]	; (4025e4 <prvProcessReceivedCommands+0xf4>)
  40254c:	47a0      	blx	r4
  40254e:	4603      	mov	r3, r0
  402550:	2b01      	cmp	r3, #1
  402552:	d134      	bne.n	4025be <prvProcessReceivedCommands+0xce>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  402554:	69bb      	ldr	r3, [r7, #24]
  402556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402558:	69b8      	ldr	r0, [r7, #24]
  40255a:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40255c:	69bb      	ldr	r3, [r7, #24]
  40255e:	69db      	ldr	r3, [r3, #28]
  402560:	2b01      	cmp	r3, #1
  402562:	d12c      	bne.n	4025be <prvProcessReceivedCommands+0xce>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402564:	68fa      	ldr	r2, [r7, #12]
  402566:	69bb      	ldr	r3, [r7, #24]
  402568:	699b      	ldr	r3, [r3, #24]
  40256a:	441a      	add	r2, r3
  40256c:	2300      	movs	r3, #0
  40256e:	9300      	str	r3, [sp, #0]
  402570:	2300      	movs	r3, #0
  402572:	2100      	movs	r1, #0
  402574:	69b8      	ldr	r0, [r7, #24]
  402576:	4c1c      	ldr	r4, [pc, #112]	; (4025e8 <prvProcessReceivedCommands+0xf8>)
  402578:	47a0      	blx	r4
  40257a:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  40257c:	697b      	ldr	r3, [r7, #20]
  40257e:	2b00      	cmp	r3, #0
  402580:	d11d      	bne.n	4025be <prvProcessReceivedCommands+0xce>
  402582:	4b1a      	ldr	r3, [pc, #104]	; (4025ec <prvProcessReceivedCommands+0xfc>)
  402584:	4798      	blx	r3
  402586:	bf00      	nop
  402588:	e7fd      	b.n	402586 <prvProcessReceivedCommands+0x96>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  40258a:	68fa      	ldr	r2, [r7, #12]
  40258c:	69bb      	ldr	r3, [r7, #24]
  40258e:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402590:	69bb      	ldr	r3, [r7, #24]
  402592:	699b      	ldr	r3, [r3, #24]
  402594:	2b00      	cmp	r3, #0
  402596:	d103      	bne.n	4025a0 <prvProcessReceivedCommands+0xb0>
  402598:	4b14      	ldr	r3, [pc, #80]	; (4025ec <prvProcessReceivedCommands+0xfc>)
  40259a:	4798      	blx	r3
  40259c:	bf00      	nop
  40259e:	e7fd      	b.n	40259c <prvProcessReceivedCommands+0xac>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4025a0:	69bb      	ldr	r3, [r7, #24]
  4025a2:	699a      	ldr	r2, [r3, #24]
  4025a4:	69fb      	ldr	r3, [r7, #28]
  4025a6:	18d1      	adds	r1, r2, r3
  4025a8:	69fb      	ldr	r3, [r7, #28]
  4025aa:	69fa      	ldr	r2, [r7, #28]
  4025ac:	69b8      	ldr	r0, [r7, #24]
  4025ae:	4c0d      	ldr	r4, [pc, #52]	; (4025e4 <prvProcessReceivedCommands+0xf4>)
  4025b0:	47a0      	blx	r4
				break;
  4025b2:	e004      	b.n	4025be <prvProcessReceivedCommands+0xce>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  4025b4:	69b8      	ldr	r0, [r7, #24]
  4025b6:	4b0e      	ldr	r3, [pc, #56]	; (4025f0 <prvProcessReceivedCommands+0x100>)
  4025b8:	4798      	blx	r3
				break;
  4025ba:	e000      	b.n	4025be <prvProcessReceivedCommands+0xce>

			default	:
				/* Don't expect to get here. */
				break;
  4025bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  4025be:	4b0d      	ldr	r3, [pc, #52]	; (4025f4 <prvProcessReceivedCommands+0x104>)
  4025c0:	6818      	ldr	r0, [r3, #0]
  4025c2:	f107 0108 	add.w	r1, r7, #8
  4025c6:	2300      	movs	r3, #0
  4025c8:	2200      	movs	r2, #0
  4025ca:	4c0b      	ldr	r4, [pc, #44]	; (4025f8 <prvProcessReceivedCommands+0x108>)
  4025cc:	47a0      	blx	r4
  4025ce:	4603      	mov	r3, r0
  4025d0:	2b00      	cmp	r3, #0
  4025d2:	d196      	bne.n	402502 <prvProcessReceivedCommands+0x12>
		}
	}
}
  4025d4:	bf00      	nop
  4025d6:	3724      	adds	r7, #36	; 0x24
  4025d8:	46bd      	mov	sp, r7
  4025da:	bd90      	pop	{r4, r7, pc}
  4025dc:	0040241d 	.word	0x0040241d
  4025e0:	0040071d 	.word	0x0040071d
  4025e4:	00402469 	.word	0x00402469
  4025e8:	00402211 	.word	0x00402211
  4025ec:	00400971 	.word	0x00400971
  4025f0:	00400b55 	.word	0x00400b55
  4025f4:	2000a61c 	.word	0x2000a61c
  4025f8:	00401071 	.word	0x00401071

004025fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  4025fc:	b590      	push	{r4, r7, lr}
  4025fe:	b08b      	sub	sp, #44	; 0x2c
  402600:	af02      	add	r7, sp, #8
  402602:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402604:	e03e      	b.n	402684 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402606:	4b29      	ldr	r3, [pc, #164]	; (4026ac <prvSwitchTimerLists+0xb0>)
  402608:	681b      	ldr	r3, [r3, #0]
  40260a:	68db      	ldr	r3, [r3, #12]
  40260c:	681b      	ldr	r3, [r3, #0]
  40260e:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402610:	4b26      	ldr	r3, [pc, #152]	; (4026ac <prvSwitchTimerLists+0xb0>)
  402612:	681b      	ldr	r3, [r3, #0]
  402614:	68db      	ldr	r3, [r3, #12]
  402616:	68db      	ldr	r3, [r3, #12]
  402618:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  40261a:	69bb      	ldr	r3, [r7, #24]
  40261c:	3304      	adds	r3, #4
  40261e:	4618      	mov	r0, r3
  402620:	4b23      	ldr	r3, [pc, #140]	; (4026b0 <prvSwitchTimerLists+0xb4>)
  402622:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  402624:	69bb      	ldr	r3, [r7, #24]
  402626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402628:	69b8      	ldr	r0, [r7, #24]
  40262a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  40262c:	69bb      	ldr	r3, [r7, #24]
  40262e:	69db      	ldr	r3, [r3, #28]
  402630:	2b01      	cmp	r3, #1
  402632:	d127      	bne.n	402684 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402634:	69bb      	ldr	r3, [r7, #24]
  402636:	699a      	ldr	r2, [r3, #24]
  402638:	69fb      	ldr	r3, [r7, #28]
  40263a:	4413      	add	r3, r2
  40263c:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  40263e:	697a      	ldr	r2, [r7, #20]
  402640:	69fb      	ldr	r3, [r7, #28]
  402642:	429a      	cmp	r2, r3
  402644:	d90e      	bls.n	402664 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402646:	69bb      	ldr	r3, [r7, #24]
  402648:	697a      	ldr	r2, [r7, #20]
  40264a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40264c:	69bb      	ldr	r3, [r7, #24]
  40264e:	69ba      	ldr	r2, [r7, #24]
  402650:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402652:	4b16      	ldr	r3, [pc, #88]	; (4026ac <prvSwitchTimerLists+0xb0>)
  402654:	681a      	ldr	r2, [r3, #0]
  402656:	69bb      	ldr	r3, [r7, #24]
  402658:	3304      	adds	r3, #4
  40265a:	4619      	mov	r1, r3
  40265c:	4610      	mov	r0, r2
  40265e:	4b15      	ldr	r3, [pc, #84]	; (4026b4 <prvSwitchTimerLists+0xb8>)
  402660:	4798      	blx	r3
  402662:	e00f      	b.n	402684 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  402664:	2300      	movs	r3, #0
  402666:	9300      	str	r3, [sp, #0]
  402668:	2300      	movs	r3, #0
  40266a:	69fa      	ldr	r2, [r7, #28]
  40266c:	2100      	movs	r1, #0
  40266e:	69b8      	ldr	r0, [r7, #24]
  402670:	4c11      	ldr	r4, [pc, #68]	; (4026b8 <prvSwitchTimerLists+0xbc>)
  402672:	47a0      	blx	r4
  402674:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  402676:	693b      	ldr	r3, [r7, #16]
  402678:	2b00      	cmp	r3, #0
  40267a:	d103      	bne.n	402684 <prvSwitchTimerLists+0x88>
  40267c:	4b0f      	ldr	r3, [pc, #60]	; (4026bc <prvSwitchTimerLists+0xc0>)
  40267e:	4798      	blx	r3
  402680:	bf00      	nop
  402682:	e7fd      	b.n	402680 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402684:	4b09      	ldr	r3, [pc, #36]	; (4026ac <prvSwitchTimerLists+0xb0>)
  402686:	681b      	ldr	r3, [r3, #0]
  402688:	681b      	ldr	r3, [r3, #0]
  40268a:	2b00      	cmp	r3, #0
  40268c:	d1bb      	bne.n	402606 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  40268e:	4b07      	ldr	r3, [pc, #28]	; (4026ac <prvSwitchTimerLists+0xb0>)
  402690:	681b      	ldr	r3, [r3, #0]
  402692:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  402694:	4b0a      	ldr	r3, [pc, #40]	; (4026c0 <prvSwitchTimerLists+0xc4>)
  402696:	681b      	ldr	r3, [r3, #0]
  402698:	4a04      	ldr	r2, [pc, #16]	; (4026ac <prvSwitchTimerLists+0xb0>)
  40269a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
  40269c:	4a08      	ldr	r2, [pc, #32]	; (4026c0 <prvSwitchTimerLists+0xc4>)
  40269e:	68fb      	ldr	r3, [r7, #12]
  4026a0:	6013      	str	r3, [r2, #0]
}
  4026a2:	bf00      	nop
  4026a4:	3724      	adds	r7, #36	; 0x24
  4026a6:	46bd      	mov	sp, r7
  4026a8:	bd90      	pop	{r4, r7, pc}
  4026aa:	bf00      	nop
  4026ac:	2000a614 	.word	0x2000a614
  4026b0:	0040071d 	.word	0x0040071d
  4026b4:	004006ab 	.word	0x004006ab
  4026b8:	00402211 	.word	0x00402211
  4026bc:	00400971 	.word	0x00400971
  4026c0:	2000a618 	.word	0x2000a618

004026c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4026c4:	b580      	push	{r7, lr}
  4026c6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4026c8:	4b0e      	ldr	r3, [pc, #56]	; (402704 <prvCheckForValidListAndQueue+0x40>)
  4026ca:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4026cc:	4b0e      	ldr	r3, [pc, #56]	; (402708 <prvCheckForValidListAndQueue+0x44>)
  4026ce:	681b      	ldr	r3, [r3, #0]
  4026d0:	2b00      	cmp	r3, #0
  4026d2:	d113      	bne.n	4026fc <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  4026d4:	480d      	ldr	r0, [pc, #52]	; (40270c <prvCheckForValidListAndQueue+0x48>)
  4026d6:	4b0e      	ldr	r3, [pc, #56]	; (402710 <prvCheckForValidListAndQueue+0x4c>)
  4026d8:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  4026da:	480e      	ldr	r0, [pc, #56]	; (402714 <prvCheckForValidListAndQueue+0x50>)
  4026dc:	4b0c      	ldr	r3, [pc, #48]	; (402710 <prvCheckForValidListAndQueue+0x4c>)
  4026de:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  4026e0:	4b0d      	ldr	r3, [pc, #52]	; (402718 <prvCheckForValidListAndQueue+0x54>)
  4026e2:	4a0a      	ldr	r2, [pc, #40]	; (40270c <prvCheckForValidListAndQueue+0x48>)
  4026e4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4026e6:	4b0d      	ldr	r3, [pc, #52]	; (40271c <prvCheckForValidListAndQueue+0x58>)
  4026e8:	4a0a      	ldr	r2, [pc, #40]	; (402714 <prvCheckForValidListAndQueue+0x50>)
  4026ea:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  4026ec:	2200      	movs	r2, #0
  4026ee:	210c      	movs	r1, #12
  4026f0:	2005      	movs	r0, #5
  4026f2:	4b0b      	ldr	r3, [pc, #44]	; (402720 <prvCheckForValidListAndQueue+0x5c>)
  4026f4:	4798      	blx	r3
  4026f6:	4602      	mov	r2, r0
  4026f8:	4b03      	ldr	r3, [pc, #12]	; (402708 <prvCheckForValidListAndQueue+0x44>)
  4026fa:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  4026fc:	4b09      	ldr	r3, [pc, #36]	; (402724 <prvCheckForValidListAndQueue+0x60>)
  4026fe:	4798      	blx	r3
}
  402700:	bf00      	nop
  402702:	bd80      	pop	{r7, pc}
  402704:	00400929 	.word	0x00400929
  402708:	2000a61c 	.word	0x2000a61c
  40270c:	2000a5ec 	.word	0x2000a5ec
  402710:	00400601 	.word	0x00400601
  402714:	2000a600 	.word	0x2000a600
  402718:	2000a614 	.word	0x2000a614
  40271c:	2000a618 	.word	0x2000a618
  402720:	00400db5 	.word	0x00400db5
  402724:	00400949 	.word	0x00400949

00402728 <osc_get_rate>:
{
  402728:	b480      	push	{r7}
  40272a:	b083      	sub	sp, #12
  40272c:	af00      	add	r7, sp, #0
  40272e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402730:	687b      	ldr	r3, [r7, #4]
  402732:	2b07      	cmp	r3, #7
  402734:	d825      	bhi.n	402782 <osc_get_rate+0x5a>
  402736:	a201      	add	r2, pc, #4	; (adr r2, 40273c <osc_get_rate+0x14>)
  402738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40273c:	0040275d 	.word	0x0040275d
  402740:	00402763 	.word	0x00402763
  402744:	00402769 	.word	0x00402769
  402748:	0040276f 	.word	0x0040276f
  40274c:	00402773 	.word	0x00402773
  402750:	00402777 	.word	0x00402777
  402754:	0040277b 	.word	0x0040277b
  402758:	0040277f 	.word	0x0040277f
		return OSC_SLCK_32K_RC_HZ;
  40275c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402760:	e010      	b.n	402784 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  402762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402766:	e00d      	b.n	402784 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402768:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40276c:	e00a      	b.n	402784 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40276e:	4b08      	ldr	r3, [pc, #32]	; (402790 <osc_get_rate+0x68>)
  402770:	e008      	b.n	402784 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402772:	4b08      	ldr	r3, [pc, #32]	; (402794 <osc_get_rate+0x6c>)
  402774:	e006      	b.n	402784 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402776:	4b08      	ldr	r3, [pc, #32]	; (402798 <osc_get_rate+0x70>)
  402778:	e004      	b.n	402784 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40277a:	4b08      	ldr	r3, [pc, #32]	; (40279c <osc_get_rate+0x74>)
  40277c:	e002      	b.n	402784 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40277e:	4b06      	ldr	r3, [pc, #24]	; (402798 <osc_get_rate+0x70>)
  402780:	e000      	b.n	402784 <osc_get_rate+0x5c>
	return 0;
  402782:	2300      	movs	r3, #0
}
  402784:	4618      	mov	r0, r3
  402786:	370c      	adds	r7, #12
  402788:	46bd      	mov	sp, r7
  40278a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40278e:	4770      	bx	lr
  402790:	003d0900 	.word	0x003d0900
  402794:	007a1200 	.word	0x007a1200
  402798:	00b71b00 	.word	0x00b71b00
  40279c:	00f42400 	.word	0x00f42400

004027a0 <sysclk_get_main_hz>:
{
  4027a0:	b580      	push	{r7, lr}
  4027a2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4027a4:	2006      	movs	r0, #6
  4027a6:	4b05      	ldr	r3, [pc, #20]	; (4027bc <sysclk_get_main_hz+0x1c>)
  4027a8:	4798      	blx	r3
  4027aa:	4602      	mov	r2, r0
  4027ac:	4613      	mov	r3, r2
  4027ae:	005b      	lsls	r3, r3, #1
  4027b0:	4413      	add	r3, r2
  4027b2:	009b      	lsls	r3, r3, #2
  4027b4:	085b      	lsrs	r3, r3, #1
}
  4027b6:	4618      	mov	r0, r3
  4027b8:	bd80      	pop	{r7, pc}
  4027ba:	bf00      	nop
  4027bc:	00402729 	.word	0x00402729

004027c0 <sysclk_get_cpu_hz>:
{
  4027c0:	b580      	push	{r7, lr}
  4027c2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4027c4:	4b02      	ldr	r3, [pc, #8]	; (4027d0 <sysclk_get_cpu_hz+0x10>)
  4027c6:	4798      	blx	r3
  4027c8:	4603      	mov	r3, r0
}
  4027ca:	4618      	mov	r0, r3
  4027cc:	bd80      	pop	{r7, pc}
  4027ce:	bf00      	nop
  4027d0:	004027a1 	.word	0x004027a1

004027d4 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4027d4:	b580      	push	{r7, lr}
  4027d6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4027d8:	4b02      	ldr	r3, [pc, #8]	; (4027e4 <sysclk_get_peripheral_hz+0x10>)
  4027da:	4798      	blx	r3
  4027dc:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4027de:	4618      	mov	r0, r3
  4027e0:	bd80      	pop	{r7, pc}
  4027e2:	bf00      	nop
  4027e4:	004027a1 	.word	0x004027a1

004027e8 <can0_configure_pins_local>:
#ifndef pdMS_TO_TICKS
#define pdMS_TO_TICKS(ms) ((TickType_t)((ms) / portTICK_RATE_MS)) // Convert ms to OS ticks
#endif

static void can0_configure_pins_local(void)
{
  4027e8:	b598      	push	{r3, r4, r7, lr}
  4027ea:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_PIOB); // Enable PIOB clock for CAN0 pins
  4027ec:	200a      	movs	r0, #10
  4027ee:	4b09      	ldr	r3, [pc, #36]	; (402814 <can0_configure_pins_local+0x2c>)
  4027f0:	4798      	blx	r3
	pio_configure(PIOB, PIO_PERIPH_A, PIO_PB2A_CANTX0, 0); // PB2 as CANTX0
  4027f2:	2300      	movs	r3, #0
  4027f4:	2204      	movs	r2, #4
  4027f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4027fa:	4807      	ldr	r0, [pc, #28]	; (402818 <can0_configure_pins_local+0x30>)
  4027fc:	4c07      	ldr	r4, [pc, #28]	; (40281c <can0_configure_pins_local+0x34>)
  4027fe:	47a0      	blx	r4
	pio_configure(PIOB, PIO_PERIPH_A, PIO_PB3A_CANRX0, 0); // PB3 as CANRX0
  402800:	2300      	movs	r3, #0
  402802:	2208      	movs	r2, #8
  402804:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402808:	4803      	ldr	r0, [pc, #12]	; (402818 <can0_configure_pins_local+0x30>)
  40280a:	4c04      	ldr	r4, [pc, #16]	; (40281c <can0_configure_pins_local+0x34>)
  40280c:	47a0      	blx	r4
}
  40280e:	bf00      	nop
  402810:	bd98      	pop	{r3, r4, r7, pc}
  402812:	bf00      	nop
  402814:	00403d2d 	.word	0x00403d2d
  402818:	400e1000 	.word	0x400e1000
  40281c:	00403c15 	.word	0x00403c15

00402820 <can_app_init>:
CAN_BR_SMP_ONCE; // single sampling
can_enable(p_can);
}

bool can_app_init(void)
{
  402820:	b5f0      	push	{r4, r5, r6, r7, lr}
  402822:	b093      	sub	sp, #76	; 0x4c
  402824:	af00      	add	r7, sp, #0
	uint32_t mck = sysclk_get_peripheral_hz(); // Peripheral clock frequency
  402826:	4b3a      	ldr	r3, [pc, #232]	; (402910 <can_app_init+0xf0>)
  402828:	4798      	blx	r3
  40282a:	6478      	str	r0, [r7, #68]	; 0x44
	if (mck == 0) return false; // Invalid clock frequency
  40282c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  40282e:	2b00      	cmp	r3, #0
  402830:	d101      	bne.n	402836 <can_app_init+0x16>
  402832:	2300      	movs	r3, #0
  402834:	e067      	b.n	402906 <can_app_init+0xe6>
	
	// Expected: mck = 96,000,000 Hz for proper 500kbps CAN timing
	
	pmc_enable_periph_clk(ID_CAN0); // Enable CAN0 peripheral clock
  402836:	2025      	movs	r0, #37	; 0x25
  402838:	4b36      	ldr	r3, [pc, #216]	; (402914 <can_app_init+0xf4>)
  40283a:	4798      	blx	r3
	can0_configure_pins_local(); // Route pins to CAN peripheral
  40283c:	4b36      	ldr	r3, [pc, #216]	; (402918 <can_app_init+0xf8>)
  40283e:	4798      	blx	r3
	
	// Add delay after pin configuration to ensure stability
	delay_ms(10);
  402840:	4b36      	ldr	r3, [pc, #216]	; (40291c <can_app_init+0xfc>)
  402842:	4798      	blx	r3
  402844:	4603      	mov	r3, r0
  402846:	4619      	mov	r1, r3
  402848:	f04f 0200 	mov.w	r2, #0
  40284c:	460b      	mov	r3, r1
  40284e:	4614      	mov	r4, r2
  402850:	00a6      	lsls	r6, r4, #2
  402852:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  402856:	009d      	lsls	r5, r3, #2
  402858:	462b      	mov	r3, r5
  40285a:	4634      	mov	r4, r6
  40285c:	185b      	adds	r3, r3, r1
  40285e:	eb44 0402 	adc.w	r4, r4, r2
  402862:	18db      	adds	r3, r3, r3
  402864:	eb44 0404 	adc.w	r4, r4, r4
  402868:	4619      	mov	r1, r3
  40286a:	4622      	mov	r2, r4
  40286c:	f243 63af 	movw	r3, #13999	; 0x36af
  402870:	f04f 0400 	mov.w	r4, #0
  402874:	18cd      	adds	r5, r1, r3
  402876:	eb42 0604 	adc.w	r6, r2, r4
  40287a:	4628      	mov	r0, r5
  40287c:	4631      	mov	r1, r6
  40287e:	4c28      	ldr	r4, [pc, #160]	; (402920 <can_app_init+0x100>)
  402880:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402884:	f04f 0300 	mov.w	r3, #0
  402888:	47a0      	blx	r4
  40288a:	4603      	mov	r3, r0
  40288c:	460c      	mov	r4, r1
  40288e:	4618      	mov	r0, r3
  402890:	4b24      	ldr	r3, [pc, #144]	; (402924 <can_app_init+0x104>)
  402892:	4798      	blx	r3
	
	// Initialize CAN controller with proper baudrate constant
	if (!can_init(CAN0, mck, CAN_BPS_500K)) {
  402894:	f640 32b8 	movw	r2, #3000	; 0xbb8
  402898:	6c79      	ldr	r1, [r7, #68]	; 0x44
  40289a:	4823      	ldr	r0, [pc, #140]	; (402928 <can_app_init+0x108>)
  40289c:	4b23      	ldr	r3, [pc, #140]	; (40292c <can_app_init+0x10c>)
  40289e:	4798      	blx	r3
  4028a0:	4603      	mov	r3, r0
  4028a2:	2b00      	cmp	r3, #0
  4028a4:	d101      	bne.n	4028aa <can_app_init+0x8a>
		return false; // CAN baudrate configuration failed
  4028a6:	2300      	movs	r3, #0
  4028a8:	e02d      	b.n	402906 <can_app_init+0xe6>
	}
	
	
	can_reset_all_mailbox(CAN0); // Reset all mailboxes to known state
  4028aa:	481f      	ldr	r0, [pc, #124]	; (402928 <can_app_init+0x108>)
  4028ac:	4b20      	ldr	r3, [pc, #128]	; (402930 <can_app_init+0x110>)
  4028ae:	4798      	blx	r3
	
	/* Configure a generic RX mailbox 0 - ACCEPT ALL MESSAGES for testing */
	can_mb_conf_t mb;
	mb.ul_mb_idx = 0; // Mailbox index 0 for RX
  4028b0:	2300      	movs	r3, #0
  4028b2:	627b      	str	r3, [r7, #36]	; 0x24
	mb.uc_obj_type = CAN_MB_RX_MODE; // Receive mode
  4028b4:	2301      	movs	r3, #1
  4028b6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	mb.uc_id_ver = 0; // Standard ID (11-bit)
  4028ba:	2300      	movs	r3, #0
  4028bc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	mb.ul_id_msk = 0; // NO MASK - Accept all messages (for loopback test compatibility)
  4028c0:	2300      	movs	r3, #0
  4028c2:	633b      	str	r3, [r7, #48]	; 0x30
	mb.ul_id = 0; // Don't filter on specific ID
  4028c4:	2300      	movs	r3, #0
  4028c6:	637b      	str	r3, [r7, #52]	; 0x34
	mb.uc_length = 8; // Set MDLC before arming to avoid undefined length
  4028c8:	2308      	movs	r3, #8
  4028ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	
	
	can_mailbox_init(CAN0, &mb); // Apply configuration
  4028ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4028d2:	4619      	mov	r1, r3
  4028d4:	4814      	ldr	r0, [pc, #80]	; (402928 <can_app_init+0x108>)
  4028d6:	4b17      	ldr	r3, [pc, #92]	; (402934 <can_app_init+0x114>)
  4028d8:	4798      	blx	r3
	// Arm RX mailbox 0 to start receiving
	can_mailbox_send_transfer_cmd(CAN0, &mb);
  4028da:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4028de:	4619      	mov	r1, r3
  4028e0:	4811      	ldr	r0, [pc, #68]	; (402928 <can_app_init+0x108>)
  4028e2:	4b15      	ldr	r3, [pc, #84]	; (402938 <can_app_init+0x118>)
  4028e4:	4798      	blx	r3
	
	
	// Initialize TX mailbox 1 for future use
	can_mb_conf_t tx_init;
	tx_init.ul_mb_idx = 1; // Use mailbox 1 for TX
  4028e6:	2301      	movs	r3, #1
  4028e8:	607b      	str	r3, [r7, #4]
	tx_init.uc_obj_type = CAN_MB_TX_MODE; // Transmit mode
  4028ea:	2303      	movs	r3, #3
  4028ec:	723b      	strb	r3, [r7, #8]
	tx_init.uc_tx_prio = 15; // High priority
  4028ee:	230f      	movs	r3, #15
  4028f0:	72fb      	strb	r3, [r7, #11]
	tx_init.uc_id_ver = 0; // Standard ID
  4028f2:	2300      	movs	r3, #0
  4028f4:	727b      	strb	r3, [r7, #9]
	tx_init.ul_id_msk = 0; // Not used for TX
  4028f6:	2300      	movs	r3, #0
  4028f8:	613b      	str	r3, [r7, #16]
	can_mailbox_init(CAN0, &tx_init); // Configure TX mailbox
  4028fa:	1d3b      	adds	r3, r7, #4
  4028fc:	4619      	mov	r1, r3
  4028fe:	480a      	ldr	r0, [pc, #40]	; (402928 <can_app_init+0x108>)
  402900:	4b0c      	ldr	r3, [pc, #48]	; (402934 <can_app_init+0x114>)
  402902:	4798      	blx	r3
	
	
	
	return true;
  402904:	2301      	movs	r3, #1
}
  402906:	4618      	mov	r0, r3
  402908:	374c      	adds	r7, #76	; 0x4c
  40290a:	46bd      	mov	sp, r7
  40290c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40290e:	bf00      	nop
  402910:	004027d5 	.word	0x004027d5
  402914:	00403d2d 	.word	0x00403d2d
  402918:	004027e9 	.word	0x004027e9
  40291c:	004027c1 	.word	0x004027c1
  402920:	00403db1 	.word	0x00403db1
  402924:	20000001 	.word	0x20000001
  402928:	40010000 	.word	0x40010000
  40292c:	00403589 	.word	0x00403589
  402930:	00403995 	.word	0x00403995
  402934:	004036f3 	.word	0x004036f3
  402938:	004036bb 	.word	0x004036bb

0040293c <can_app_tx>:
	return (actual_bitrate >= (expected_bitrate - tolerance)) && 
	       (actual_bitrate <= (expected_bitrate + tolerance));
}

bool can_app_tx(uint32_t id, const uint8_t *data, uint8_t len)
{
  40293c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  402940:	b098      	sub	sp, #96	; 0x60
  402942:	af00      	add	r7, sp, #0
  402944:	60f8      	str	r0, [r7, #12]
  402946:	60b9      	str	r1, [r7, #8]
  402948:	4613      	mov	r3, r2
  40294a:	71fb      	strb	r3, [r7, #7]
	// First, reset the TX mailbox to ensure it's in a clean state
	can_mb_conf_t reset_mb;
	reset_mb.ul_mb_idx = 1;
  40294c:	2301      	movs	r3, #1
  40294e:	637b      	str	r3, [r7, #52]	; 0x34
	reset_mb.uc_obj_type = CAN_MB_DISABLE_MODE; // Disable first
  402950:	2300      	movs	r3, #0
  402952:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	can_mailbox_init(CAN0, &reset_mb);
  402956:	f107 0334 	add.w	r3, r7, #52	; 0x34
  40295a:	4619      	mov	r1, r3
  40295c:	485d      	ldr	r0, [pc, #372]	; (402ad4 <can_app_tx+0x198>)
  40295e:	4b5e      	ldr	r3, [pc, #376]	; (402ad8 <can_app_tx+0x19c>)
  402960:	4798      	blx	r3
	
	// Small delay to ensure reset takes effect
	delay_ms(1);
  402962:	4b5e      	ldr	r3, [pc, #376]	; (402adc <can_app_tx+0x1a0>)
  402964:	4798      	blx	r3
  402966:	4603      	mov	r3, r0
  402968:	f04f 0400 	mov.w	r4, #0
  40296c:	f243 61af 	movw	r1, #13999	; 0x36af
  402970:	f04f 0200 	mov.w	r2, #0
  402974:	eb13 0b01 	adds.w	fp, r3, r1
  402978:	eb44 0c02 	adc.w	ip, r4, r2
  40297c:	4658      	mov	r0, fp
  40297e:	4661      	mov	r1, ip
  402980:	4c57      	ldr	r4, [pc, #348]	; (402ae0 <can_app_tx+0x1a4>)
  402982:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402986:	f04f 0300 	mov.w	r3, #0
  40298a:	47a0      	blx	r4
  40298c:	4603      	mov	r3, r0
  40298e:	460c      	mov	r4, r1
  402990:	4618      	mov	r0, r3
  402992:	4b54      	ldr	r3, [pc, #336]	; (402ae4 <can_app_tx+0x1a8>)
  402994:	4798      	blx	r3
	
	// Now configure the TX mailbox properly. IMPORTANT: set ul_id before mailbox init
	can_mb_conf_t tx;
	tx.ul_mb_idx = 1; // Use mailbox 1 for TX
  402996:	2301      	movs	r3, #1
  402998:	617b      	str	r3, [r7, #20]
	tx.uc_obj_type = CAN_MB_TX_MODE; // Transmit mode
  40299a:	2303      	movs	r3, #3
  40299c:	763b      	strb	r3, [r7, #24]
	tx.uc_tx_prio = 15; // High priority
  40299e:	230f      	movs	r3, #15
  4029a0:	76fb      	strb	r3, [r7, #27]
	tx.uc_id_ver = 0; // Standard ID
  4029a2:	2300      	movs	r3, #0
  4029a4:	767b      	strb	r3, [r7, #25]
	tx.ul_id_msk = 0; // Not used for TX
  4029a6:	2300      	movs	r3, #0
  4029a8:	623b      	str	r3, [r7, #32]
	tx.ul_id = CAN_MID_MIDvA(id); // Set CAN identifier BEFORE init (driver may snapshot)
  4029aa:	68fb      	ldr	r3, [r7, #12]
  4029ac:	049a      	lsls	r2, r3, #18
  4029ae:	4b4e      	ldr	r3, [pc, #312]	; (402ae8 <can_app_tx+0x1ac>)
  4029b0:	4013      	ands	r3, r2
  4029b2:	627b      	str	r3, [r7, #36]	; 0x24
	can_mailbox_init(CAN0, &tx); // Configure mailbox
  4029b4:	f107 0314 	add.w	r3, r7, #20
  4029b8:	4619      	mov	r1, r3
  4029ba:	4846      	ldr	r0, [pc, #280]	; (402ad4 <can_app_tx+0x198>)
  4029bc:	4b46      	ldr	r3, [pc, #280]	; (402ad8 <can_app_tx+0x19c>)
  4029be:	4798      	blx	r3
	uint32_t dl = 0, dh = 0; // Data low/high 32-bit words
  4029c0:	2300      	movs	r3, #0
  4029c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  4029c4:	2300      	movs	r3, #0
  4029c6:	65bb      	str	r3, [r7, #88]	; 0x58
	for (uint8_t i=0;i<4 && i<len;i++) dl |= ((uint32_t)data[i]) << (i*8); // Pack first 4 bytes
  4029c8:	2300      	movs	r3, #0
  4029ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  4029ce:	e012      	b.n	4029f6 <can_app_tx+0xba>
  4029d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
  4029d4:	68ba      	ldr	r2, [r7, #8]
  4029d6:	4413      	add	r3, r2
  4029d8:	781b      	ldrb	r3, [r3, #0]
  4029da:	461a      	mov	r2, r3
  4029dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
  4029e0:	00db      	lsls	r3, r3, #3
  4029e2:	fa02 f303 	lsl.w	r3, r2, r3
  4029e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
  4029e8:	4313      	orrs	r3, r2
  4029ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  4029ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
  4029f0:	3301      	adds	r3, #1
  4029f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  4029f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
  4029fa:	2b03      	cmp	r3, #3
  4029fc:	d804      	bhi.n	402a08 <can_app_tx+0xcc>
  4029fe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
  402a02:	79fb      	ldrb	r3, [r7, #7]
  402a04:	429a      	cmp	r2, r3
  402a06:	d3e3      	bcc.n	4029d0 <can_app_tx+0x94>
	for (uint8_t i=4;i<8 && i<len;i++) dh |= ((uint32_t)data[i]) << ((i-4)*8); // Pack next 4 bytes
  402a08:	2304      	movs	r3, #4
  402a0a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  402a0e:	e013      	b.n	402a38 <can_app_tx+0xfc>
  402a10:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
  402a14:	68ba      	ldr	r2, [r7, #8]
  402a16:	4413      	add	r3, r2
  402a18:	781b      	ldrb	r3, [r3, #0]
  402a1a:	461a      	mov	r2, r3
  402a1c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
  402a20:	3b04      	subs	r3, #4
  402a22:	00db      	lsls	r3, r3, #3
  402a24:	fa02 f303 	lsl.w	r3, r2, r3
  402a28:	6dba      	ldr	r2, [r7, #88]	; 0x58
  402a2a:	4313      	orrs	r3, r2
  402a2c:	65bb      	str	r3, [r7, #88]	; 0x58
  402a2e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
  402a32:	3301      	adds	r3, #1
  402a34:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  402a38:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
  402a3c:	2b07      	cmp	r3, #7
  402a3e:	d804      	bhi.n	402a4a <can_app_tx+0x10e>
  402a40:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
  402a44:	79fb      	ldrb	r3, [r7, #7]
  402a46:	429a      	cmp	r2, r3
  402a48:	d3e2      	bcc.n	402a10 <can_app_tx+0xd4>
	tx.ul_datal = dl;
  402a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  402a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	tx.ul_datah = dh;
  402a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  402a50:	633b      	str	r3, [r7, #48]	; 0x30
	tx.uc_length = len; // DLC
  402a52:	79fb      	ldrb	r3, [r7, #7]
  402a54:	76bb      	strb	r3, [r7, #26]
	
	if (can_mailbox_write(CAN0, &tx) != CAN_MAILBOX_TRANSFER_OK) {
  402a56:	f107 0314 	add.w	r3, r7, #20
  402a5a:	4619      	mov	r1, r3
  402a5c:	481d      	ldr	r0, [pc, #116]	; (402ad4 <can_app_tx+0x198>)
  402a5e:	4b23      	ldr	r3, [pc, #140]	; (402aec <can_app_tx+0x1b0>)
  402a60:	4798      	blx	r3
  402a62:	4603      	mov	r3, r0
  402a64:	2b00      	cmp	r3, #0
  402a66:	d001      	beq.n	402a6c <can_app_tx+0x130>
		return false; // Load MB failed
  402a68:	2300      	movs	r3, #0
  402a6a:	e02e      	b.n	402aca <can_app_tx+0x18e>
	}
	
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB1); // Trigger transmission
  402a6c:	2102      	movs	r1, #2
  402a6e:	4819      	ldr	r0, [pc, #100]	; (402ad4 <can_app_tx+0x198>)
  402a70:	4b1f      	ldr	r3, [pc, #124]	; (402af0 <can_app_tx+0x1b4>)
  402a72:	4798      	blx	r3
	
	// Wait for transmission to complete
	delay_ms(10);
  402a74:	4b19      	ldr	r3, [pc, #100]	; (402adc <can_app_tx+0x1a0>)
  402a76:	4798      	blx	r3
  402a78:	4603      	mov	r3, r0
  402a7a:	4619      	mov	r1, r3
  402a7c:	f04f 0200 	mov.w	r2, #0
  402a80:	460b      	mov	r3, r1
  402a82:	4614      	mov	r4, r2
  402a84:	00a6      	lsls	r6, r4, #2
  402a86:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  402a8a:	009d      	lsls	r5, r3, #2
  402a8c:	462b      	mov	r3, r5
  402a8e:	4634      	mov	r4, r6
  402a90:	185b      	adds	r3, r3, r1
  402a92:	eb44 0402 	adc.w	r4, r4, r2
  402a96:	18db      	adds	r3, r3, r3
  402a98:	eb44 0404 	adc.w	r4, r4, r4
  402a9c:	4619      	mov	r1, r3
  402a9e:	4622      	mov	r2, r4
  402aa0:	f243 63af 	movw	r3, #13999	; 0x36af
  402aa4:	f04f 0400 	mov.w	r4, #0
  402aa8:	18cd      	adds	r5, r1, r3
  402aaa:	eb42 0604 	adc.w	r6, r2, r4
  402aae:	4628      	mov	r0, r5
  402ab0:	4631      	mov	r1, r6
  402ab2:	4c0b      	ldr	r4, [pc, #44]	; (402ae0 <can_app_tx+0x1a4>)
  402ab4:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402ab8:	f04f 0300 	mov.w	r3, #0
  402abc:	47a0      	blx	r4
  402abe:	4603      	mov	r3, r0
  402ac0:	460c      	mov	r4, r1
  402ac2:	4618      	mov	r0, r3
  402ac4:	4b07      	ldr	r3, [pc, #28]	; (402ae4 <can_app_tx+0x1a8>)
  402ac6:	4798      	blx	r3
	
	return true;
  402ac8:	2301      	movs	r3, #1
}
  402aca:	4618      	mov	r0, r3
  402acc:	3760      	adds	r7, #96	; 0x60
  402ace:	46bd      	mov	sp, r7
  402ad0:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  402ad4:	40010000 	.word	0x40010000
  402ad8:	004036f3 	.word	0x004036f3
  402adc:	004027c1 	.word	0x004027c1
  402ae0:	00403db1 	.word	0x00403db1
  402ae4:	20000001 	.word	0x20000001
  402ae8:	1ffc0000 	.word	0x1ffc0000
  402aec:	004038dd 	.word	0x004038dd
  402af0:	00403669 	.word	0x00403669

00402af4 <can_app_reset>:


bool can_app_reset(void)
{
  402af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402af8:	b089      	sub	sp, #36	; 0x24
  402afa:	af00      	add	r7, sp, #0
	
	can_disable(CAN0);
  402afc:	483d      	ldr	r0, [pc, #244]	; (402bf4 <can_app_reset+0x100>)
  402afe:	4b3e      	ldr	r3, [pc, #248]	; (402bf8 <can_app_reset+0x104>)
  402b00:	4798      	blx	r3
	delay_ms(10);
  402b02:	4b3e      	ldr	r3, [pc, #248]	; (402bfc <can_app_reset+0x108>)
  402b04:	4798      	blx	r3
  402b06:	4603      	mov	r3, r0
  402b08:	4619      	mov	r1, r3
  402b0a:	f04f 0200 	mov.w	r2, #0
  402b0e:	460b      	mov	r3, r1
  402b10:	4614      	mov	r4, r2
  402b12:	ea4f 0984 	mov.w	r9, r4, lsl #2
  402b16:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  402b1a:	ea4f 0883 	mov.w	r8, r3, lsl #2
  402b1e:	4643      	mov	r3, r8
  402b20:	464c      	mov	r4, r9
  402b22:	185b      	adds	r3, r3, r1
  402b24:	eb44 0402 	adc.w	r4, r4, r2
  402b28:	18db      	adds	r3, r3, r3
  402b2a:	eb44 0404 	adc.w	r4, r4, r4
  402b2e:	4619      	mov	r1, r3
  402b30:	4622      	mov	r2, r4
  402b32:	f243 63af 	movw	r3, #13999	; 0x36af
  402b36:	f04f 0400 	mov.w	r4, #0
  402b3a:	eb11 0803 	adds.w	r8, r1, r3
  402b3e:	eb42 0904 	adc.w	r9, r2, r4
  402b42:	4640      	mov	r0, r8
  402b44:	4649      	mov	r1, r9
  402b46:	4c2e      	ldr	r4, [pc, #184]	; (402c00 <can_app_reset+0x10c>)
  402b48:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402b4c:	f04f 0300 	mov.w	r3, #0
  402b50:	47a0      	blx	r4
  402b52:	4603      	mov	r3, r0
  402b54:	460c      	mov	r4, r1
  402b56:	4618      	mov	r0, r3
  402b58:	4b2a      	ldr	r3, [pc, #168]	; (402c04 <can_app_reset+0x110>)
  402b5a:	4798      	blx	r3
	can_enable(CAN0);
  402b5c:	4825      	ldr	r0, [pc, #148]	; (402bf4 <can_app_reset+0x100>)
  402b5e:	4b2a      	ldr	r3, [pc, #168]	; (402c08 <can_app_reset+0x114>)
  402b60:	4798      	blx	r3
	delay_ms(10);
  402b62:	4b26      	ldr	r3, [pc, #152]	; (402bfc <can_app_reset+0x108>)
  402b64:	4798      	blx	r3
  402b66:	4603      	mov	r3, r0
  402b68:	4619      	mov	r1, r3
  402b6a:	f04f 0200 	mov.w	r2, #0
  402b6e:	460b      	mov	r3, r1
  402b70:	4614      	mov	r4, r2
  402b72:	00a6      	lsls	r6, r4, #2
  402b74:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  402b78:	009d      	lsls	r5, r3, #2
  402b7a:	462b      	mov	r3, r5
  402b7c:	4634      	mov	r4, r6
  402b7e:	185b      	adds	r3, r3, r1
  402b80:	eb44 0402 	adc.w	r4, r4, r2
  402b84:	18db      	adds	r3, r3, r3
  402b86:	eb44 0404 	adc.w	r4, r4, r4
  402b8a:	4619      	mov	r1, r3
  402b8c:	4622      	mov	r2, r4
  402b8e:	f243 63af 	movw	r3, #13999	; 0x36af
  402b92:	f04f 0400 	mov.w	r4, #0
  402b96:	18cd      	adds	r5, r1, r3
  402b98:	eb42 0604 	adc.w	r6, r2, r4
  402b9c:	4628      	mov	r0, r5
  402b9e:	4631      	mov	r1, r6
  402ba0:	4c17      	ldr	r4, [pc, #92]	; (402c00 <can_app_reset+0x10c>)
  402ba2:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402ba6:	f04f 0300 	mov.w	r3, #0
  402baa:	47a0      	blx	r4
  402bac:	4603      	mov	r3, r0
  402bae:	460c      	mov	r4, r1
  402bb0:	4618      	mov	r0, r3
  402bb2:	4b14      	ldr	r3, [pc, #80]	; (402c04 <can_app_reset+0x110>)
  402bb4:	4798      	blx	r3
		can_reset_all_mailbox(CAN0);
  402bb6:	480f      	ldr	r0, [pc, #60]	; (402bf4 <can_app_reset+0x100>)
  402bb8:	4b14      	ldr	r3, [pc, #80]	; (402c0c <can_app_reset+0x118>)
  402bba:	4798      	blx	r3
	can_mb_conf_t mb;
	mb.ul_mb_idx = 0; // Mailbox index 0 for RX
  402bbc:	2300      	movs	r3, #0
  402bbe:	603b      	str	r3, [r7, #0]
	mb.uc_obj_type = CAN_MB_RX_MODE; // Receive mode
  402bc0:	2301      	movs	r3, #1
  402bc2:	713b      	strb	r3, [r7, #4]
	mb.uc_id_ver = 0; // Standard ID (11-bit)
  402bc4:	2300      	movs	r3, #0
  402bc6:	717b      	strb	r3, [r7, #5]
	mb.ul_id_msk = CAN_MAM_MIDvA_Msk; // Mask for standard ID only
  402bc8:	4b11      	ldr	r3, [pc, #68]	; (402c10 <can_app_reset+0x11c>)
  402bca:	60fb      	str	r3, [r7, #12]
	mb.ul_id = CAN_MID_MIDvA(CAN_ID_POT_COMMAND); // Filter on command base ID
  402bcc:	f04f 6308 	mov.w	r3, #142606336	; 0x8800000
  402bd0:	613b      	str	r3, [r7, #16]
	can_mailbox_init(CAN0, &mb); // Apply configuration
  402bd2:	463b      	mov	r3, r7
  402bd4:	4619      	mov	r1, r3
  402bd6:	4807      	ldr	r0, [pc, #28]	; (402bf4 <can_app_reset+0x100>)
  402bd8:	4b0e      	ldr	r3, [pc, #56]	; (402c14 <can_app_reset+0x120>)
  402bda:	4798      	blx	r3
	// Arm RX mailbox 0 to start receiving after reset
	can_mailbox_send_transfer_cmd(CAN0, &mb);
  402bdc:	463b      	mov	r3, r7
  402bde:	4619      	mov	r1, r3
  402be0:	4804      	ldr	r0, [pc, #16]	; (402bf4 <can_app_reset+0x100>)
  402be2:	4b0d      	ldr	r3, [pc, #52]	; (402c18 <can_app_reset+0x124>)
  402be4:	4798      	blx	r3
	return true;	
  402be6:	2301      	movs	r3, #1
}
  402be8:	4618      	mov	r0, r3
  402bea:	3724      	adds	r7, #36	; 0x24
  402bec:	46bd      	mov	sp, r7
  402bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402bf2:	bf00      	nop
  402bf4:	40010000 	.word	0x40010000
  402bf8:	00403631 	.word	0x00403631
  402bfc:	004027c1 	.word	0x004027c1
  402c00:	00403db1 	.word	0x00403db1
  402c04:	20000001 	.word	0x20000001
  402c08:	00403611 	.word	0x00403611
  402c0c:	00403995 	.word	0x00403995
  402c10:	1ffc0000 	.word	0x1ffc0000
  402c14:	004036f3 	.word	0x004036f3
  402c18:	004036bb 	.word	0x004036bb

00402c1c <can_rx_task>:
void can_rx_task(void *arg)
{
  402c1c:	b580      	push	{r7, lr}
  402c1e:	b090      	sub	sp, #64	; 0x40
  402c20:	af00      	add	r7, sp, #0
  402c22:	6078      	str	r0, [r7, #4]
	(void)arg; // Unused
	uint32_t error_count = 0;
  402c24:	2300      	movs	r3, #0
  402c26:	63fb      	str	r3, [r7, #60]	; 0x3c
	
	for (;;) {
		// Check CAN controller status first
		if (!can_app_get_status()) {
  402c28:	4b44      	ldr	r3, [pc, #272]	; (402d3c <can_rx_task+0x120>)
  402c2a:	4798      	blx	r3
  402c2c:	4603      	mov	r3, r0
  402c2e:	f083 0301 	eor.w	r3, r3, #1
  402c32:	b2db      	uxtb	r3, r3
  402c34:	2b00      	cmp	r3, #0
  402c36:	d00d      	beq.n	402c54 <can_rx_task+0x38>
			error_count++;
  402c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402c3a:	3301      	adds	r3, #1
  402c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (error_count > 100) { // After 100 consecutive errors, try to reinitialize
  402c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402c40:	2b64      	cmp	r3, #100	; 0x64
  402c42:	d903      	bls.n	402c4c <can_rx_task+0x30>
				can_app_reset();// Note: In a real system, you might want to reset the CAN controller here
  402c44:	4b3e      	ldr	r3, [pc, #248]	; (402d40 <can_rx_task+0x124>)
  402c46:	4798      	blx	r3
				error_count = 0;
  402c48:	2300      	movs	r3, #0
  402c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			vTaskDelay(pdMS_TO_TICKS(100)); // Wait longer on errors
  402c4c:	2064      	movs	r0, #100	; 0x64
  402c4e:	4b3d      	ldr	r3, [pc, #244]	; (402d44 <can_rx_task+0x128>)
  402c50:	4798      	blx	r3
			continue;
  402c52:	e072      	b.n	402d3a <can_rx_task+0x11e>
		}
		
		error_count = 0; // Reset error count on successful status check
  402c54:	2300      	movs	r3, #0
  402c56:	63fb      	str	r3, [r7, #60]	; 0x3c
		
		// Check if RX mailbox has data
		uint32_t mb_status = can_mailbox_get_status(CAN0, 0);
  402c58:	2100      	movs	r1, #0
  402c5a:	483b      	ldr	r0, [pc, #236]	; (402d48 <can_rx_task+0x12c>)
  402c5c:	4b3b      	ldr	r3, [pc, #236]	; (402d4c <can_rx_task+0x130>)
  402c5e:	4798      	blx	r3
  402c60:	6378      	str	r0, [r7, #52]	; 0x34
		if (mb_status & CAN_MSR_MRDY) { // If RX mailbox has data
  402c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  402c64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
  402c68:	2b00      	cmp	r3, #0
  402c6a:	d063      	beq.n	402d34 <can_rx_task+0x118>
			can_mb_conf_t rx;
			rx.ul_mb_idx = 0;
  402c6c:	2300      	movs	r3, #0
  402c6e:	60bb      	str	r3, [r7, #8]
			
			// Read mailbox with error checking
			if (can_mailbox_read(CAN0, &rx) == CAN_MAILBOX_TRANSFER_OK) {
  402c70:	f107 0308 	add.w	r3, r7, #8
  402c74:	4619      	mov	r1, r3
  402c76:	4834      	ldr	r0, [pc, #208]	; (402d48 <can_rx_task+0x12c>)
  402c78:	4b35      	ldr	r3, [pc, #212]	; (402d50 <can_rx_task+0x134>)
  402c7a:	4798      	blx	r3
  402c7c:	4603      	mov	r3, r0
  402c7e:	2b00      	cmp	r3, #0
  402c80:	d158      	bne.n	402d34 <can_rx_task+0x118>
				uint8_t len = (uint8_t)(rx.ul_status >> CAN_MSR_MDLC_Pos) & 0xF; // Extract DLC
  402c82:	693b      	ldr	r3, [r7, #16]
  402c84:	0c1b      	lsrs	r3, r3, #16
  402c86:	b2db      	uxtb	r3, r3
  402c88:	f003 030f 	and.w	r3, r3, #15
  402c8c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				if (len > 8) len = 8; // Sanity check on length
  402c90:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
  402c94:	2b08      	cmp	r3, #8
  402c96:	d902      	bls.n	402c9e <can_rx_task+0x82>
  402c98:	2308      	movs	r3, #8
  402c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				
				uint8_t data[8] = {0}; // Initialize to zero
  402c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
  402ca2:	2200      	movs	r2, #0
  402ca4:	601a      	str	r2, [r3, #0]
  402ca6:	605a      	str	r2, [r3, #4]
				// Unpack data words
				for (uint8_t i = 0; i < 4 && i < len; i++) {
  402ca8:	2300      	movs	r3, #0
  402caa:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  402cae:	e012      	b.n	402cd6 <can_rx_task+0xba>
					data[i] = (rx.ul_datal >> (i * 8)) & 0xFF;
  402cb0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
  402cb4:	6a39      	ldr	r1, [r7, #32]
  402cb6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
  402cba:	00d2      	lsls	r2, r2, #3
  402cbc:	fa21 f202 	lsr.w	r2, r1, r2
  402cc0:	b2d2      	uxtb	r2, r2
  402cc2:	f107 0140 	add.w	r1, r7, #64	; 0x40
  402cc6:	440b      	add	r3, r1
  402cc8:	f803 2c18 	strb.w	r2, [r3, #-24]
				for (uint8_t i = 0; i < 4 && i < len; i++) {
  402ccc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
  402cd0:	3301      	adds	r3, #1
  402cd2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  402cd6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
  402cda:	2b03      	cmp	r3, #3
  402cdc:	d805      	bhi.n	402cea <can_rx_task+0xce>
  402cde:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
  402ce2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
  402ce6:	429a      	cmp	r2, r3
  402ce8:	d3e2      	bcc.n	402cb0 <can_rx_task+0x94>
				}
				for (uint8_t i = 0; i < 4 && (i + 4) < len; i++) {
  402cea:	2300      	movs	r3, #0
  402cec:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  402cf0:	e013      	b.n	402d1a <can_rx_task+0xfe>
					data[4 + i] = (rx.ul_datah >> (i * 8)) & 0xFF;
  402cf2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
  402cf6:	3304      	adds	r3, #4
  402cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
  402cfa:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
  402cfe:	00d2      	lsls	r2, r2, #3
  402d00:	fa21 f202 	lsr.w	r2, r1, r2
  402d04:	b2d2      	uxtb	r2, r2
  402d06:	f107 0140 	add.w	r1, r7, #64	; 0x40
  402d0a:	440b      	add	r3, r1
  402d0c:	f803 2c18 	strb.w	r2, [r3, #-24]
				for (uint8_t i = 0; i < 4 && (i + 4) < len; i++) {
  402d10:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
  402d14:	3301      	adds	r3, #1
  402d16:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  402d1a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
  402d1e:	2b03      	cmp	r3, #3
  402d20:	d806      	bhi.n	402d30 <can_rx_task+0x114>
  402d22:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
  402d26:	1d1a      	adds	r2, r3, #4
  402d28:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
  402d2c:	429a      	cmp	r2, r3
  402d2e:	dbe0      	blt.n	402cf2 <can_rx_task+0xd6>
				}
				
				// Extract CAN ID and process based on message type
				uint32_t can_id = rx.ul_fid;//(rx.ul_id >> CAN_MID_MIDvA_Pos) & 0x7FFu;
  402d30:	69fb      	ldr	r3, [r7, #28]
  402d32:	633b      	str	r3, [r7, #48]	; 0x30
				// Note: Other message IDs are received but not processed in this task
				// This allows loopback test (ID 0x123) to be received successfully
			}
		}
		
		vTaskDelay(pdMS_TO_TICKS(5)); // Small delay to yield CPU time
  402d34:	2005      	movs	r0, #5
  402d36:	4b03      	ldr	r3, [pc, #12]	; (402d44 <can_rx_task+0x128>)
  402d38:	4798      	blx	r3
	for (;;) {
  402d3a:	e775      	b.n	402c28 <can_rx_task+0xc>
  402d3c:	00402d55 	.word	0x00402d55
  402d40:	00402af5 	.word	0x00402af5
  402d44:	00401675 	.word	0x00401675
  402d48:	40010000 	.word	0x40010000
  402d4c:	00403695 	.word	0x00403695
  402d50:	00403819 	.word	0x00403819

00402d54 <can_app_get_status>:
	}
}
bool can_app_get_status(void){
  402d54:	b480      	push	{r7}
  402d56:	b083      	sub	sp, #12
  402d58:	af00      	add	r7, sp, #0
	// Check if CAN controller is properly initialized and running
	if (CAN0->CAN_SR & CAN_SR_BOFF) {
  402d5a:	4b10      	ldr	r3, [pc, #64]	; (402d9c <can_app_get_status+0x48>)
  402d5c:	691b      	ldr	r3, [r3, #16]
  402d5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  402d62:	2b00      	cmp	r3, #0
  402d64:	d001      	beq.n	402d6a <can_app_get_status+0x16>
		return false; // CAN controller is in bus-off state (bad)
  402d66:	2300      	movs	r3, #0
  402d68:	e012      	b.n	402d90 <can_app_get_status+0x3c>
	}
	
	// Check if there are any error conditions
	uint32_t status = CAN0->CAN_SR;
  402d6a:	4b0c      	ldr	r3, [pc, #48]	; (402d9c <can_app_get_status+0x48>)
  402d6c:	691b      	ldr	r3, [r3, #16]
  402d6e:	607b      	str	r3, [r7, #4]
	if (status & (CAN_SR_ERRA | CAN_SR_WARN | CAN_SR_BOFF)) {
  402d70:	687b      	ldr	r3, [r7, #4]
  402d72:	f403 2330 	and.w	r3, r3, #720896	; 0xb0000
  402d76:	2b00      	cmp	r3, #0
  402d78:	d001      	beq.n	402d7e <can_app_get_status+0x2a>
		return false; // Error conditions present
  402d7a:	2300      	movs	r3, #0
  402d7c:	e008      	b.n	402d90 <can_app_get_status+0x3c>
	}
	
	// Check if CAN controller is enabled
	if (!(CAN0->CAN_MR & CAN_MR_CANEN)) {
  402d7e:	4b07      	ldr	r3, [pc, #28]	; (402d9c <can_app_get_status+0x48>)
  402d80:	681b      	ldr	r3, [r3, #0]
  402d82:	f003 0301 	and.w	r3, r3, #1
  402d86:	2b00      	cmp	r3, #0
  402d88:	d101      	bne.n	402d8e <can_app_get_status+0x3a>
		return false; // CAN controller not enabled
  402d8a:	2300      	movs	r3, #0
  402d8c:	e000      	b.n	402d90 <can_app_get_status+0x3c>
	}
	
	return true; // CAN is working properly
  402d8e:	2301      	movs	r3, #1
}
  402d90:	4618      	mov	r0, r3
  402d92:	370c      	adds	r7, #12
  402d94:	46bd      	mov	sp, r7
  402d96:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d9a:	4770      	bx	lr
  402d9c:	40010000 	.word	0x40010000

00402da0 <can_status_task>:
	return false; // Test failed
}


void can_status_task(void *arg)
{
  402da0:	b580      	push	{r7, lr}
  402da2:	b084      	sub	sp, #16
  402da4:	af00      	add	r7, sp, #0
  402da6:	6078      	str	r0, [r7, #4]
	(void)arg; // Unused
	uint32_t status_report_interval = 0;
  402da8:	2300      	movs	r3, #0
  402daa:	60fb      	str	r3, [r7, #12]
	
	for (;;) {
		// Check CAN status periodically
		bool can_ok = can_app_get_status();
  402dac:	4b0f      	ldr	r3, [pc, #60]	; (402dec <can_status_task+0x4c>)
  402dae:	4798      	blx	r3
  402db0:	4603      	mov	r3, r0
  402db2:	72fb      	strb	r3, [r7, #11]
		
		
		// Report status every 10 seconds (10000ms / 1000ms = 10 iterations)
		status_report_interval++;
  402db4:	68fb      	ldr	r3, [r7, #12]
  402db6:	3301      	adds	r3, #1
  402db8:	60fb      	str	r3, [r7, #12]
		if (status_report_interval >= 10) {
  402dba:	68fb      	ldr	r3, [r7, #12]
  402dbc:	2b09      	cmp	r3, #9
  402dbe:	d90f      	bls.n	402de0 <can_status_task+0x40>
			status_report_interval = 0;
  402dc0:	2300      	movs	r3, #0
  402dc2:	60fb      	str	r3, [r7, #12]
			
			// Send status message
			uint8_t status_data[2] = {0};
  402dc4:	2300      	movs	r3, #0
  402dc6:	813b      	strh	r3, [r7, #8]
			status_data[0] = can_ok ? 0x01 : 0x00; // Status byte
  402dc8:	7afb      	ldrb	r3, [r7, #11]
  402dca:	723b      	strb	r3, [r7, #8]
			status_data[1] = 0x00; // Reserved
  402dcc:	2300      	movs	r3, #0
  402dce:	727b      	strb	r3, [r7, #9]
			
			// Use the dedicated status ID
			can_app_tx(CAN_ID_STATUS, status_data, 2);
  402dd0:	f107 0308 	add.w	r3, r7, #8
  402dd4:	2202      	movs	r2, #2
  402dd6:	4619      	mov	r1, r3
  402dd8:	f44f 7000 	mov.w	r0, #512	; 0x200
  402ddc:	4b04      	ldr	r3, [pc, #16]	; (402df0 <can_status_task+0x50>)
  402dde:	4798      	blx	r3
		}
		
		vTaskDelay(pdMS_TO_TICKS(1000)); // Check every second
  402de0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402de4:	4b03      	ldr	r3, [pc, #12]	; (402df4 <can_status_task+0x54>)
  402de6:	4798      	blx	r3
	for (;;) {
  402de8:	e7e0      	b.n	402dac <can_status_task+0xc>
  402dea:	bf00      	nop
  402dec:	00402d55 	.word	0x00402d55
  402df0:	0040293d 	.word	0x0040293d
  402df4:	00401675 	.word	0x00401675

00402df8 <encoder_init>:
#define VELOCITY_WINDOW_MS         100     // Velocity calculation window in milliseconds
#define DIRECTION_CHANGE_DEBOUNCE_MS 20    // Direction change debounce time in milliseconds

// Encoder initialization
bool encoder_init(void)
{
  402df8:	b598      	push	{r3, r4, r7, lr}
  402dfa:	af00      	add	r7, sp, #0
    // Initialize encoder data structures
    encoder1_data.position = 0;
  402dfc:	4b32      	ldr	r3, [pc, #200]	; (402ec8 <encoder_init+0xd0>)
  402dfe:	2200      	movs	r2, #0
  402e00:	601a      	str	r2, [r3, #0]
    encoder1_data.velocity = 0;
  402e02:	4b31      	ldr	r3, [pc, #196]	; (402ec8 <encoder_init+0xd0>)
  402e04:	2200      	movs	r2, #0
  402e06:	605a      	str	r2, [r3, #4]
    encoder1_data.smoothed_velocity = 0;
  402e08:	4b2f      	ldr	r3, [pc, #188]	; (402ec8 <encoder_init+0xd0>)
  402e0a:	2200      	movs	r2, #0
  402e0c:	609a      	str	r2, [r3, #8]
    encoder1_data.direction = 0;
  402e0e:	4b2e      	ldr	r3, [pc, #184]	; (402ec8 <encoder_init+0xd0>)
  402e10:	2200      	movs	r2, #0
  402e12:	731a      	strb	r2, [r3, #12]
    encoder1_data.last_position = 0;
  402e14:	4b2c      	ldr	r3, [pc, #176]	; (402ec8 <encoder_init+0xd0>)
  402e16:	2200      	movs	r2, #0
  402e18:	611a      	str	r2, [r3, #16]
    encoder1_data.last_update_time = 0;
  402e1a:	4b2b      	ldr	r3, [pc, #172]	; (402ec8 <encoder_init+0xd0>)
  402e1c:	2200      	movs	r2, #0
  402e1e:	615a      	str	r2, [r3, #20]
    encoder1_data.last_direction_change = 0;
  402e20:	4b29      	ldr	r3, [pc, #164]	; (402ec8 <encoder_init+0xd0>)
  402e22:	2200      	movs	r2, #0
  402e24:	619a      	str	r2, [r3, #24]
    encoder1_data.pulse_count = 0;
  402e26:	4b28      	ldr	r3, [pc, #160]	; (402ec8 <encoder_init+0xd0>)
  402e28:	2200      	movs	r2, #0
  402e2a:	61da      	str	r2, [r3, #28]
    encoder1_data.velocity_window_start = 0;
  402e2c:	4b26      	ldr	r3, [pc, #152]	; (402ec8 <encoder_init+0xd0>)
  402e2e:	2200      	movs	r2, #0
  402e30:	621a      	str	r2, [r3, #32]
    encoder1_data.tc_channel = TC_QUADRATURE_CHANNEL_ENC1;
  402e32:	4b25      	ldr	r3, [pc, #148]	; (402ec8 <encoder_init+0xd0>)
  402e34:	2200      	movs	r2, #0
  402e36:	625a      	str	r2, [r3, #36]	; 0x24
    
    encoder2_data.position = 0;
  402e38:	4b24      	ldr	r3, [pc, #144]	; (402ecc <encoder_init+0xd4>)
  402e3a:	2200      	movs	r2, #0
  402e3c:	601a      	str	r2, [r3, #0]
    encoder2_data.velocity = 0;
  402e3e:	4b23      	ldr	r3, [pc, #140]	; (402ecc <encoder_init+0xd4>)
  402e40:	2200      	movs	r2, #0
  402e42:	605a      	str	r2, [r3, #4]
    encoder2_data.smoothed_velocity = 0;
  402e44:	4b21      	ldr	r3, [pc, #132]	; (402ecc <encoder_init+0xd4>)
  402e46:	2200      	movs	r2, #0
  402e48:	609a      	str	r2, [r3, #8]
    encoder2_data.direction = 0;
  402e4a:	4b20      	ldr	r3, [pc, #128]	; (402ecc <encoder_init+0xd4>)
  402e4c:	2200      	movs	r2, #0
  402e4e:	731a      	strb	r2, [r3, #12]
    encoder2_data.last_position = 0;
  402e50:	4b1e      	ldr	r3, [pc, #120]	; (402ecc <encoder_init+0xd4>)
  402e52:	2200      	movs	r2, #0
  402e54:	611a      	str	r2, [r3, #16]
    encoder2_data.last_update_time = 0;
  402e56:	4b1d      	ldr	r3, [pc, #116]	; (402ecc <encoder_init+0xd4>)
  402e58:	2200      	movs	r2, #0
  402e5a:	615a      	str	r2, [r3, #20]
    encoder2_data.last_direction_change = 0;
  402e5c:	4b1b      	ldr	r3, [pc, #108]	; (402ecc <encoder_init+0xd4>)
  402e5e:	2200      	movs	r2, #0
  402e60:	619a      	str	r2, [r3, #24]
    encoder2_data.pulse_count = 0;
  402e62:	4b1a      	ldr	r3, [pc, #104]	; (402ecc <encoder_init+0xd4>)
  402e64:	2200      	movs	r2, #0
  402e66:	61da      	str	r2, [r3, #28]
    encoder2_data.velocity_window_start = 0;
  402e68:	4b18      	ldr	r3, [pc, #96]	; (402ecc <encoder_init+0xd4>)
  402e6a:	2200      	movs	r2, #0
  402e6c:	621a      	str	r2, [r3, #32]
    encoder2_data.tc_channel = TC_QUADRATURE_CHANNEL_ENC2;
  402e6e:	4b17      	ldr	r3, [pc, #92]	; (402ecc <encoder_init+0xd4>)
  402e70:	2201      	movs	r2, #1
  402e72:	625a      	str	r2, [r3, #36]	; 0x24
    
    // Initialize TC quadrature decoder
    if (!encoder_tc_init()) {
  402e74:	4b16      	ldr	r3, [pc, #88]	; (402ed0 <encoder_init+0xd8>)
  402e76:	4798      	blx	r3
  402e78:	4603      	mov	r3, r0
  402e7a:	f083 0301 	eor.w	r3, r3, #1
  402e7e:	b2db      	uxtb	r3, r3
  402e80:	2b00      	cmp	r3, #0
  402e82:	d001      	beq.n	402e88 <encoder_init+0x90>
        return false;
  402e84:	2300      	movs	r3, #0
  402e86:	e01d      	b.n	402ec4 <encoder_init+0xcc>
    }
    
    // Enable PIO clocks for enable pins
    pmc_enable_periph_clk(ID_PIOD);
  402e88:	200c      	movs	r0, #12
  402e8a:	4b12      	ldr	r3, [pc, #72]	; (402ed4 <encoder_init+0xdc>)
  402e8c:	4798      	blx	r3
    
    // Configure enable pins as outputs and set them low (enable encoders)
    pio_configure(PIOD, PIO_OUTPUT_0, ENC1_ENABLE_PIN, PIO_DEFAULT);
  402e8e:	2300      	movs	r3, #0
  402e90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  402e94:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402e98:	480f      	ldr	r0, [pc, #60]	; (402ed8 <encoder_init+0xe0>)
  402e9a:	4c10      	ldr	r4, [pc, #64]	; (402edc <encoder_init+0xe4>)
  402e9c:	47a0      	blx	r4
    pio_clear(PIOD, ENC1_ENABLE_PIN);  // Enable encoder 1 (set low)
  402e9e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  402ea2:	480d      	ldr	r0, [pc, #52]	; (402ed8 <encoder_init+0xe0>)
  402ea4:	4b0e      	ldr	r3, [pc, #56]	; (402ee0 <encoder_init+0xe8>)
  402ea6:	4798      	blx	r3
    
    if (ENCODER2_AVAILABLE) {
        pio_configure(PIOD, PIO_OUTPUT_0, ENC2_ENABLE_PIN, PIO_DEFAULT);
  402ea8:	2300      	movs	r3, #0
  402eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  402eae:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402eb2:	4809      	ldr	r0, [pc, #36]	; (402ed8 <encoder_init+0xe0>)
  402eb4:	4c09      	ldr	r4, [pc, #36]	; (402edc <encoder_init+0xe4>)
  402eb6:	47a0      	blx	r4
        pio_clear(PIOD, ENC2_ENABLE_PIN);  // Enable encoder 2 (set low)
  402eb8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402ebc:	4806      	ldr	r0, [pc, #24]	; (402ed8 <encoder_init+0xe0>)
  402ebe:	4b08      	ldr	r3, [pc, #32]	; (402ee0 <encoder_init+0xe8>)
  402ec0:	4798      	blx	r3
    }
    
    return true;
  402ec2:	2301      	movs	r3, #1
}
  402ec4:	4618      	mov	r0, r3
  402ec6:	bd98      	pop	{r3, r4, r7, pc}
  402ec8:	2000a624 	.word	0x2000a624
  402ecc:	2000a64c 	.word	0x2000a64c
  402ed0:	00402ee5 	.word	0x00402ee5
  402ed4:	00403d2d 	.word	0x00403d2d
  402ed8:	400e1400 	.word	0x400e1400
  402edc:	00403c15 	.word	0x00403c15
  402ee0:	00403a05 	.word	0x00403a05

00402ee4 <encoder_tc_init>:

// TC initialization
bool encoder_tc_init(void)
{
  402ee4:	b580      	push	{r7, lr}
  402ee6:	af00      	add	r7, sp, #0
    // Enable TC0 peripheral clock
    pmc_enable_periph_clk(ID_TC0);
  402ee8:	2015      	movs	r0, #21
  402eea:	4b0d      	ldr	r3, [pc, #52]	; (402f20 <encoder_tc_init+0x3c>)
  402eec:	4798      	blx	r3
    
    // Initialize TC0 channel 0 for ENC1
    if (!encoder_tc_channel_init(TC_QUADRATURE_CHANNEL_ENC1)) {
  402eee:	2000      	movs	r0, #0
  402ef0:	4b0c      	ldr	r3, [pc, #48]	; (402f24 <encoder_tc_init+0x40>)
  402ef2:	4798      	blx	r3
  402ef4:	4603      	mov	r3, r0
  402ef6:	f083 0301 	eor.w	r3, r3, #1
  402efa:	b2db      	uxtb	r3, r3
  402efc:	2b00      	cmp	r3, #0
  402efe:	d001      	beq.n	402f04 <encoder_tc_init+0x20>
        return false;
  402f00:	2300      	movs	r3, #0
  402f02:	e00b      	b.n	402f1c <encoder_tc_init+0x38>
    }
    
    // Initialize TC0 channel 1 for ENC2 if available
    if (ENCODER2_AVAILABLE) {
        if (!encoder_tc_channel_init(TC_QUADRATURE_CHANNEL_ENC2)) {
  402f04:	2001      	movs	r0, #1
  402f06:	4b07      	ldr	r3, [pc, #28]	; (402f24 <encoder_tc_init+0x40>)
  402f08:	4798      	blx	r3
  402f0a:	4603      	mov	r3, r0
  402f0c:	f083 0301 	eor.w	r3, r3, #1
  402f10:	b2db      	uxtb	r3, r3
  402f12:	2b00      	cmp	r3, #0
  402f14:	d001      	beq.n	402f1a <encoder_tc_init+0x36>
            return false;
  402f16:	2300      	movs	r3, #0
  402f18:	e000      	b.n	402f1c <encoder_tc_init+0x38>
        }
    }
    
    return true;
  402f1a:	2301      	movs	r3, #1
}
  402f1c:	4618      	mov	r0, r3
  402f1e:	bd80      	pop	{r7, pc}
  402f20:	00403d2d 	.word	0x00403d2d
  402f24:	00402f29 	.word	0x00402f29

00402f28 <encoder_tc_channel_init>:

// TC channel initialization
bool encoder_tc_channel_init(uint32_t channel)
{
  402f28:	b590      	push	{r4, r7, lr}
  402f2a:	b083      	sub	sp, #12
  402f2c:	af00      	add	r7, sp, #0
  402f2e:	6078      	str	r0, [r7, #4]
    // Configure PIO for TC TIOA and TIOB pins (matching pinconfig_workhead_interface_pinconfig.csv)
    if (channel == TC_QUADRATURE_CHANNEL_ENC1) {
  402f30:	687b      	ldr	r3, [r7, #4]
  402f32:	2b00      	cmp	r3, #0
  402f34:	d10e      	bne.n	402f54 <encoder_tc_channel_init+0x2c>
        // Configure PA5 as TIOA0 and PA1 as TIOB0
        pio_configure(PIOA, PIO_PERIPH_A, PIO_PA5, PIO_DEFAULT);  // TIOA0 (pin 52)
  402f36:	2300      	movs	r3, #0
  402f38:	2220      	movs	r2, #32
  402f3a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f3e:	4824      	ldr	r0, [pc, #144]	; (402fd0 <encoder_tc_channel_init+0xa8>)
  402f40:	4c24      	ldr	r4, [pc, #144]	; (402fd4 <encoder_tc_channel_init+0xac>)
  402f42:	47a0      	blx	r4
        pio_configure(PIOA, PIO_PERIPH_A, PIO_PA1, PIO_DEFAULT);  // TIOB0 (pin 70)
  402f44:	2300      	movs	r3, #0
  402f46:	2202      	movs	r2, #2
  402f48:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f4c:	4820      	ldr	r0, [pc, #128]	; (402fd0 <encoder_tc_channel_init+0xa8>)
  402f4e:	4c21      	ldr	r4, [pc, #132]	; (402fd4 <encoder_tc_channel_init+0xac>)
  402f50:	47a0      	blx	r4
  402f52:	e015      	b.n	402f80 <encoder_tc_channel_init+0x58>
    } else if (channel == TC_QUADRATURE_CHANNEL_ENC2) {
  402f54:	687b      	ldr	r3, [r7, #4]
  402f56:	2b01      	cmp	r3, #1
  402f58:	d110      	bne.n	402f7c <encoder_tc_channel_init+0x54>
        // Configure PA15 as TIOA1 and PA16 as TIOB1
        pio_configure(PIOA, PIO_PERIPH_A, PIO_PA15, PIO_DEFAULT); // TIOA1 (pin 33)
  402f5a:	2300      	movs	r3, #0
  402f5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402f60:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f64:	481a      	ldr	r0, [pc, #104]	; (402fd0 <encoder_tc_channel_init+0xa8>)
  402f66:	4c1b      	ldr	r4, [pc, #108]	; (402fd4 <encoder_tc_channel_init+0xac>)
  402f68:	47a0      	blx	r4
        pio_configure(PIOA, PIO_PERIPH_A, PIO_PA16, PIO_DEFAULT); // TIOB1 (pin 30)
  402f6a:	2300      	movs	r3, #0
  402f6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  402f70:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402f74:	4816      	ldr	r0, [pc, #88]	; (402fd0 <encoder_tc_channel_init+0xa8>)
  402f76:	4c17      	ldr	r4, [pc, #92]	; (402fd4 <encoder_tc_channel_init+0xac>)
  402f78:	47a0      	blx	r4
  402f7a:	e001      	b.n	402f80 <encoder_tc_channel_init+0x58>
    } else {
        return false;
  402f7c:	2300      	movs	r3, #0
  402f7e:	e022      	b.n	402fc6 <encoder_tc_channel_init+0x9e>
    }
    
    // Configure TC for quadrature decoder mode
    // Set up Block Mode Register for quadrature decoding (only once, not per channel)
    if (channel == TC_QUADRATURE_CHANNEL_ENC1) {
  402f80:	687b      	ldr	r3, [r7, #4]
  402f82:	2b00      	cmp	r3, #0
  402f84:	d103      	bne.n	402f8e <encoder_tc_channel_init+0x66>
        TC0->TC_BMR = TC_BMR_QDEN |                    // Enable quadrature decoder
  402f86:	4b14      	ldr	r3, [pc, #80]	; (402fd8 <encoder_tc_channel_init+0xb0>)
  402f88:	4a14      	ldr	r2, [pc, #80]	; (402fdc <encoder_tc_channel_init+0xb4>)
  402f8a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                      TC_BMR_MAXFILT(TC_QUADRATURE_FILTER); // Set filter value
    }
    
    // Configure channel mode register for quadrature decoder
    // For SAM4E TC quadrature decoder, use external clock from encoder signals
    if (channel == TC_QUADRATURE_CHANNEL_ENC1) {
  402f8e:	687b      	ldr	r3, [r7, #4]
  402f90:	2b00      	cmp	r3, #0
  402f92:	d107      	bne.n	402fa4 <encoder_tc_channel_init+0x7c>
        TC0->TC_CHANNEL[channel].TC_CMR = TC_CMR_TCCLKS_XC0 |  // Use XC0 clock (TIOA0)
  402f94:	4a10      	ldr	r2, [pc, #64]	; (402fd8 <encoder_tc_channel_init+0xb0>)
  402f96:	687b      	ldr	r3, [r7, #4]
  402f98:	019b      	lsls	r3, r3, #6
  402f9a:	4413      	add	r3, r2
  402f9c:	3304      	adds	r3, #4
  402f9e:	4a10      	ldr	r2, [pc, #64]	; (402fe0 <encoder_tc_channel_init+0xb8>)
  402fa0:	601a      	str	r2, [r3, #0]
  402fa2:	e009      	b.n	402fb8 <encoder_tc_channel_init+0x90>
                                      TC_CMR_BURST_NONE |       // No external gating
                                      TC_CMR_LDRA_RISING |      // Load on rising edge
                                      TC_CMR_LDRB_FALLING;      // Load on falling edge
    } else if (channel == TC_QUADRATURE_CHANNEL_ENC2) {
  402fa4:	687b      	ldr	r3, [r7, #4]
  402fa6:	2b01      	cmp	r3, #1
  402fa8:	d106      	bne.n	402fb8 <encoder_tc_channel_init+0x90>
        TC0->TC_CHANNEL[channel].TC_CMR = TC_CMR_TCCLKS_XC1 |  // Use XC1 clock (TIOA1)
  402faa:	4a0b      	ldr	r2, [pc, #44]	; (402fd8 <encoder_tc_channel_init+0xb0>)
  402fac:	687b      	ldr	r3, [r7, #4]
  402fae:	019b      	lsls	r3, r3, #6
  402fb0:	4413      	add	r3, r2
  402fb2:	3304      	adds	r3, #4
  402fb4:	4a0b      	ldr	r2, [pc, #44]	; (402fe4 <encoder_tc_channel_init+0xbc>)
  402fb6:	601a      	str	r2, [r3, #0]
                                      TC_CMR_LDRA_RISING |      // Load on rising edge
                                      TC_CMR_LDRB_FALLING;      // Load on falling edge
    }
    
    // Enable the channel
    TC0->TC_CHANNEL[channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  402fb8:	4a07      	ldr	r2, [pc, #28]	; (402fd8 <encoder_tc_channel_init+0xb0>)
  402fba:	687b      	ldr	r3, [r7, #4]
  402fbc:	019b      	lsls	r3, r3, #6
  402fbe:	4413      	add	r3, r2
  402fc0:	2205      	movs	r2, #5
  402fc2:	601a      	str	r2, [r3, #0]
    
    return true;
  402fc4:	2301      	movs	r3, #1
}
  402fc6:	4618      	mov	r0, r3
  402fc8:	370c      	adds	r7, #12
  402fca:	46bd      	mov	sp, r7
  402fcc:	bd90      	pop	{r4, r7, pc}
  402fce:	bf00      	nop
  402fd0:	400e0e00 	.word	0x400e0e00
  402fd4:	00403c15 	.word	0x00403c15
  402fd8:	40090000 	.word	0x40090000
  402fdc:	00380700 	.word	0x00380700
  402fe0:	00090005 	.word	0x00090005
  402fe4:	00090006 	.word	0x00090006

00402fe8 <encoder_tc_get_position>:

// Get current position from TC counter
uint32_t encoder_tc_get_position(uint32_t channel)
{
  402fe8:	b480      	push	{r7}
  402fea:	b083      	sub	sp, #12
  402fec:	af00      	add	r7, sp, #0
  402fee:	6078      	str	r0, [r7, #4]
    if (channel >= 3) return 0; // Invalid channel
  402ff0:	687b      	ldr	r3, [r7, #4]
  402ff2:	2b02      	cmp	r3, #2
  402ff4:	d901      	bls.n	402ffa <encoder_tc_get_position+0x12>
  402ff6:	2300      	movs	r3, #0
  402ff8:	e005      	b.n	403006 <encoder_tc_get_position+0x1e>
    
    // Read the current counter value
    return TC0->TC_CHANNEL[channel].TC_CV;
  402ffa:	4a06      	ldr	r2, [pc, #24]	; (403014 <encoder_tc_get_position+0x2c>)
  402ffc:	687b      	ldr	r3, [r7, #4]
  402ffe:	019b      	lsls	r3, r3, #6
  403000:	4413      	add	r3, r2
  403002:	3310      	adds	r3, #16
  403004:	681b      	ldr	r3, [r3, #0]
}
  403006:	4618      	mov	r0, r3
  403008:	370c      	adds	r7, #12
  40300a:	46bd      	mov	sp, r7
  40300c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403010:	4770      	bx	lr
  403012:	bf00      	nop
  403014:	40090000 	.word	0x40090000

00403018 <encoder_poll>:
    return (TC0->TC_QISR & TC_QISR_DIRCHG) ? 1 : 0;
}

// Poll encoder for position changes
void encoder_poll(encoder_data_t* enc_data)
{
  403018:	b580      	push	{r7, lr}
  40301a:	b086      	sub	sp, #24
  40301c:	af00      	add	r7, sp, #0
  40301e:	6078      	str	r0, [r7, #4]
    if (enc_data == &encoder2_data && !ENCODER2_AVAILABLE) {
        return;
    }
    
    // Get current time (using FreeRTOS tick count)
    uint32_t current_time = xTaskGetTickCount() * portTICK_PERIOD_MS;
  403020:	4b31      	ldr	r3, [pc, #196]	; (4030e8 <encoder_poll+0xd0>)
  403022:	4798      	blx	r3
  403024:	6138      	str	r0, [r7, #16]
    
    // Read current position from TC counter
    uint32_t current_position = encoder_tc_get_position(enc_data->tc_channel);
  403026:	687b      	ldr	r3, [r7, #4]
  403028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40302a:	4618      	mov	r0, r3
  40302c:	4b2f      	ldr	r3, [pc, #188]	; (4030ec <encoder_poll+0xd4>)
  40302e:	4798      	blx	r3
  403030:	60f8      	str	r0, [r7, #12]
    
    // Check for position change
    if (current_position != enc_data->last_position) {
  403032:	687b      	ldr	r3, [r7, #4]
  403034:	691a      	ldr	r2, [r3, #16]
  403036:	68fb      	ldr	r3, [r7, #12]
  403038:	429a      	cmp	r2, r3
  40303a:	d03e      	beq.n	4030ba <encoder_poll+0xa2>
        // Calculate direction based on position change
        uint8_t new_direction = 0;
  40303c:	2300      	movs	r3, #0
  40303e:	75fb      	strb	r3, [r7, #23]
        if (current_position > enc_data->last_position) {
  403040:	687b      	ldr	r3, [r7, #4]
  403042:	691a      	ldr	r2, [r3, #16]
  403044:	68fb      	ldr	r3, [r7, #12]
  403046:	429a      	cmp	r2, r3
  403048:	d202      	bcs.n	403050 <encoder_poll+0x38>
            new_direction = 1; // Forward
  40304a:	2301      	movs	r3, #1
  40304c:	75fb      	strb	r3, [r7, #23]
  40304e:	e006      	b.n	40305e <encoder_poll+0x46>
        } else if (current_position < enc_data->last_position) {
  403050:	687b      	ldr	r3, [r7, #4]
  403052:	691a      	ldr	r2, [r3, #16]
  403054:	68fb      	ldr	r3, [r7, #12]
  403056:	429a      	cmp	r2, r3
  403058:	d901      	bls.n	40305e <encoder_poll+0x46>
            new_direction = 2; // Reverse
  40305a:	2302      	movs	r3, #2
  40305c:	75fb      	strb	r3, [r7, #23]
        }
        
        // Update position
        enc_data->position = current_position;
  40305e:	687b      	ldr	r3, [r7, #4]
  403060:	68fa      	ldr	r2, [r7, #12]
  403062:	601a      	str	r2, [r3, #0]
        
        // Update direction only if change is allowed (debouncing)
        if (is_direction_change_allowed(enc_data, current_time, new_direction)) {
  403064:	7dfb      	ldrb	r3, [r7, #23]
  403066:	461a      	mov	r2, r3
  403068:	6939      	ldr	r1, [r7, #16]
  40306a:	6878      	ldr	r0, [r7, #4]
  40306c:	4b20      	ldr	r3, [pc, #128]	; (4030f0 <encoder_poll+0xd8>)
  40306e:	4798      	blx	r3
  403070:	4603      	mov	r3, r0
  403072:	2b00      	cmp	r3, #0
  403074:	d005      	beq.n	403082 <encoder_poll+0x6a>
            enc_data->direction = new_direction;
  403076:	687b      	ldr	r3, [r7, #4]
  403078:	7dfa      	ldrb	r2, [r7, #23]
  40307a:	731a      	strb	r2, [r3, #12]
            enc_data->last_direction_change = current_time;
  40307c:	687b      	ldr	r3, [r7, #4]
  40307e:	693a      	ldr	r2, [r7, #16]
  403080:	619a      	str	r2, [r3, #24]
        }
        
        // Calculate pulse count for velocity calculation
        uint32_t position_delta = (current_position > enc_data->last_position) ? 
  403082:	687b      	ldr	r3, [r7, #4]
  403084:	691a      	ldr	r2, [r3, #16]
                                 (current_position - enc_data->last_position) : 
  403086:	68fb      	ldr	r3, [r7, #12]
  403088:	429a      	cmp	r2, r3
  40308a:	d204      	bcs.n	403096 <encoder_poll+0x7e>
  40308c:	687b      	ldr	r3, [r7, #4]
  40308e:	691b      	ldr	r3, [r3, #16]
  403090:	68fa      	ldr	r2, [r7, #12]
  403092:	1ad3      	subs	r3, r2, r3
  403094:	e003      	b.n	40309e <encoder_poll+0x86>
                                 (enc_data->last_position - current_position);
  403096:	687b      	ldr	r3, [r7, #4]
  403098:	691a      	ldr	r2, [r3, #16]
                                 (current_position - enc_data->last_position) : 
  40309a:	68fb      	ldr	r3, [r7, #12]
  40309c:	1ad3      	subs	r3, r2, r3
        uint32_t position_delta = (current_position > enc_data->last_position) ? 
  40309e:	60bb      	str	r3, [r7, #8]
        enc_data->pulse_count += position_delta;
  4030a0:	687b      	ldr	r3, [r7, #4]
  4030a2:	69da      	ldr	r2, [r3, #28]
  4030a4:	68bb      	ldr	r3, [r7, #8]
  4030a6:	441a      	add	r2, r3
  4030a8:	687b      	ldr	r3, [r7, #4]
  4030aa:	61da      	str	r2, [r3, #28]
        
        enc_data->last_position = current_position;
  4030ac:	687b      	ldr	r3, [r7, #4]
  4030ae:	68fa      	ldr	r2, [r7, #12]
  4030b0:	611a      	str	r2, [r3, #16]
        enc_data->last_update_time = current_time;
  4030b2:	687b      	ldr	r3, [r7, #4]
  4030b4:	693a      	ldr	r2, [r7, #16]
  4030b6:	615a      	str	r2, [r3, #20]
  4030b8:	e008      	b.n	4030cc <encoder_poll+0xb4>
    } else {
        // No position change - check if we should reset direction to stopped
        if (current_time - enc_data->last_update_time > 50) { // 50ms timeout
  4030ba:	687b      	ldr	r3, [r7, #4]
  4030bc:	695b      	ldr	r3, [r3, #20]
  4030be:	693a      	ldr	r2, [r7, #16]
  4030c0:	1ad3      	subs	r3, r2, r3
  4030c2:	2b32      	cmp	r3, #50	; 0x32
  4030c4:	d902      	bls.n	4030cc <encoder_poll+0xb4>
            enc_data->direction = 0; // Stopped
  4030c6:	687b      	ldr	r3, [r7, #4]
  4030c8:	2200      	movs	r2, #0
  4030ca:	731a      	strb	r2, [r3, #12]
        }
    }
    
    // Calculate velocity
    enc_data->velocity = calculate_velocity(enc_data, current_time);
  4030cc:	6939      	ldr	r1, [r7, #16]
  4030ce:	6878      	ldr	r0, [r7, #4]
  4030d0:	4b08      	ldr	r3, [pc, #32]	; (4030f4 <encoder_poll+0xdc>)
  4030d2:	4798      	blx	r3
  4030d4:	4602      	mov	r2, r0
  4030d6:	687b      	ldr	r3, [r7, #4]
  4030d8:	605a      	str	r2, [r3, #4]
    
    // Apply velocity smoothing
    apply_velocity_smoothing(enc_data);
  4030da:	6878      	ldr	r0, [r7, #4]
  4030dc:	4b06      	ldr	r3, [pc, #24]	; (4030f8 <encoder_poll+0xe0>)
  4030de:	4798      	blx	r3
}
  4030e0:	3718      	adds	r7, #24
  4030e2:	46bd      	mov	sp, r7
  4030e4:	bd80      	pop	{r7, pc}
  4030e6:	bf00      	nop
  4030e8:	00401899 	.word	0x00401899
  4030ec:	00402fe9 	.word	0x00402fe9
  4030f0:	004031e1 	.word	0x004031e1
  4030f4:	004030fd 	.word	0x004030fd
  4030f8:	00403165 	.word	0x00403165

004030fc <calculate_velocity>:

// Calculate velocity based on position changes
int32_t calculate_velocity(encoder_data_t* enc_data, uint32_t current_time)
{
  4030fc:	b480      	push	{r7}
  4030fe:	b085      	sub	sp, #20
  403100:	af00      	add	r7, sp, #0
  403102:	6078      	str	r0, [r7, #4]
  403104:	6039      	str	r1, [r7, #0]
    // Reset velocity window if needed
    if (current_time - enc_data->velocity_window_start >= VELOCITY_WINDOW_MS) {
  403106:	687b      	ldr	r3, [r7, #4]
  403108:	6a1b      	ldr	r3, [r3, #32]
  40310a:	683a      	ldr	r2, [r7, #0]
  40310c:	1ad3      	subs	r3, r2, r3
  40310e:	2b63      	cmp	r3, #99	; 0x63
  403110:	d905      	bls.n	40311e <calculate_velocity+0x22>
        enc_data->velocity_window_start = current_time;
  403112:	687b      	ldr	r3, [r7, #4]
  403114:	683a      	ldr	r2, [r7, #0]
  403116:	621a      	str	r2, [r3, #32]
        enc_data->pulse_count = 0;
  403118:	687b      	ldr	r3, [r7, #4]
  40311a:	2200      	movs	r2, #0
  40311c:	61da      	str	r2, [r3, #28]
    }
    
    // Calculate velocity in pulses per second
    uint32_t time_delta = current_time - enc_data->velocity_window_start;
  40311e:	687b      	ldr	r3, [r7, #4]
  403120:	6a1b      	ldr	r3, [r3, #32]
  403122:	683a      	ldr	r2, [r7, #0]
  403124:	1ad3      	subs	r3, r2, r3
  403126:	60bb      	str	r3, [r7, #8]
    if (time_delta == 0) return 0;
  403128:	68bb      	ldr	r3, [r7, #8]
  40312a:	2b00      	cmp	r3, #0
  40312c:	d101      	bne.n	403132 <calculate_velocity+0x36>
  40312e:	2300      	movs	r3, #0
  403130:	e011      	b.n	403156 <calculate_velocity+0x5a>
    
    int32_t velocity = (enc_data->pulse_count * 1000) / time_delta;
  403132:	687b      	ldr	r3, [r7, #4]
  403134:	69db      	ldr	r3, [r3, #28]
  403136:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40313a:	fb02 f203 	mul.w	r2, r2, r3
  40313e:	68bb      	ldr	r3, [r7, #8]
  403140:	fbb2 f3f3 	udiv	r3, r2, r3
  403144:	60fb      	str	r3, [r7, #12]
    
    // Apply direction
    if (enc_data->direction == 2) { // Reverse
  403146:	687b      	ldr	r3, [r7, #4]
  403148:	7b1b      	ldrb	r3, [r3, #12]
  40314a:	2b02      	cmp	r3, #2
  40314c:	d102      	bne.n	403154 <calculate_velocity+0x58>
        velocity = -velocity;
  40314e:	68fb      	ldr	r3, [r7, #12]
  403150:	425b      	negs	r3, r3
  403152:	60fb      	str	r3, [r7, #12]
    }
    
    return velocity;
  403154:	68fb      	ldr	r3, [r7, #12]
}
  403156:	4618      	mov	r0, r3
  403158:	3714      	adds	r7, #20
  40315a:	46bd      	mov	sp, r7
  40315c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403160:	4770      	bx	lr
	...

00403164 <apply_velocity_smoothing>:

// Apply velocity smoothing
void apply_velocity_smoothing(encoder_data_t* enc_data)
{
  403164:	b480      	push	{r7}
  403166:	b085      	sub	sp, #20
  403168:	af00      	add	r7, sp, #0
  40316a:	6078      	str	r0, [r7, #4]
    // Simple moving average smoothing
    static int32_t velocity_history[4] = {0};
    static uint8_t history_index = 0;
    
    velocity_history[history_index] = enc_data->velocity;
  40316c:	4b1a      	ldr	r3, [pc, #104]	; (4031d8 <apply_velocity_smoothing+0x74>)
  40316e:	781b      	ldrb	r3, [r3, #0]
  403170:	4619      	mov	r1, r3
  403172:	687b      	ldr	r3, [r7, #4]
  403174:	685b      	ldr	r3, [r3, #4]
  403176:	4a19      	ldr	r2, [pc, #100]	; (4031dc <apply_velocity_smoothing+0x78>)
  403178:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    history_index = (history_index + 1) % 4;
  40317c:	4b16      	ldr	r3, [pc, #88]	; (4031d8 <apply_velocity_smoothing+0x74>)
  40317e:	781b      	ldrb	r3, [r3, #0]
  403180:	3301      	adds	r3, #1
  403182:	425a      	negs	r2, r3
  403184:	f003 0303 	and.w	r3, r3, #3
  403188:	f002 0203 	and.w	r2, r2, #3
  40318c:	bf58      	it	pl
  40318e:	4253      	negpl	r3, r2
  403190:	b2da      	uxtb	r2, r3
  403192:	4b11      	ldr	r3, [pc, #68]	; (4031d8 <apply_velocity_smoothing+0x74>)
  403194:	701a      	strb	r2, [r3, #0]
    
    // Calculate average
    int32_t sum = 0;
  403196:	2300      	movs	r3, #0
  403198:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 4; i++) {
  40319a:	2300      	movs	r3, #0
  40319c:	60bb      	str	r3, [r7, #8]
  40319e:	e009      	b.n	4031b4 <apply_velocity_smoothing+0x50>
        sum += velocity_history[i];
  4031a0:	4a0e      	ldr	r2, [pc, #56]	; (4031dc <apply_velocity_smoothing+0x78>)
  4031a2:	68bb      	ldr	r3, [r7, #8]
  4031a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4031a8:	68fa      	ldr	r2, [r7, #12]
  4031aa:	4413      	add	r3, r2
  4031ac:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 4; i++) {
  4031ae:	68bb      	ldr	r3, [r7, #8]
  4031b0:	3301      	adds	r3, #1
  4031b2:	60bb      	str	r3, [r7, #8]
  4031b4:	68bb      	ldr	r3, [r7, #8]
  4031b6:	2b03      	cmp	r3, #3
  4031b8:	ddf2      	ble.n	4031a0 <apply_velocity_smoothing+0x3c>
    }
    enc_data->smoothed_velocity = sum / 4;
  4031ba:	68fb      	ldr	r3, [r7, #12]
  4031bc:	2b00      	cmp	r3, #0
  4031be:	da00      	bge.n	4031c2 <apply_velocity_smoothing+0x5e>
  4031c0:	3303      	adds	r3, #3
  4031c2:	109b      	asrs	r3, r3, #2
  4031c4:	461a      	mov	r2, r3
  4031c6:	687b      	ldr	r3, [r7, #4]
  4031c8:	609a      	str	r2, [r3, #8]
}
  4031ca:	bf00      	nop
  4031cc:	3714      	adds	r7, #20
  4031ce:	46bd      	mov	sp, r7
  4031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031d4:	4770      	bx	lr
  4031d6:	bf00      	nop
  4031d8:	2000a674 	.word	0x2000a674
  4031dc:	2000a678 	.word	0x2000a678

004031e0 <is_direction_change_allowed>:

// Check if direction change is allowed (debouncing)
bool is_direction_change_allowed(encoder_data_t* enc_data, uint32_t current_time, uint8_t new_direction)
{
  4031e0:	b480      	push	{r7}
  4031e2:	b085      	sub	sp, #20
  4031e4:	af00      	add	r7, sp, #0
  4031e6:	60f8      	str	r0, [r7, #12]
  4031e8:	60b9      	str	r1, [r7, #8]
  4031ea:	4613      	mov	r3, r2
  4031ec:	71fb      	strb	r3, [r7, #7]
    // Don't change direction if it's the same
    if (enc_data->direction == new_direction) {
  4031ee:	68fb      	ldr	r3, [r7, #12]
  4031f0:	7b1b      	ldrb	r3, [r3, #12]
  4031f2:	79fa      	ldrb	r2, [r7, #7]
  4031f4:	429a      	cmp	r2, r3
  4031f6:	d101      	bne.n	4031fc <is_direction_change_allowed+0x1c>
        return false;
  4031f8:	2300      	movs	r3, #0
  4031fa:	e008      	b.n	40320e <is_direction_change_allowed+0x2e>
    }
    
    // Don't change direction if too soon after last change
    if (current_time - enc_data->last_direction_change < DIRECTION_CHANGE_DEBOUNCE_MS) {
  4031fc:	68fb      	ldr	r3, [r7, #12]
  4031fe:	699b      	ldr	r3, [r3, #24]
  403200:	68ba      	ldr	r2, [r7, #8]
  403202:	1ad3      	subs	r3, r2, r3
  403204:	2b13      	cmp	r3, #19
  403206:	d801      	bhi.n	40320c <is_direction_change_allowed+0x2c>
        return false;
  403208:	2300      	movs	r3, #0
  40320a:	e000      	b.n	40320e <is_direction_change_allowed+0x2e>
    }
    
    return true;
  40320c:	2301      	movs	r3, #1
}
  40320e:	4618      	mov	r0, r3
  403210:	3714      	adds	r7, #20
  403212:	46bd      	mov	sp, r7
  403214:	f85d 7b04 	ldr.w	r7, [sp], #4
  403218:	4770      	bx	lr
	...

0040321c <encoder_task>:

// Main encoder task
void encoder_task(void *arg)
{
  40321c:	b580      	push	{r7, lr}
  40321e:	b08c      	sub	sp, #48	; 0x30
  403220:	af00      	add	r7, sp, #0
  403222:	6078      	str	r0, [r7, #4]
    // NOTE: This task sends CAN messages with encoder data.
    // If no physical encoder is connected, it will send test data:
    // - Direction: alternates between forward/reverse for testing
    // - Velocity: simulated values for testing  
    // - Position: continuously incrementing counter for testing
    if (!encoder_init()) {
  403224:	4b3d      	ldr	r3, [pc, #244]	; (40331c <encoder_task+0x100>)
  403226:	4798      	blx	r3
  403228:	4603      	mov	r3, r0
  40322a:	f083 0301 	eor.w	r3, r3, #1
  40322e:	b2db      	uxtb	r3, r3
  403230:	2b00      	cmp	r3, #0
  403232:	d004      	beq.n	40323e <encoder_task+0x22>
        // Encoder initialization failed
        while(1) {
            vTaskDelay(pdMS_TO_TICKS(1000));
  403234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  403238:	4b39      	ldr	r3, [pc, #228]	; (403320 <encoder_task+0x104>)
  40323a:	4798      	blx	r3
  40323c:	e7fa      	b.n	403234 <encoder_task+0x18>
        }
    }
    
    // Wait a bit for encoders to stabilize
    vTaskDelay(pdMS_TO_TICKS(100));
  40323e:	2064      	movs	r0, #100	; 0x64
  403240:	4b37      	ldr	r3, [pc, #220]	; (403320 <encoder_task+0x104>)
  403242:	4798      	blx	r3
    
    uint32_t last_transmission_time = 0;
  403244:	2300      	movs	r3, #0
  403246:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    for (;;) {
        uint32_t current_time = xTaskGetTickCount() * portTICK_PERIOD_MS;
  403248:	4b36      	ldr	r3, [pc, #216]	; (403324 <encoder_task+0x108>)
  40324a:	4798      	blx	r3
  40324c:	62b8      	str	r0, [r7, #40]	; 0x28
        
        // Poll both encoders
        encoder_poll(&encoder1_data);
  40324e:	4836      	ldr	r0, [pc, #216]	; (403328 <encoder_task+0x10c>)
  403250:	4b36      	ldr	r3, [pc, #216]	; (40332c <encoder_task+0x110>)
  403252:	4798      	blx	r3
        if (ENCODER2_AVAILABLE) {
            encoder_poll(&encoder2_data);
  403254:	4836      	ldr	r0, [pc, #216]	; (403330 <encoder_task+0x114>)
  403256:	4b35      	ldr	r3, [pc, #212]	; (40332c <encoder_task+0x110>)
  403258:	4798      	blx	r3
        }
        
        // Send encoder data over CAN periodically
        if (current_time - last_transmission_time >= ENCODER_POLLING_RATE_MS) {
  40325a:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40325e:	1ad3      	subs	r3, r2, r3
  403260:	2b31      	cmp	r3, #49	; 0x31
  403262:	d957      	bls.n	403314 <encoder_task+0xf8>
            // Position: unsigned 32-bit value (pulse count from TC counter)
            uint8_t enc1_data[8];
            
            // Pack direction (1 byte) - 0=stopped, 1=forward, 2=reverse
            // Use actual encoder direction, or 0 if no movement detected
            enc1_data[0] = encoder1_data.direction;
  403264:	4b30      	ldr	r3, [pc, #192]	; (403328 <encoder_task+0x10c>)
  403266:	7b1b      	ldrb	r3, [r3, #12]
  403268:	743b      	strb	r3, [r7, #16]
            
            // Pack velocity (3 bytes) - signed 24-bit value
            // Use actual encoder velocity
            int32_t velocity = encoder1_data.velocity;
  40326a:	4b2f      	ldr	r3, [pc, #188]	; (403328 <encoder_task+0x10c>)
  40326c:	685b      	ldr	r3, [r3, #4]
  40326e:	627b      	str	r3, [r7, #36]	; 0x24
            enc1_data[1] = (uint8_t)(velocity & 0xFF);
  403270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403272:	b2db      	uxtb	r3, r3
  403274:	747b      	strb	r3, [r7, #17]
            enc1_data[2] = (uint8_t)((velocity >> 8) & 0xFF);
  403276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403278:	121b      	asrs	r3, r3, #8
  40327a:	b2db      	uxtb	r3, r3
  40327c:	74bb      	strb	r3, [r7, #18]
            enc1_data[3] = (uint8_t)((velocity >> 16) & 0xFF);
  40327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403280:	141b      	asrs	r3, r3, #16
  403282:	b2db      	uxtb	r3, r3
  403284:	74fb      	strb	r3, [r7, #19]
            
            // Pack position (4 bytes) - unsigned 32-bit value
            // Use actual encoder position
            uint32_t position_value = encoder1_data.position;
  403286:	4b28      	ldr	r3, [pc, #160]	; (403328 <encoder_task+0x10c>)
  403288:	681b      	ldr	r3, [r3, #0]
  40328a:	623b      	str	r3, [r7, #32]
            enc1_data[4] = (uint8_t)(position_value & 0xFF);
  40328c:	6a3b      	ldr	r3, [r7, #32]
  40328e:	b2db      	uxtb	r3, r3
  403290:	753b      	strb	r3, [r7, #20]
            enc1_data[5] = (uint8_t)((position_value >> 8) & 0xFF);
  403292:	6a3b      	ldr	r3, [r7, #32]
  403294:	0a1b      	lsrs	r3, r3, #8
  403296:	b2db      	uxtb	r3, r3
  403298:	757b      	strb	r3, [r7, #21]
            enc1_data[6] = (uint8_t)((position_value >> 16) & 0xFF);
  40329a:	6a3b      	ldr	r3, [r7, #32]
  40329c:	0c1b      	lsrs	r3, r3, #16
  40329e:	b2db      	uxtb	r3, r3
  4032a0:	75bb      	strb	r3, [r7, #22]
            enc1_data[7] = (uint8_t)((position_value >> 24) & 0xFF);
  4032a2:	6a3b      	ldr	r3, [r7, #32]
  4032a4:	0e1b      	lsrs	r3, r3, #24
  4032a6:	b2db      	uxtb	r3, r3
  4032a8:	75fb      	strb	r3, [r7, #23]
            
            can_app_tx(CAN_ID_ENCODER1_DIR_VEL, enc1_data, 8);
  4032aa:	f107 0310 	add.w	r3, r7, #16
  4032ae:	2208      	movs	r2, #8
  4032b0:	4619      	mov	r1, r3
  4032b2:	f44f 7098 	mov.w	r0, #304	; 0x130
  4032b6:	4b1f      	ldr	r3, [pc, #124]	; (403334 <encoder_task+0x118>)
  4032b8:	4798      	blx	r3
                // Position: unsigned 32-bit value (pulse count from TC counter)
                uint8_t enc2_data[8];
                
                // Pack direction (1 byte) - 0=stopped, 1=forward, 2=reverse
                // Use actual encoder direction, or 0 if no movement detected
                enc2_data[0] = encoder2_data.direction;
  4032ba:	4b1d      	ldr	r3, [pc, #116]	; (403330 <encoder_task+0x114>)
  4032bc:	7b1b      	ldrb	r3, [r3, #12]
  4032be:	723b      	strb	r3, [r7, #8]
                
                // Pack velocity (3 bytes) - signed 24-bit value
                // Use actual encoder velocity
                int32_t velocity2 = encoder2_data.velocity;
  4032c0:	4b1b      	ldr	r3, [pc, #108]	; (403330 <encoder_task+0x114>)
  4032c2:	685b      	ldr	r3, [r3, #4]
  4032c4:	61fb      	str	r3, [r7, #28]
                enc2_data[1] = (uint8_t)(velocity2 & 0xFF);
  4032c6:	69fb      	ldr	r3, [r7, #28]
  4032c8:	b2db      	uxtb	r3, r3
  4032ca:	727b      	strb	r3, [r7, #9]
                enc2_data[2] = (uint8_t)((velocity2 >> 8) & 0xFF);
  4032cc:	69fb      	ldr	r3, [r7, #28]
  4032ce:	121b      	asrs	r3, r3, #8
  4032d0:	b2db      	uxtb	r3, r3
  4032d2:	72bb      	strb	r3, [r7, #10]
                enc2_data[3] = (uint8_t)((velocity2 >> 16) & 0xFF);
  4032d4:	69fb      	ldr	r3, [r7, #28]
  4032d6:	141b      	asrs	r3, r3, #16
  4032d8:	b2db      	uxtb	r3, r3
  4032da:	72fb      	strb	r3, [r7, #11]
                
                // Pack position (4 bytes) - unsigned 32-bit value
                // Use actual encoder position
                uint32_t position_value2 = encoder2_data.position;
  4032dc:	4b14      	ldr	r3, [pc, #80]	; (403330 <encoder_task+0x114>)
  4032de:	681b      	ldr	r3, [r3, #0]
  4032e0:	61bb      	str	r3, [r7, #24]
                enc2_data[4] = (uint8_t)(position_value2 & 0xFF);
  4032e2:	69bb      	ldr	r3, [r7, #24]
  4032e4:	b2db      	uxtb	r3, r3
  4032e6:	733b      	strb	r3, [r7, #12]
                enc2_data[5] = (uint8_t)((position_value2 >> 8) & 0xFF);
  4032e8:	69bb      	ldr	r3, [r7, #24]
  4032ea:	0a1b      	lsrs	r3, r3, #8
  4032ec:	b2db      	uxtb	r3, r3
  4032ee:	737b      	strb	r3, [r7, #13]
                enc2_data[6] = (uint8_t)((position_value2 >> 16) & 0xFF);
  4032f0:	69bb      	ldr	r3, [r7, #24]
  4032f2:	0c1b      	lsrs	r3, r3, #16
  4032f4:	b2db      	uxtb	r3, r3
  4032f6:	73bb      	strb	r3, [r7, #14]
                enc2_data[7] = (uint8_t)((position_value2 >> 24) & 0xFF);
  4032f8:	69bb      	ldr	r3, [r7, #24]
  4032fa:	0e1b      	lsrs	r3, r3, #24
  4032fc:	b2db      	uxtb	r3, r3
  4032fe:	73fb      	strb	r3, [r7, #15]
                
                can_app_tx(CAN_ID_ENCODER2_DIR_VEL, enc2_data, 8);
  403300:	f107 0308 	add.w	r3, r7, #8
  403304:	2208      	movs	r2, #8
  403306:	4619      	mov	r1, r3
  403308:	f240 1031 	movw	r0, #305	; 0x131
  40330c:	4b09      	ldr	r3, [pc, #36]	; (403334 <encoder_task+0x118>)
  40330e:	4798      	blx	r3
            }
            
            last_transmission_time = current_time;
  403310:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403312:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        
        // Small delay to prevent excessive CPU usage
        vTaskDelay(pdMS_TO_TICKS(1));
  403314:	2001      	movs	r0, #1
  403316:	4b02      	ldr	r3, [pc, #8]	; (403320 <encoder_task+0x104>)
  403318:	4798      	blx	r3
    for (;;) {
  40331a:	e795      	b.n	403248 <encoder_task+0x2c>
  40331c:	00402df9 	.word	0x00402df9
  403320:	00401675 	.word	0x00401675
  403324:	00401899 	.word	0x00401899
  403328:	2000a624 	.word	0x2000a624
  40332c:	00403019 	.word	0x00403019
  403330:	2000a64c 	.word	0x2000a64c
  403334:	0040293d 	.word	0x0040293d

00403338 <task_test>:
#ifndef portTICK_PERIOD_MS
#define portTICK_PERIOD_MS portTICK_RATE_MS // Legacy macro mapping
#endif


void task_test(void *arg){
  403338:	b580      	push	{r7, lr}
  40333a:	b084      	sub	sp, #16
  40333c:	af00      	add	r7, sp, #0
  40333e:	6078      	str	r0, [r7, #4]
	(void)arg; // Unused parameter
	uint8_t msb=0xAA, lsb=0x55; 
  403340:	23aa      	movs	r3, #170	; 0xaa
  403342:	73fb      	strb	r3, [r7, #15]
  403344:	2355      	movs	r3, #85	; 0x55
  403346:	73bb      	strb	r3, [r7, #14]
	while(1) {
		uint8_t payload[2] = { msb, lsb };
  403348:	7bfb      	ldrb	r3, [r7, #15]
  40334a:	733b      	strb	r3, [r7, #12]
  40334c:	7bbb      	ldrb	r3, [r7, #14]
  40334e:	737b      	strb	r3, [r7, #13]
		can_app_tx(CAN_ID_LOADCELL, payload, 2); // Publish loadcell sample over CAN
  403350:	f107 030c 	add.w	r3, r7, #12
  403354:	2202      	movs	r2, #2
  403356:	4619      	mov	r1, r3
  403358:	f44f 7090 	mov.w	r0, #288	; 0x120
  40335c:	4b02      	ldr	r3, [pc, #8]	; (403368 <task_test+0x30>)
  40335e:	4798      	blx	r3
		vTaskDelay(pdMS_TO_TICKS(100)); // Sample at ~500 Hz  == 2 milli seconds
  403360:	2064      	movs	r0, #100	; 0x64
  403362:	4b02      	ldr	r3, [pc, #8]	; (40336c <task_test+0x34>)
  403364:	4798      	blx	r3
	while(1) {
  403366:	e7ef      	b.n	403348 <task_test+0x10>
  403368:	0040293d 	.word	0x0040293d
  40336c:	00401675 	.word	0x00401675

00403370 <create_application_tasks>:
		}
}
void create_application_tasks(void)
{
  403370:	b590      	push	{r4, r7, lr}
  403372:	b085      	sub	sp, #20
  403374:	af04      	add	r7, sp, #16
	
	xTaskCreate(can_rx_task, "canrx", 512, 0, tskIDLE_PRIORITY+2, 0); // CAN RX handler task
  403376:	2300      	movs	r3, #0
  403378:	9303      	str	r3, [sp, #12]
  40337a:	2300      	movs	r3, #0
  40337c:	9302      	str	r3, [sp, #8]
  40337e:	2300      	movs	r3, #0
  403380:	9301      	str	r3, [sp, #4]
  403382:	2302      	movs	r3, #2
  403384:	9300      	str	r3, [sp, #0]
  403386:	2300      	movs	r3, #0
  403388:	f44f 7200 	mov.w	r2, #512	; 0x200
  40338c:	491a      	ldr	r1, [pc, #104]	; (4033f8 <create_application_tasks+0x88>)
  40338e:	481b      	ldr	r0, [pc, #108]	; (4033fc <create_application_tasks+0x8c>)
  403390:	4c1b      	ldr	r4, [pc, #108]	; (403400 <create_application_tasks+0x90>)
  403392:	47a0      	blx	r4
	xTaskCreate(can_status_task, "canstatus", 256, 0, tskIDLE_PRIORITY+1, 0); // CAN status monitoring task
  403394:	2300      	movs	r3, #0
  403396:	9303      	str	r3, [sp, #12]
  403398:	2300      	movs	r3, #0
  40339a:	9302      	str	r3, [sp, #8]
  40339c:	2300      	movs	r3, #0
  40339e:	9301      	str	r3, [sp, #4]
  4033a0:	2301      	movs	r3, #1
  4033a2:	9300      	str	r3, [sp, #0]
  4033a4:	2300      	movs	r3, #0
  4033a6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4033aa:	4916      	ldr	r1, [pc, #88]	; (403404 <create_application_tasks+0x94>)
  4033ac:	4816      	ldr	r0, [pc, #88]	; (403408 <create_application_tasks+0x98>)
  4033ae:	4c14      	ldr	r4, [pc, #80]	; (403400 <create_application_tasks+0x90>)
  4033b0:	47a0      	blx	r4
	xTaskCreate(task_test, "testTask", 512, 0, tskIDLE_PRIORITY+2, 0); // Load cell sampling task
  4033b2:	2300      	movs	r3, #0
  4033b4:	9303      	str	r3, [sp, #12]
  4033b6:	2300      	movs	r3, #0
  4033b8:	9302      	str	r3, [sp, #8]
  4033ba:	2300      	movs	r3, #0
  4033bc:	9301      	str	r3, [sp, #4]
  4033be:	2302      	movs	r3, #2
  4033c0:	9300      	str	r3, [sp, #0]
  4033c2:	2300      	movs	r3, #0
  4033c4:	f44f 7200 	mov.w	r2, #512	; 0x200
  4033c8:	4910      	ldr	r1, [pc, #64]	; (40340c <create_application_tasks+0x9c>)
  4033ca:	4811      	ldr	r0, [pc, #68]	; (403410 <create_application_tasks+0xa0>)
  4033cc:	4c0c      	ldr	r4, [pc, #48]	; (403400 <create_application_tasks+0x90>)
  4033ce:	47a0      	blx	r4
	xTaskCreate(encoder_task, "encoder", 512, 0, tskIDLE_PRIORITY+2, 0); // Encoder polling and CAN transmission task
  4033d0:	2300      	movs	r3, #0
  4033d2:	9303      	str	r3, [sp, #12]
  4033d4:	2300      	movs	r3, #0
  4033d6:	9302      	str	r3, [sp, #8]
  4033d8:	2300      	movs	r3, #0
  4033da:	9301      	str	r3, [sp, #4]
  4033dc:	2302      	movs	r3, #2
  4033de:	9300      	str	r3, [sp, #0]
  4033e0:	2300      	movs	r3, #0
  4033e2:	f44f 7200 	mov.w	r2, #512	; 0x200
  4033e6:	490b      	ldr	r1, [pc, #44]	; (403414 <create_application_tasks+0xa4>)
  4033e8:	480b      	ldr	r0, [pc, #44]	; (403418 <create_application_tasks+0xa8>)
  4033ea:	4c05      	ldr	r4, [pc, #20]	; (403400 <create_application_tasks+0x90>)
  4033ec:	47a0      	blx	r4
  4033ee:	bf00      	nop
  4033f0:	3704      	adds	r7, #4
  4033f2:	46bd      	mov	sp, r7
  4033f4:	bd90      	pop	{r4, r7, pc}
  4033f6:	bf00      	nop
  4033f8:	0040448c 	.word	0x0040448c
  4033fc:	00402c1d 	.word	0x00402c1d
  403400:	004014cd 	.word	0x004014cd
  403404:	00404494 	.word	0x00404494
  403408:	00402da1 	.word	0x00402da1
  40340c:	004044a0 	.word	0x004044a0
  403410:	00403339 	.word	0x00403339
  403414:	004044ac 	.word	0x004044ac
  403418:	0040321d 	.word	0x0040321d

0040341c <WIB_Init>:
 */ 
#include "WIB_Init.h"
int tool_type = 9;
unsigned char who_lis2 = 0;
int WIB_Init()
{
  40341c:	b580      	push	{r7, lr}
  40341e:	af00      	add	r7, sp, #0
	SystemInit();
  403420:	4b03      	ldr	r3, [pc, #12]	; (403430 <WIB_Init+0x14>)
  403422:	4798      	blx	r3
	board_init();
  403424:	4b03      	ldr	r3, [pc, #12]	; (403434 <WIB_Init+0x18>)
  403426:	4798      	blx	r3
	
	// Initialize I2C0 at 100kHz

	

	return 0;  // Success
  403428:	2300      	movs	r3, #0
}
  40342a:	4618      	mov	r0, r3
  40342c:	bd80      	pop	{r7, pc}
  40342e:	bf00      	nop
  403430:	004001f1 	.word	0x004001f1
  403434:	0040040d 	.word	0x0040040d

00403438 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
  403438:	b580      	push	{r7, lr}
  40343a:	b08a      	sub	sp, #40	; 0x28
  40343c:	af00      	add	r7, sp, #0
  40343e:	60f8      	str	r0, [r7, #12]
  403440:	60b9      	str	r1, [r7, #8]
  403442:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
  403444:	687b      	ldr	r3, [r7, #4]
  403446:	f246 12a8 	movw	r2, #25000	; 0x61a8
  40344a:	fb02 f203 	mul.w	r2, r2, r3
  40344e:	68bb      	ldr	r3, [r7, #8]
  403450:	4413      	add	r3, r2
  403452:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
  403454:	687b      	ldr	r3, [r7, #4]
  403456:	f246 11a8 	movw	r1, #25000	; 0x61a8
  40345a:	fb01 f303 	mul.w	r3, r1, r3
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
  40345e:	fbb2 f3f3 	udiv	r3, r2, r3
  403462:	2b80      	cmp	r3, #128	; 0x80
  403464:	d901      	bls.n	40346a <can_set_baudrate+0x32>
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
  403466:	2300      	movs	r3, #0
  403468:	e086      	b.n	403578 <can_set_baudrate+0x140>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
  40346a:	68bb      	ldr	r3, [r7, #8]
  40346c:	085a      	lsrs	r2, r3, #1
  40346e:	687b      	ldr	r3, [r7, #4]
  403470:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  403474:	fb01 f303 	mul.w	r3, r1, r3
  403478:	429a      	cmp	r2, r3
  40347a:	d201      	bcs.n	403480 <can_set_baudrate+0x48>
		return 0;
  40347c:	2300      	movs	r3, #0
  40347e:	e07b      	b.n	403578 <can_set_baudrate+0x140>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
  403480:	2308      	movs	r3, #8
  403482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
  403486:	f04f 33ff 	mov.w	r3, #4294967295
  40348a:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
  40348c:	2308      	movs	r3, #8
  40348e:	77fb      	strb	r3, [r7, #31]
  403490:	e02a      	b.n	4034e8 <can_set_baudrate+0xb0>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
  403492:	7ffb      	ldrb	r3, [r7, #31]
  403494:	687a      	ldr	r2, [r7, #4]
  403496:	fb02 f303 	mul.w	r3, r2, r3
  40349a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40349e:	fb02 f303 	mul.w	r3, r2, r3
  4034a2:	68ba      	ldr	r2, [r7, #8]
  4034a4:	fbb2 f3f3 	udiv	r3, r2, r3
  4034a8:	2b80      	cmp	r3, #128	; 0x80
  4034aa:	d81a      	bhi.n	4034e2 <can_set_baudrate+0xaa>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
  4034ac:	7ffb      	ldrb	r3, [r7, #31]
  4034ae:	687a      	ldr	r2, [r7, #4]
  4034b0:	fb02 f303 	mul.w	r3, r2, r3
  4034b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4034b8:	fb02 f203 	mul.w	r2, r2, r3
  4034bc:	68bb      	ldr	r3, [r7, #8]
  4034be:	fbb3 f1f2 	udiv	r1, r3, r2
  4034c2:	fb02 f201 	mul.w	r2, r2, r1
  4034c6:	1a9b      	subs	r3, r3, r2
  4034c8:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
  4034ca:	69ba      	ldr	r2, [r7, #24]
  4034cc:	6a3b      	ldr	r3, [r7, #32]
  4034ce:	429a      	cmp	r2, r3
  4034d0:	d207      	bcs.n	4034e2 <can_set_baudrate+0xaa>
				ul_mod = ul_cur_mod;
  4034d2:	69bb      	ldr	r3, [r7, #24]
  4034d4:	623b      	str	r3, [r7, #32]
				uc_tq = i;
  4034d6:	7ffb      	ldrb	r3, [r7, #31]
  4034d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
  4034dc:	6a3b      	ldr	r3, [r7, #32]
  4034de:	2b00      	cmp	r3, #0
  4034e0:	d006      	beq.n	4034f0 <can_set_baudrate+0xb8>
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
  4034e2:	7ffb      	ldrb	r3, [r7, #31]
  4034e4:	3301      	adds	r3, #1
  4034e6:	77fb      	strb	r3, [r7, #31]
  4034e8:	7ffb      	ldrb	r3, [r7, #31]
  4034ea:	2b19      	cmp	r3, #25
  4034ec:	d9d1      	bls.n	403492 <can_set_baudrate+0x5a>
  4034ee:	e000      	b.n	4034f2 <can_set_baudrate+0xba>
					break;
  4034f0:	bf00      	nop
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
  4034f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4034f6:	687a      	ldr	r2, [r7, #4]
  4034f8:	fb02 f303 	mul.w	r3, r2, r3
  4034fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403500:	fb02 f303 	mul.w	r3, r2, r3
  403504:	68ba      	ldr	r2, [r7, #8]
  403506:	fbb2 f3f3 	udiv	r3, r2, r3
  40350a:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
  40350c:	7dfb      	ldrb	r3, [r7, #23]
  40350e:	2b01      	cmp	r3, #1
  403510:	d801      	bhi.n	403516 <can_set_baudrate+0xde>
		return 0;
  403512:	2300      	movs	r3, #0
  403514:	e030      	b.n	403578 <can_set_baudrate+0x140>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
  403516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40351a:	f1a3 0208 	sub.w	r2, r3, #8
  40351e:	4613      	mov	r3, r2
  403520:	005b      	lsls	r3, r3, #1
  403522:	4413      	add	r3, r2
  403524:	005b      	lsls	r3, r3, #1
  403526:	4a16      	ldr	r2, [pc, #88]	; (403580 <can_set_baudrate+0x148>)
  403528:	4413      	add	r3, r2
  40352a:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
  40352c:	68f8      	ldr	r0, [r7, #12]
  40352e:	4b15      	ldr	r3, [pc, #84]	; (403584 <can_set_baudrate+0x14c>)
  403530:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  403532:	693b      	ldr	r3, [r7, #16]
  403534:	78db      	ldrb	r3, [r3, #3]
  403536:	3b01      	subs	r3, #1
  403538:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  40353c:	693b      	ldr	r3, [r7, #16]
  40353e:	789b      	ldrb	r3, [r3, #2]
  403540:	3b01      	subs	r3, #1
  403542:	011b      	lsls	r3, r3, #4
  403544:	f003 0370 	and.w	r3, r3, #112	; 0x70
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  403548:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
  40354a:	693b      	ldr	r3, [r7, #16]
  40354c:	785b      	ldrb	r3, [r3, #1]
  40354e:	3b01      	subs	r3, #1
  403550:	021b      	lsls	r3, r3, #8
  403552:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  403556:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
  403558:	693b      	ldr	r3, [r7, #16]
  40355a:	791b      	ldrb	r3, [r3, #4]
  40355c:	3b01      	subs	r3, #1
  40355e:	031b      	lsls	r3, r3, #12
  403560:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
  403564:	431a      	orrs	r2, r3
			CAN_BR_BRP(uc_prescale - 1);
  403566:	7dfb      	ldrb	r3, [r7, #23]
  403568:	3b01      	subs	r3, #1
  40356a:	041b      	lsls	r3, r3, #16
  40356c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
  403570:	431a      	orrs	r2, r3
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  403572:	68fb      	ldr	r3, [r7, #12]
  403574:	615a      	str	r2, [r3, #20]
	return 1;
  403576:	2301      	movs	r3, #1
}
  403578:	4618      	mov	r0, r3
  40357a:	3728      	adds	r7, #40	; 0x28
  40357c:	46bd      	mov	sp, r7
  40357e:	bd80      	pop	{r7, pc}
  403580:	004044b4 	.word	0x004044b4
  403584:	00403631 	.word	0x00403631

00403588 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
  403588:	b580      	push	{r7, lr}
  40358a:	b086      	sub	sp, #24
  40358c:	af00      	add	r7, sp, #0
  40358e:	60f8      	str	r0, [r7, #12]
  403590:	60b9      	str	r1, [r7, #8]
  403592:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
  403594:	687a      	ldr	r2, [r7, #4]
  403596:	68b9      	ldr	r1, [r7, #8]
  403598:	68f8      	ldr	r0, [r7, #12]
  40359a:	4b17      	ldr	r3, [pc, #92]	; (4035f8 <can_init+0x70>)
  40359c:	4798      	blx	r3
  40359e:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
  4035a0:	697b      	ldr	r3, [r7, #20]
  4035a2:	2b00      	cmp	r3, #0
  4035a4:	d101      	bne.n	4035aa <can_init+0x22>
		return 0;
  4035a6:	2300      	movs	r3, #0
  4035a8:	e021      	b.n	4035ee <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
  4035aa:	68f8      	ldr	r0, [r7, #12]
  4035ac:	4b13      	ldr	r3, [pc, #76]	; (4035fc <can_init+0x74>)
  4035ae:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
  4035b0:	68f8      	ldr	r0, [r7, #12]
  4035b2:	4b13      	ldr	r3, [pc, #76]	; (403600 <can_init+0x78>)
  4035b4:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
  4035b6:	2300      	movs	r3, #0
  4035b8:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
  4035ba:	2300      	movs	r3, #0
  4035bc:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
  4035be:	e006      	b.n	4035ce <can_init+0x46>
		ul_flag = can_get_status(p_can);
  4035c0:	68f8      	ldr	r0, [r7, #12]
  4035c2:	4b10      	ldr	r3, [pc, #64]	; (403604 <can_init+0x7c>)
  4035c4:	4798      	blx	r3
  4035c6:	6178      	str	r0, [r7, #20]
		ul_tick++;
  4035c8:	693b      	ldr	r3, [r7, #16]
  4035ca:	3301      	adds	r3, #1
  4035cc:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
  4035ce:	697b      	ldr	r3, [r7, #20]
  4035d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  4035d4:	2b00      	cmp	r3, #0
  4035d6:	d103      	bne.n	4035e0 <can_init+0x58>
  4035d8:	693b      	ldr	r3, [r7, #16]
  4035da:	4a0b      	ldr	r2, [pc, #44]	; (403608 <can_init+0x80>)
  4035dc:	4293      	cmp	r3, r2
  4035de:	d9ef      	bls.n	4035c0 <can_init+0x38>
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
  4035e0:	693b      	ldr	r3, [r7, #16]
  4035e2:	4a0a      	ldr	r2, [pc, #40]	; (40360c <can_init+0x84>)
  4035e4:	4293      	cmp	r3, r2
  4035e6:	d101      	bne.n	4035ec <can_init+0x64>
		return 0;
  4035e8:	2300      	movs	r3, #0
  4035ea:	e000      	b.n	4035ee <can_init+0x66>
	} else {
		return 1;
  4035ec:	2301      	movs	r3, #1
	}
}
  4035ee:	4618      	mov	r0, r3
  4035f0:	3718      	adds	r7, #24
  4035f2:	46bd      	mov	sp, r7
  4035f4:	bd80      	pop	{r7, pc}
  4035f6:	bf00      	nop
  4035f8:	00403439 	.word	0x00403439
  4035fc:	00403995 	.word	0x00403995
  403600:	00403611 	.word	0x00403611
  403604:	00403651 	.word	0x00403651
  403608:	0001869f 	.word	0x0001869f
  40360c:	000186a0 	.word	0x000186a0

00403610 <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
  403610:	b480      	push	{r7}
  403612:	b083      	sub	sp, #12
  403614:	af00      	add	r7, sp, #0
  403616:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
  403618:	687b      	ldr	r3, [r7, #4]
  40361a:	681b      	ldr	r3, [r3, #0]
  40361c:	f043 0201 	orr.w	r2, r3, #1
  403620:	687b      	ldr	r3, [r7, #4]
  403622:	601a      	str	r2, [r3, #0]
}
  403624:	bf00      	nop
  403626:	370c      	adds	r7, #12
  403628:	46bd      	mov	sp, r7
  40362a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40362e:	4770      	bx	lr

00403630 <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
  403630:	b480      	push	{r7}
  403632:	b083      	sub	sp, #12
  403634:	af00      	add	r7, sp, #0
  403636:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
  403638:	687b      	ldr	r3, [r7, #4]
  40363a:	681b      	ldr	r3, [r3, #0]
  40363c:	f023 0201 	bic.w	r2, r3, #1
  403640:	687b      	ldr	r3, [r7, #4]
  403642:	601a      	str	r2, [r3, #0]
}
  403644:	bf00      	nop
  403646:	370c      	adds	r7, #12
  403648:	46bd      	mov	sp, r7
  40364a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40364e:	4770      	bx	lr

00403650 <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
  403650:	b480      	push	{r7}
  403652:	b083      	sub	sp, #12
  403654:	af00      	add	r7, sp, #0
  403656:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
  403658:	687b      	ldr	r3, [r7, #4]
  40365a:	691b      	ldr	r3, [r3, #16]
}
  40365c:	4618      	mov	r0, r3
  40365e:	370c      	adds	r7, #12
  403660:	46bd      	mov	sp, r7
  403662:	f85d 7b04 	ldr.w	r7, [sp], #4
  403666:	4770      	bx	lr

00403668 <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
  403668:	b480      	push	{r7}
  40366a:	b085      	sub	sp, #20
  40366c:	af00      	add	r7, sp, #0
  40366e:	6078      	str	r0, [r7, #4]
  403670:	460b      	mov	r3, r1
  403672:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
  403674:	687b      	ldr	r3, [r7, #4]
  403676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  403678:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  40367c:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
  40367e:	78fa      	ldrb	r2, [r7, #3]
  403680:	68fb      	ldr	r3, [r7, #12]
  403682:	431a      	orrs	r2, r3
  403684:	687b      	ldr	r3, [r7, #4]
  403686:	625a      	str	r2, [r3, #36]	; 0x24
}
  403688:	bf00      	nop
  40368a:	3714      	adds	r7, #20
  40368c:	46bd      	mov	sp, r7
  40368e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403692:	4770      	bx	lr

00403694 <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
  403694:	b480      	push	{r7}
  403696:	b083      	sub	sp, #12
  403698:	af00      	add	r7, sp, #0
  40369a:	6078      	str	r0, [r7, #4]
  40369c:	460b      	mov	r3, r1
  40369e:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
  4036a0:	78fb      	ldrb	r3, [r7, #3]
  4036a2:	687a      	ldr	r2, [r7, #4]
  4036a4:	015b      	lsls	r3, r3, #5
  4036a6:	4413      	add	r3, r2
  4036a8:	f503 7304 	add.w	r3, r3, #528	; 0x210
  4036ac:	681b      	ldr	r3, [r3, #0]
}
  4036ae:	4618      	mov	r0, r3
  4036b0:	370c      	adds	r7, #12
  4036b2:	46bd      	mov	sp, r7
  4036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4036b8:	4770      	bx	lr

004036ba <can_mailbox_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_send_transfer_cmd(Can *p_can, can_mb_conf_t *p_mailbox)
{
  4036ba:	b480      	push	{r7}
  4036bc:	b085      	sub	sp, #20
  4036be:	af00      	add	r7, sp, #0
  4036c0:	6078      	str	r0, [r7, #4]
  4036c2:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
  4036c4:	683b      	ldr	r3, [r7, #0]
  4036c6:	681b      	ldr	r3, [r3, #0]
  4036c8:	73fb      	strb	r3, [r7, #15]

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
  4036ca:	7bfb      	ldrb	r3, [r7, #15]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
  4036cc:	683a      	ldr	r2, [r7, #0]
  4036ce:	7992      	ldrb	r2, [r2, #6]
  4036d0:	0412      	lsls	r2, r2, #16
  4036d2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
  4036d6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  4036da:	6879      	ldr	r1, [r7, #4]
  4036dc:	015b      	lsls	r3, r3, #5
  4036de:	440b      	add	r3, r1
  4036e0:	f503 7307 	add.w	r3, r3, #540	; 0x21c
  4036e4:	601a      	str	r2, [r3, #0]
}
  4036e6:	bf00      	nop
  4036e8:	3714      	adds	r7, #20
  4036ea:	46bd      	mov	sp, r7
  4036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4036f0:	4770      	bx	lr

004036f2 <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
  4036f2:	b480      	push	{r7}
  4036f4:	b085      	sub	sp, #20
  4036f6:	af00      	add	r7, sp, #0
  4036f8:	6078      	str	r0, [r7, #4]
  4036fa:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
  4036fc:	683b      	ldr	r3, [r7, #0]
  4036fe:	681b      	ldr	r3, [r3, #0]
  403700:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
  403702:	683b      	ldr	r3, [r7, #0]
  403704:	791b      	ldrb	r3, [r3, #4]
  403706:	2b00      	cmp	r3, #0
  403708:	d12f      	bne.n	40376a <can_mailbox_init+0x78>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
  40370a:	7bfb      	ldrb	r3, [r7, #15]
  40370c:	687a      	ldr	r2, [r7, #4]
  40370e:	3310      	adds	r3, #16
  403710:	015b      	lsls	r3, r3, #5
  403712:	4413      	add	r3, r2
  403714:	2200      	movs	r2, #0
  403716:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
  403718:	7bfb      	ldrb	r3, [r7, #15]
  40371a:	687a      	ldr	r2, [r7, #4]
  40371c:	3310      	adds	r3, #16
  40371e:	015b      	lsls	r3, r3, #5
  403720:	4413      	add	r3, r2
  403722:	3304      	adds	r3, #4
  403724:	2200      	movs	r2, #0
  403726:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
  403728:	7bfb      	ldrb	r3, [r7, #15]
  40372a:	687a      	ldr	r2, [r7, #4]
  40372c:	015b      	lsls	r3, r3, #5
  40372e:	4413      	add	r3, r2
  403730:	f503 7302 	add.w	r3, r3, #520	; 0x208
  403734:	2200      	movs	r2, #0
  403736:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
  403738:	7bfb      	ldrb	r3, [r7, #15]
  40373a:	687a      	ldr	r2, [r7, #4]
  40373c:	015b      	lsls	r3, r3, #5
  40373e:	4413      	add	r3, r2
  403740:	f503 7305 	add.w	r3, r3, #532	; 0x214
  403744:	2200      	movs	r2, #0
  403746:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
  403748:	7bfb      	ldrb	r3, [r7, #15]
  40374a:	687a      	ldr	r2, [r7, #4]
  40374c:	015b      	lsls	r3, r3, #5
  40374e:	4413      	add	r3, r2
  403750:	f503 7306 	add.w	r3, r3, #536	; 0x218
  403754:	2200      	movs	r2, #0
  403756:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
  403758:	7bfb      	ldrb	r3, [r7, #15]
  40375a:	687a      	ldr	r2, [r7, #4]
  40375c:	015b      	lsls	r3, r3, #5
  40375e:	4413      	add	r3, r2
  403760:	f503 7307 	add.w	r3, r3, #540	; 0x21c
  403764:	2200      	movs	r2, #0
  403766:	601a      	str	r2, [r3, #0]
		return;
  403768:	e050      	b.n	40380c <can_mailbox_init+0x11a>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  40376a:	7bfb      	ldrb	r3, [r7, #15]
  40376c:	7bfa      	ldrb	r2, [r7, #15]
  40376e:	6879      	ldr	r1, [r7, #4]
  403770:	3210      	adds	r2, #16
  403772:	0152      	lsls	r2, r2, #5
  403774:	440a      	add	r2, r1
  403776:	6812      	ldr	r2, [r2, #0]
  403778:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
  40377c:	6839      	ldr	r1, [r7, #0]
  40377e:	79c9      	ldrb	r1, [r1, #7]
  403780:	0409      	lsls	r1, r1, #16
			~CAN_MMR_PRIOR_Msk) |
  403782:	430a      	orrs	r2, r1
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  403784:	6879      	ldr	r1, [r7, #4]
  403786:	3310      	adds	r3, #16
  403788:	015b      	lsls	r3, r3, #5
  40378a:	440b      	add	r3, r1
  40378c:	601a      	str	r2, [r3, #0]

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
  40378e:	683b      	ldr	r3, [r7, #0]
  403790:	795b      	ldrb	r3, [r3, #5]
  403792:	2b00      	cmp	r3, #0
  403794:	d016      	beq.n	4037c4 <can_mailbox_init+0xd2>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
  403796:	7bfb      	ldrb	r3, [r7, #15]
  403798:	683a      	ldr	r2, [r7, #0]
  40379a:	68d2      	ldr	r2, [r2, #12]
  40379c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4037a0:	6879      	ldr	r1, [r7, #4]
  4037a2:	3310      	adds	r3, #16
  4037a4:	015b      	lsls	r3, r3, #5
  4037a6:	440b      	add	r3, r1
  4037a8:	3304      	adds	r3, #4
  4037aa:	601a      	str	r2, [r3, #0]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
  4037ac:	7bfb      	ldrb	r3, [r7, #15]
  4037ae:	683a      	ldr	r2, [r7, #0]
  4037b0:	6912      	ldr	r2, [r2, #16]
  4037b2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4037b6:	6879      	ldr	r1, [r7, #4]
  4037b8:	015b      	lsls	r3, r3, #5
  4037ba:	440b      	add	r3, r1
  4037bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
  4037c0:	601a      	str	r2, [r3, #0]
  4037c2:	e011      	b.n	4037e8 <can_mailbox_init+0xf6>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
  4037c4:	7bfb      	ldrb	r3, [r7, #15]
  4037c6:	683a      	ldr	r2, [r7, #0]
  4037c8:	68d2      	ldr	r2, [r2, #12]
  4037ca:	6879      	ldr	r1, [r7, #4]
  4037cc:	3310      	adds	r3, #16
  4037ce:	015b      	lsls	r3, r3, #5
  4037d0:	440b      	add	r3, r1
  4037d2:	3304      	adds	r3, #4
  4037d4:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
  4037d6:	7bfb      	ldrb	r3, [r7, #15]
  4037d8:	683a      	ldr	r2, [r7, #0]
  4037da:	6912      	ldr	r2, [r2, #16]
  4037dc:	6879      	ldr	r1, [r7, #4]
  4037de:	015b      	lsls	r3, r3, #5
  4037e0:	440b      	add	r3, r1
  4037e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
  4037e6:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  4037e8:	7bfb      	ldrb	r3, [r7, #15]
  4037ea:	7bfa      	ldrb	r2, [r7, #15]
  4037ec:	6879      	ldr	r1, [r7, #4]
  4037ee:	3210      	adds	r2, #16
  4037f0:	0152      	lsls	r2, r2, #5
  4037f2:	440a      	add	r2, r1
  4037f4:	6812      	ldr	r2, [r2, #0]
  4037f6:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
  4037fa:	6839      	ldr	r1, [r7, #0]
  4037fc:	7909      	ldrb	r1, [r1, #4]
  4037fe:	0609      	lsls	r1, r1, #24
			~CAN_MMR_MOT_Msk) |
  403800:	430a      	orrs	r2, r1
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  403802:	6879      	ldr	r1, [r7, #4]
  403804:	3310      	adds	r3, #16
  403806:	015b      	lsls	r3, r3, #5
  403808:	440b      	add	r3, r1
  40380a:	601a      	str	r2, [r3, #0]
}
  40380c:	3714      	adds	r7, #20
  40380e:	46bd      	mov	sp, r7
  403810:	f85d 7b04 	ldr.w	r7, [sp], #4
  403814:	4770      	bx	lr
	...

00403818 <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
  403818:	b580      	push	{r7, lr}
  40381a:	b086      	sub	sp, #24
  40381c:	af00      	add	r7, sp, #0
  40381e:	6078      	str	r0, [r7, #4]
  403820:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
  403822:	2300      	movs	r3, #0
  403824:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
  403826:	683b      	ldr	r3, [r7, #0]
  403828:	681b      	ldr	r3, [r3, #0]
  40382a:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
  40382c:	683b      	ldr	r3, [r7, #0]
  40382e:	689b      	ldr	r3, [r3, #8]
  403830:	60fb      	str	r3, [r7, #12]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
  403832:	68fb      	ldr	r3, [r7, #12]
  403834:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
  403838:	2b00      	cmp	r3, #0
  40383a:	d006      	beq.n	40384a <can_mailbox_read+0x32>
  40383c:	68fb      	ldr	r3, [r7, #12]
  40383e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  403842:	2b00      	cmp	r3, #0
  403844:	d001      	beq.n	40384a <can_mailbox_read+0x32>
		ul_retval = CAN_MAILBOX_RX_OVER;
  403846:	2302      	movs	r3, #2
  403848:	617b      	str	r3, [r7, #20]
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
  40384a:	7cfb      	ldrb	r3, [r7, #19]
  40384c:	687a      	ldr	r2, [r7, #4]
  40384e:	015b      	lsls	r3, r3, #5
  403850:	4413      	add	r3, r2
  403852:	f503 7303 	add.w	r3, r3, #524	; 0x20c
  403856:	681b      	ldr	r3, [r3, #0]
  403858:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
  40385c:	683b      	ldr	r3, [r7, #0]
  40385e:	615a      	str	r2, [r3, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
  403860:	68fb      	ldr	r3, [r7, #12]
  403862:	0c1b      	lsrs	r3, r3, #16
  403864:	b2db      	uxtb	r3, r3
  403866:	f003 030f 	and.w	r3, r3, #15
  40386a:	b2da      	uxtb	r2, r3
  40386c:	683b      	ldr	r3, [r7, #0]
  40386e:	719a      	strb	r2, [r3, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
  403870:	7cfb      	ldrb	r3, [r7, #19]
  403872:	687a      	ldr	r2, [r7, #4]
  403874:	015b      	lsls	r3, r3, #5
  403876:	4413      	add	r3, r2
  403878:	f503 7305 	add.w	r3, r3, #532	; 0x214
  40387c:	681a      	ldr	r2, [r3, #0]
  40387e:	683b      	ldr	r3, [r7, #0]
  403880:	619a      	str	r2, [r3, #24]
	if (p_mailbox->uc_length > 4) {
  403882:	683b      	ldr	r3, [r7, #0]
  403884:	799b      	ldrb	r3, [r3, #6]
  403886:	2b04      	cmp	r3, #4
  403888:	d908      	bls.n	40389c <can_mailbox_read+0x84>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
  40388a:	7cfb      	ldrb	r3, [r7, #19]
  40388c:	687a      	ldr	r2, [r7, #4]
  40388e:	015b      	lsls	r3, r3, #5
  403890:	4413      	add	r3, r2
  403892:	f503 7306 	add.w	r3, r3, #536	; 0x218
  403896:	681a      	ldr	r2, [r3, #0]
  403898:	683b      	ldr	r3, [r7, #0]
  40389a:	61da      	str	r2, [r3, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
  40389c:	7cfb      	ldrb	r3, [r7, #19]
  40389e:	687a      	ldr	r2, [r7, #4]
  4038a0:	015b      	lsls	r3, r3, #5
  4038a2:	4413      	add	r3, r2
  4038a4:	f503 7304 	add.w	r3, r3, #528	; 0x210
  4038a8:	681a      	ldr	r2, [r3, #0]
  4038aa:	683b      	ldr	r3, [r7, #0]
  4038ac:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
  4038ae:	683b      	ldr	r3, [r7, #0]
  4038b0:	689b      	ldr	r3, [r3, #8]
  4038b2:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {
  4038b4:	68fb      	ldr	r3, [r7, #12]
  4038b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4038ba:	2b00      	cmp	r3, #0
  4038bc:	d003      	beq.n	4038c6 <can_mailbox_read+0xae>
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
  4038be:	697b      	ldr	r3, [r7, #20]
  4038c0:	f043 0304 	orr.w	r3, r3, #4
  4038c4:	617b      	str	r3, [r7, #20]
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
  4038c6:	6839      	ldr	r1, [r7, #0]
  4038c8:	6878      	ldr	r0, [r7, #4]
  4038ca:	4b03      	ldr	r3, [pc, #12]	; (4038d8 <can_mailbox_read+0xc0>)
  4038cc:	4798      	blx	r3

	return ul_retval;
  4038ce:	697b      	ldr	r3, [r7, #20]
}
  4038d0:	4618      	mov	r0, r3
  4038d2:	3718      	adds	r7, #24
  4038d4:	46bd      	mov	sp, r7
  4038d6:	bd80      	pop	{r7, pc}
  4038d8:	004036bb 	.word	0x004036bb

004038dc <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
  4038dc:	b580      	push	{r7, lr}
  4038de:	b084      	sub	sp, #16
  4038e0:	af00      	add	r7, sp, #0
  4038e2:	6078      	str	r0, [r7, #4]
  4038e4:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
  4038e6:	683b      	ldr	r3, [r7, #0]
  4038e8:	681b      	ldr	r3, [r3, #0]
  4038ea:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
  4038ec:	7bfb      	ldrb	r3, [r7, #15]
  4038ee:	4619      	mov	r1, r3
  4038f0:	6878      	ldr	r0, [r7, #4]
  4038f2:	4b27      	ldr	r3, [pc, #156]	; (403990 <can_mailbox_write+0xb4>)
  4038f4:	4798      	blx	r3
  4038f6:	4602      	mov	r2, r0
  4038f8:	683b      	ldr	r3, [r7, #0]
  4038fa:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
  4038fc:	683b      	ldr	r3, [r7, #0]
  4038fe:	689b      	ldr	r3, [r3, #8]
  403900:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
  403902:	68bb      	ldr	r3, [r7, #8]
  403904:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
  403908:	2b00      	cmp	r3, #0
  40390a:	d101      	bne.n	403910 <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
  40390c:	2301      	movs	r3, #1
  40390e:	e03b      	b.n	403988 <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
  403910:	683b      	ldr	r3, [r7, #0]
  403912:	795b      	ldrb	r3, [r3, #5]
  403914:	2b00      	cmp	r3, #0
  403916:	d00b      	beq.n	403930 <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
  403918:	7bfb      	ldrb	r3, [r7, #15]
  40391a:	683a      	ldr	r2, [r7, #0]
  40391c:	6912      	ldr	r2, [r2, #16]
  40391e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  403922:	6879      	ldr	r1, [r7, #4]
  403924:	015b      	lsls	r3, r3, #5
  403926:	440b      	add	r3, r1
  403928:	f503 7302 	add.w	r3, r3, #520	; 0x208
  40392c:	601a      	str	r2, [r3, #0]
  40392e:	e008      	b.n	403942 <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
  403930:	7bfb      	ldrb	r3, [r7, #15]
  403932:	683a      	ldr	r2, [r7, #0]
  403934:	6912      	ldr	r2, [r2, #16]
  403936:	6879      	ldr	r1, [r7, #4]
  403938:	015b      	lsls	r3, r3, #5
  40393a:	440b      	add	r3, r1
  40393c:	f503 7302 	add.w	r3, r3, #520	; 0x208
  403940:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
  403942:	7bfb      	ldrb	r3, [r7, #15]
  403944:	683a      	ldr	r2, [r7, #0]
  403946:	6992      	ldr	r2, [r2, #24]
  403948:	6879      	ldr	r1, [r7, #4]
  40394a:	015b      	lsls	r3, r3, #5
  40394c:	440b      	add	r3, r1
  40394e:	f503 7305 	add.w	r3, r3, #532	; 0x214
  403952:	601a      	str	r2, [r3, #0]
	if (p_mailbox->uc_length > 4) {
  403954:	683b      	ldr	r3, [r7, #0]
  403956:	799b      	ldrb	r3, [r3, #6]
  403958:	2b04      	cmp	r3, #4
  40395a:	d908      	bls.n	40396e <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
  40395c:	7bfb      	ldrb	r3, [r7, #15]
  40395e:	683a      	ldr	r2, [r7, #0]
  403960:	69d2      	ldr	r2, [r2, #28]
  403962:	6879      	ldr	r1, [r7, #4]
  403964:	015b      	lsls	r3, r3, #5
  403966:	440b      	add	r3, r1
  403968:	f503 7306 	add.w	r3, r3, #536	; 0x218
  40396c:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
  40396e:	7bfb      	ldrb	r3, [r7, #15]
  403970:	683a      	ldr	r2, [r7, #0]
  403972:	7992      	ldrb	r2, [r2, #6]
  403974:	0412      	lsls	r2, r2, #16
  403976:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40397a:	6879      	ldr	r1, [r7, #4]
  40397c:	015b      	lsls	r3, r3, #5
  40397e:	440b      	add	r3, r1
  403980:	f503 7307 	add.w	r3, r3, #540	; 0x21c
  403984:	601a      	str	r2, [r3, #0]

	return CAN_MAILBOX_TRANSFER_OK;
  403986:	2300      	movs	r3, #0
}
  403988:	4618      	mov	r0, r3
  40398a:	3710      	adds	r7, #16
  40398c:	46bd      	mov	sp, r7
  40398e:	bd80      	pop	{r7, pc}
  403990:	00403695 	.word	0x00403695

00403994 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
  403994:	b580      	push	{r7, lr}
  403996:	b08c      	sub	sp, #48	; 0x30
  403998:	af00      	add	r7, sp, #0
  40399a:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
  40399c:	2300      	movs	r3, #0
  40399e:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
  4039a0:	2300      	movs	r3, #0
  4039a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  4039a6:	e00d      	b.n	4039c4 <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
  4039a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4039ac:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
  4039ae:	f107 030c 	add.w	r3, r7, #12
  4039b2:	4619      	mov	r1, r3
  4039b4:	6878      	ldr	r0, [r7, #4]
  4039b6:	4b07      	ldr	r3, [pc, #28]	; (4039d4 <can_reset_all_mailbox+0x40>)
  4039b8:	4798      	blx	r3
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
  4039ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4039be:	3301      	adds	r3, #1
  4039c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  4039c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4039c8:	2b07      	cmp	r3, #7
  4039ca:	d9ed      	bls.n	4039a8 <can_reset_all_mailbox+0x14>
	}
}
  4039cc:	bf00      	nop
  4039ce:	3730      	adds	r7, #48	; 0x30
  4039d0:	46bd      	mov	sp, r7
  4039d2:	bd80      	pop	{r7, pc}
  4039d4:	004036f3 	.word	0x004036f3

004039d8 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  4039d8:	b480      	push	{r7}
  4039da:	b085      	sub	sp, #20
  4039dc:	af00      	add	r7, sp, #0
  4039de:	60f8      	str	r0, [r7, #12]
  4039e0:	60b9      	str	r1, [r7, #8]
  4039e2:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4039e4:	687b      	ldr	r3, [r7, #4]
  4039e6:	2b00      	cmp	r3, #0
  4039e8:	d003      	beq.n	4039f2 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4039ea:	68fb      	ldr	r3, [r7, #12]
  4039ec:	68ba      	ldr	r2, [r7, #8]
  4039ee:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  4039f0:	e002      	b.n	4039f8 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  4039f2:	68fb      	ldr	r3, [r7, #12]
  4039f4:	68ba      	ldr	r2, [r7, #8]
  4039f6:	661a      	str	r2, [r3, #96]	; 0x60
}
  4039f8:	bf00      	nop
  4039fa:	3714      	adds	r7, #20
  4039fc:	46bd      	mov	sp, r7
  4039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a02:	4770      	bx	lr

00403a04 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  403a04:	b480      	push	{r7}
  403a06:	b083      	sub	sp, #12
  403a08:	af00      	add	r7, sp, #0
  403a0a:	6078      	str	r0, [r7, #4]
  403a0c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  403a0e:	687b      	ldr	r3, [r7, #4]
  403a10:	683a      	ldr	r2, [r7, #0]
  403a12:	635a      	str	r2, [r3, #52]	; 0x34
}
  403a14:	bf00      	nop
  403a16:	370c      	adds	r7, #12
  403a18:	46bd      	mov	sp, r7
  403a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a1e:	4770      	bx	lr

00403a20 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  403a20:	b480      	push	{r7}
  403a22:	b087      	sub	sp, #28
  403a24:	af00      	add	r7, sp, #0
  403a26:	60f8      	str	r0, [r7, #12]
  403a28:	60b9      	str	r1, [r7, #8]
  403a2a:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  403a2c:	68fb      	ldr	r3, [r7, #12]
  403a2e:	687a      	ldr	r2, [r7, #4]
  403a30:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  403a32:	68bb      	ldr	r3, [r7, #8]
  403a34:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403a38:	d04a      	beq.n	403ad0 <pio_set_peripheral+0xb0>
  403a3a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403a3e:	d808      	bhi.n	403a52 <pio_set_peripheral+0x32>
  403a40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  403a44:	d016      	beq.n	403a74 <pio_set_peripheral+0x54>
  403a46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403a4a:	d02c      	beq.n	403aa6 <pio_set_peripheral+0x86>
  403a4c:	2b00      	cmp	r3, #0
  403a4e:	d069      	beq.n	403b24 <pio_set_peripheral+0x104>
  403a50:	e064      	b.n	403b1c <pio_set_peripheral+0xfc>
  403a52:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403a56:	d065      	beq.n	403b24 <pio_set_peripheral+0x104>
  403a58:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403a5c:	d803      	bhi.n	403a66 <pio_set_peripheral+0x46>
  403a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  403a62:	d04a      	beq.n	403afa <pio_set_peripheral+0xda>
  403a64:	e05a      	b.n	403b1c <pio_set_peripheral+0xfc>
  403a66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403a6a:	d05b      	beq.n	403b24 <pio_set_peripheral+0x104>
  403a6c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403a70:	d058      	beq.n	403b24 <pio_set_peripheral+0x104>
  403a72:	e053      	b.n	403b1c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403a74:	68fb      	ldr	r3, [r7, #12]
  403a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403a78:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403a7a:	68fb      	ldr	r3, [r7, #12]
  403a7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403a7e:	687b      	ldr	r3, [r7, #4]
  403a80:	43d9      	mvns	r1, r3
  403a82:	697b      	ldr	r3, [r7, #20]
  403a84:	400b      	ands	r3, r1
  403a86:	401a      	ands	r2, r3
  403a88:	68fb      	ldr	r3, [r7, #12]
  403a8a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403a8c:	68fb      	ldr	r3, [r7, #12]
  403a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403a90:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403a92:	68fb      	ldr	r3, [r7, #12]
  403a94:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403a96:	687b      	ldr	r3, [r7, #4]
  403a98:	43d9      	mvns	r1, r3
  403a9a:	697b      	ldr	r3, [r7, #20]
  403a9c:	400b      	ands	r3, r1
  403a9e:	401a      	ands	r2, r3
  403aa0:	68fb      	ldr	r3, [r7, #12]
  403aa2:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  403aa4:	e03a      	b.n	403b1c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403aa6:	68fb      	ldr	r3, [r7, #12]
  403aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403aaa:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403aac:	687a      	ldr	r2, [r7, #4]
  403aae:	697b      	ldr	r3, [r7, #20]
  403ab0:	431a      	orrs	r2, r3
  403ab2:	68fb      	ldr	r3, [r7, #12]
  403ab4:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403ab6:	68fb      	ldr	r3, [r7, #12]
  403ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403aba:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403abc:	68fb      	ldr	r3, [r7, #12]
  403abe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403ac0:	687b      	ldr	r3, [r7, #4]
  403ac2:	43d9      	mvns	r1, r3
  403ac4:	697b      	ldr	r3, [r7, #20]
  403ac6:	400b      	ands	r3, r1
  403ac8:	401a      	ands	r2, r3
  403aca:	68fb      	ldr	r3, [r7, #12]
  403acc:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  403ace:	e025      	b.n	403b1c <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403ad0:	68fb      	ldr	r3, [r7, #12]
  403ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403ad4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403ad6:	68fb      	ldr	r3, [r7, #12]
  403ad8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403ada:	687b      	ldr	r3, [r7, #4]
  403adc:	43d9      	mvns	r1, r3
  403ade:	697b      	ldr	r3, [r7, #20]
  403ae0:	400b      	ands	r3, r1
  403ae2:	401a      	ands	r2, r3
  403ae4:	68fb      	ldr	r3, [r7, #12]
  403ae6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403ae8:	68fb      	ldr	r3, [r7, #12]
  403aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403aec:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403aee:	687a      	ldr	r2, [r7, #4]
  403af0:	697b      	ldr	r3, [r7, #20]
  403af2:	431a      	orrs	r2, r3
  403af4:	68fb      	ldr	r3, [r7, #12]
  403af6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  403af8:	e010      	b.n	403b1c <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403afa:	68fb      	ldr	r3, [r7, #12]
  403afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403afe:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403b00:	687a      	ldr	r2, [r7, #4]
  403b02:	697b      	ldr	r3, [r7, #20]
  403b04:	431a      	orrs	r2, r3
  403b06:	68fb      	ldr	r3, [r7, #12]
  403b08:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403b0a:	68fb      	ldr	r3, [r7, #12]
  403b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403b0e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403b10:	687a      	ldr	r2, [r7, #4]
  403b12:	697b      	ldr	r3, [r7, #20]
  403b14:	431a      	orrs	r2, r3
  403b16:	68fb      	ldr	r3, [r7, #12]
  403b18:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  403b1a:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  403b1c:	68fb      	ldr	r3, [r7, #12]
  403b1e:	687a      	ldr	r2, [r7, #4]
  403b20:	605a      	str	r2, [r3, #4]
  403b22:	e000      	b.n	403b26 <pio_set_peripheral+0x106>
		return;
  403b24:	bf00      	nop
}
  403b26:	371c      	adds	r7, #28
  403b28:	46bd      	mov	sp, r7
  403b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b2e:	4770      	bx	lr

00403b30 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  403b30:	b580      	push	{r7, lr}
  403b32:	b084      	sub	sp, #16
  403b34:	af00      	add	r7, sp, #0
  403b36:	60f8      	str	r0, [r7, #12]
  403b38:	60b9      	str	r1, [r7, #8]
  403b3a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  403b3c:	68b9      	ldr	r1, [r7, #8]
  403b3e:	68f8      	ldr	r0, [r7, #12]
  403b40:	4b19      	ldr	r3, [pc, #100]	; (403ba8 <pio_set_input+0x78>)
  403b42:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  403b44:	687b      	ldr	r3, [r7, #4]
  403b46:	f003 0301 	and.w	r3, r3, #1
  403b4a:	461a      	mov	r2, r3
  403b4c:	68b9      	ldr	r1, [r7, #8]
  403b4e:	68f8      	ldr	r0, [r7, #12]
  403b50:	4b16      	ldr	r3, [pc, #88]	; (403bac <pio_set_input+0x7c>)
  403b52:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  403b54:	687b      	ldr	r3, [r7, #4]
  403b56:	f003 030a 	and.w	r3, r3, #10
  403b5a:	2b00      	cmp	r3, #0
  403b5c:	d003      	beq.n	403b66 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  403b5e:	68fb      	ldr	r3, [r7, #12]
  403b60:	68ba      	ldr	r2, [r7, #8]
  403b62:	621a      	str	r2, [r3, #32]
  403b64:	e002      	b.n	403b6c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  403b66:	68fb      	ldr	r3, [r7, #12]
  403b68:	68ba      	ldr	r2, [r7, #8]
  403b6a:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  403b6c:	687b      	ldr	r3, [r7, #4]
  403b6e:	f003 0302 	and.w	r3, r3, #2
  403b72:	2b00      	cmp	r3, #0
  403b74:	d004      	beq.n	403b80 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  403b76:	68fb      	ldr	r3, [r7, #12]
  403b78:	68ba      	ldr	r2, [r7, #8]
  403b7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  403b7e:	e008      	b.n	403b92 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  403b80:	687b      	ldr	r3, [r7, #4]
  403b82:	f003 0308 	and.w	r3, r3, #8
  403b86:	2b00      	cmp	r3, #0
  403b88:	d003      	beq.n	403b92 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  403b8a:	68fb      	ldr	r3, [r7, #12]
  403b8c:	68ba      	ldr	r2, [r7, #8]
  403b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  403b92:	68fb      	ldr	r3, [r7, #12]
  403b94:	68ba      	ldr	r2, [r7, #8]
  403b96:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  403b98:	68fb      	ldr	r3, [r7, #12]
  403b9a:	68ba      	ldr	r2, [r7, #8]
  403b9c:	601a      	str	r2, [r3, #0]
}
  403b9e:	bf00      	nop
  403ba0:	3710      	adds	r7, #16
  403ba2:	46bd      	mov	sp, r7
  403ba4:	bd80      	pop	{r7, pc}
  403ba6:	bf00      	nop
  403ba8:	00403ce1 	.word	0x00403ce1
  403bac:	004039d9 	.word	0x004039d9

00403bb0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  403bb0:	b580      	push	{r7, lr}
  403bb2:	b084      	sub	sp, #16
  403bb4:	af00      	add	r7, sp, #0
  403bb6:	60f8      	str	r0, [r7, #12]
  403bb8:	60b9      	str	r1, [r7, #8]
  403bba:	607a      	str	r2, [r7, #4]
  403bbc:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  403bbe:	68b9      	ldr	r1, [r7, #8]
  403bc0:	68f8      	ldr	r0, [r7, #12]
  403bc2:	4b12      	ldr	r3, [pc, #72]	; (403c0c <pio_set_output+0x5c>)
  403bc4:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  403bc6:	69ba      	ldr	r2, [r7, #24]
  403bc8:	68b9      	ldr	r1, [r7, #8]
  403bca:	68f8      	ldr	r0, [r7, #12]
  403bcc:	4b10      	ldr	r3, [pc, #64]	; (403c10 <pio_set_output+0x60>)
  403bce:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  403bd0:	683b      	ldr	r3, [r7, #0]
  403bd2:	2b00      	cmp	r3, #0
  403bd4:	d003      	beq.n	403bde <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  403bd6:	68fb      	ldr	r3, [r7, #12]
  403bd8:	68ba      	ldr	r2, [r7, #8]
  403bda:	651a      	str	r2, [r3, #80]	; 0x50
  403bdc:	e002      	b.n	403be4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  403bde:	68fb      	ldr	r3, [r7, #12]
  403be0:	68ba      	ldr	r2, [r7, #8]
  403be2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  403be4:	687b      	ldr	r3, [r7, #4]
  403be6:	2b00      	cmp	r3, #0
  403be8:	d003      	beq.n	403bf2 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  403bea:	68fb      	ldr	r3, [r7, #12]
  403bec:	68ba      	ldr	r2, [r7, #8]
  403bee:	631a      	str	r2, [r3, #48]	; 0x30
  403bf0:	e002      	b.n	403bf8 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  403bf2:	68fb      	ldr	r3, [r7, #12]
  403bf4:	68ba      	ldr	r2, [r7, #8]
  403bf6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  403bf8:	68fb      	ldr	r3, [r7, #12]
  403bfa:	68ba      	ldr	r2, [r7, #8]
  403bfc:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  403bfe:	68fb      	ldr	r3, [r7, #12]
  403c00:	68ba      	ldr	r2, [r7, #8]
  403c02:	601a      	str	r2, [r3, #0]
}
  403c04:	bf00      	nop
  403c06:	3710      	adds	r7, #16
  403c08:	46bd      	mov	sp, r7
  403c0a:	bd80      	pop	{r7, pc}
  403c0c:	00403ce1 	.word	0x00403ce1
  403c10:	004039d9 	.word	0x004039d9

00403c14 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  403c14:	b590      	push	{r4, r7, lr}
  403c16:	b087      	sub	sp, #28
  403c18:	af02      	add	r7, sp, #8
  403c1a:	60f8      	str	r0, [r7, #12]
  403c1c:	60b9      	str	r1, [r7, #8]
  403c1e:	607a      	str	r2, [r7, #4]
  403c20:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  403c22:	68bb      	ldr	r3, [r7, #8]
  403c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  403c28:	d016      	beq.n	403c58 <pio_configure+0x44>
  403c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  403c2e:	d809      	bhi.n	403c44 <pio_configure+0x30>
  403c30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403c34:	d010      	beq.n	403c58 <pio_configure+0x44>
  403c36:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403c3a:	d00d      	beq.n	403c58 <pio_configure+0x44>
  403c3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  403c40:	d00a      	beq.n	403c58 <pio_configure+0x44>
  403c42:	e03d      	b.n	403cc0 <pio_configure+0xac>
  403c44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403c48:	d01a      	beq.n	403c80 <pio_configure+0x6c>
  403c4a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403c4e:	d017      	beq.n	403c80 <pio_configure+0x6c>
  403c50:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403c54:	d00e      	beq.n	403c74 <pio_configure+0x60>
  403c56:	e033      	b.n	403cc0 <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  403c58:	687a      	ldr	r2, [r7, #4]
  403c5a:	68b9      	ldr	r1, [r7, #8]
  403c5c:	68f8      	ldr	r0, [r7, #12]
  403c5e:	4b1c      	ldr	r3, [pc, #112]	; (403cd0 <pio_configure+0xbc>)
  403c60:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  403c62:	683b      	ldr	r3, [r7, #0]
  403c64:	f003 0301 	and.w	r3, r3, #1
  403c68:	461a      	mov	r2, r3
  403c6a:	6879      	ldr	r1, [r7, #4]
  403c6c:	68f8      	ldr	r0, [r7, #12]
  403c6e:	4b19      	ldr	r3, [pc, #100]	; (403cd4 <pio_configure+0xc0>)
  403c70:	4798      	blx	r3
		break;
  403c72:	e027      	b.n	403cc4 <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  403c74:	683a      	ldr	r2, [r7, #0]
  403c76:	6879      	ldr	r1, [r7, #4]
  403c78:	68f8      	ldr	r0, [r7, #12]
  403c7a:	4b17      	ldr	r3, [pc, #92]	; (403cd8 <pio_configure+0xc4>)
  403c7c:	4798      	blx	r3
		break;
  403c7e:	e021      	b.n	403cc4 <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  403c80:	68bb      	ldr	r3, [r7, #8]
  403c82:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403c86:	bf0c      	ite	eq
  403c88:	2301      	moveq	r3, #1
  403c8a:	2300      	movne	r3, #0
  403c8c:	b2db      	uxtb	r3, r3
  403c8e:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  403c90:	683b      	ldr	r3, [r7, #0]
  403c92:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  403c96:	2b00      	cmp	r3, #0
  403c98:	bf14      	ite	ne
  403c9a:	2301      	movne	r3, #1
  403c9c:	2300      	moveq	r3, #0
  403c9e:	b2db      	uxtb	r3, r3
  403ca0:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  403ca2:	683b      	ldr	r3, [r7, #0]
  403ca4:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  403ca8:	2b00      	cmp	r3, #0
  403caa:	bf14      	ite	ne
  403cac:	2301      	movne	r3, #1
  403cae:	2300      	moveq	r3, #0
  403cb0:	b2db      	uxtb	r3, r3
  403cb2:	9300      	str	r3, [sp, #0]
  403cb4:	460b      	mov	r3, r1
  403cb6:	6879      	ldr	r1, [r7, #4]
  403cb8:	68f8      	ldr	r0, [r7, #12]
  403cba:	4c08      	ldr	r4, [pc, #32]	; (403cdc <pio_configure+0xc8>)
  403cbc:	47a0      	blx	r4
		break;
  403cbe:	e001      	b.n	403cc4 <pio_configure+0xb0>

	default:
		return 0;
  403cc0:	2300      	movs	r3, #0
  403cc2:	e000      	b.n	403cc6 <pio_configure+0xb2>
	}

	return 1;
  403cc4:	2301      	movs	r3, #1
}
  403cc6:	4618      	mov	r0, r3
  403cc8:	3714      	adds	r7, #20
  403cca:	46bd      	mov	sp, r7
  403ccc:	bd90      	pop	{r4, r7, pc}
  403cce:	bf00      	nop
  403cd0:	00403a21 	.word	0x00403a21
  403cd4:	004039d9 	.word	0x004039d9
  403cd8:	00403b31 	.word	0x00403b31
  403cdc:	00403bb1 	.word	0x00403bb1

00403ce0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  403ce0:	b480      	push	{r7}
  403ce2:	b083      	sub	sp, #12
  403ce4:	af00      	add	r7, sp, #0
  403ce6:	6078      	str	r0, [r7, #4]
  403ce8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  403cea:	687b      	ldr	r3, [r7, #4]
  403cec:	683a      	ldr	r2, [r7, #0]
  403cee:	645a      	str	r2, [r3, #68]	; 0x44
}
  403cf0:	bf00      	nop
  403cf2:	370c      	adds	r7, #12
  403cf4:	46bd      	mov	sp, r7
  403cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
  403cfa:	4770      	bx	lr

00403cfc <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  403cfc:	b480      	push	{r7}
  403cfe:	b083      	sub	sp, #12
  403d00:	af00      	add	r7, sp, #0
  403d02:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  403d04:	687b      	ldr	r3, [r7, #4]
  403d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  403d08:	4618      	mov	r0, r3
  403d0a:	370c      	adds	r7, #12
  403d0c:	46bd      	mov	sp, r7
  403d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d12:	4770      	bx	lr

00403d14 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  403d14:	b480      	push	{r7}
  403d16:	b083      	sub	sp, #12
  403d18:	af00      	add	r7, sp, #0
  403d1a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  403d1c:	687b      	ldr	r3, [r7, #4]
  403d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  403d20:	4618      	mov	r0, r3
  403d22:	370c      	adds	r7, #12
  403d24:	46bd      	mov	sp, r7
  403d26:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d2a:	4770      	bx	lr

00403d2c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  403d2c:	b480      	push	{r7}
  403d2e:	b083      	sub	sp, #12
  403d30:	af00      	add	r7, sp, #0
  403d32:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  403d34:	687b      	ldr	r3, [r7, #4]
  403d36:	2b2f      	cmp	r3, #47	; 0x2f
  403d38:	d901      	bls.n	403d3e <pmc_enable_periph_clk+0x12>
		return 1;
  403d3a:	2301      	movs	r3, #1
  403d3c:	e02f      	b.n	403d9e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  403d3e:	687b      	ldr	r3, [r7, #4]
  403d40:	2b1f      	cmp	r3, #31
  403d42:	d813      	bhi.n	403d6c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  403d44:	4b19      	ldr	r3, [pc, #100]	; (403dac <pmc_enable_periph_clk+0x80>)
  403d46:	699a      	ldr	r2, [r3, #24]
  403d48:	2101      	movs	r1, #1
  403d4a:	687b      	ldr	r3, [r7, #4]
  403d4c:	fa01 f303 	lsl.w	r3, r1, r3
  403d50:	401a      	ands	r2, r3
  403d52:	2101      	movs	r1, #1
  403d54:	687b      	ldr	r3, [r7, #4]
  403d56:	fa01 f303 	lsl.w	r3, r1, r3
  403d5a:	429a      	cmp	r2, r3
  403d5c:	d01e      	beq.n	403d9c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  403d5e:	4a13      	ldr	r2, [pc, #76]	; (403dac <pmc_enable_periph_clk+0x80>)
  403d60:	2101      	movs	r1, #1
  403d62:	687b      	ldr	r3, [r7, #4]
  403d64:	fa01 f303 	lsl.w	r3, r1, r3
  403d68:	6113      	str	r3, [r2, #16]
  403d6a:	e017      	b.n	403d9c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  403d6c:	687b      	ldr	r3, [r7, #4]
  403d6e:	3b20      	subs	r3, #32
  403d70:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403d72:	4b0e      	ldr	r3, [pc, #56]	; (403dac <pmc_enable_periph_clk+0x80>)
  403d74:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  403d78:	2101      	movs	r1, #1
  403d7a:	687b      	ldr	r3, [r7, #4]
  403d7c:	fa01 f303 	lsl.w	r3, r1, r3
  403d80:	401a      	ands	r2, r3
  403d82:	2101      	movs	r1, #1
  403d84:	687b      	ldr	r3, [r7, #4]
  403d86:	fa01 f303 	lsl.w	r3, r1, r3
  403d8a:	429a      	cmp	r2, r3
  403d8c:	d006      	beq.n	403d9c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  403d8e:	4a07      	ldr	r2, [pc, #28]	; (403dac <pmc_enable_periph_clk+0x80>)
  403d90:	2101      	movs	r1, #1
  403d92:	687b      	ldr	r3, [r7, #4]
  403d94:	fa01 f303 	lsl.w	r3, r1, r3
  403d98:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  403d9c:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  403d9e:	4618      	mov	r0, r3
  403da0:	370c      	adds	r7, #12
  403da2:	46bd      	mov	sp, r7
  403da4:	f85d 7b04 	ldr.w	r7, [sp], #4
  403da8:	4770      	bx	lr
  403daa:	bf00      	nop
  403dac:	400e0400 	.word	0x400e0400

00403db0 <__aeabi_uldivmod>:
  403db0:	b953      	cbnz	r3, 403dc8 <__aeabi_uldivmod+0x18>
  403db2:	b94a      	cbnz	r2, 403dc8 <__aeabi_uldivmod+0x18>
  403db4:	2900      	cmp	r1, #0
  403db6:	bf08      	it	eq
  403db8:	2800      	cmpeq	r0, #0
  403dba:	bf1c      	itt	ne
  403dbc:	f04f 31ff 	movne.w	r1, #4294967295
  403dc0:	f04f 30ff 	movne.w	r0, #4294967295
  403dc4:	f000 b97a 	b.w	4040bc <__aeabi_idiv0>
  403dc8:	f1ad 0c08 	sub.w	ip, sp, #8
  403dcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403dd0:	f000 f806 	bl	403de0 <__udivmoddi4>
  403dd4:	f8dd e004 	ldr.w	lr, [sp, #4]
  403dd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403ddc:	b004      	add	sp, #16
  403dde:	4770      	bx	lr

00403de0 <__udivmoddi4>:
  403de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403de4:	468c      	mov	ip, r1
  403de6:	460d      	mov	r5, r1
  403de8:	4604      	mov	r4, r0
  403dea:	9e08      	ldr	r6, [sp, #32]
  403dec:	2b00      	cmp	r3, #0
  403dee:	d151      	bne.n	403e94 <__udivmoddi4+0xb4>
  403df0:	428a      	cmp	r2, r1
  403df2:	4617      	mov	r7, r2
  403df4:	d96d      	bls.n	403ed2 <__udivmoddi4+0xf2>
  403df6:	fab2 fe82 	clz	lr, r2
  403dfa:	f1be 0f00 	cmp.w	lr, #0
  403dfe:	d00b      	beq.n	403e18 <__udivmoddi4+0x38>
  403e00:	f1ce 0c20 	rsb	ip, lr, #32
  403e04:	fa01 f50e 	lsl.w	r5, r1, lr
  403e08:	fa20 fc0c 	lsr.w	ip, r0, ip
  403e0c:	fa02 f70e 	lsl.w	r7, r2, lr
  403e10:	ea4c 0c05 	orr.w	ip, ip, r5
  403e14:	fa00 f40e 	lsl.w	r4, r0, lr
  403e18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403e1c:	0c25      	lsrs	r5, r4, #16
  403e1e:	fbbc f8fa 	udiv	r8, ip, sl
  403e22:	fa1f f987 	uxth.w	r9, r7
  403e26:	fb0a cc18 	mls	ip, sl, r8, ip
  403e2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403e2e:	fb08 f309 	mul.w	r3, r8, r9
  403e32:	42ab      	cmp	r3, r5
  403e34:	d90a      	bls.n	403e4c <__udivmoddi4+0x6c>
  403e36:	19ed      	adds	r5, r5, r7
  403e38:	f108 32ff 	add.w	r2, r8, #4294967295
  403e3c:	f080 8123 	bcs.w	404086 <__udivmoddi4+0x2a6>
  403e40:	42ab      	cmp	r3, r5
  403e42:	f240 8120 	bls.w	404086 <__udivmoddi4+0x2a6>
  403e46:	f1a8 0802 	sub.w	r8, r8, #2
  403e4a:	443d      	add	r5, r7
  403e4c:	1aed      	subs	r5, r5, r3
  403e4e:	b2a4      	uxth	r4, r4
  403e50:	fbb5 f0fa 	udiv	r0, r5, sl
  403e54:	fb0a 5510 	mls	r5, sl, r0, r5
  403e58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403e5c:	fb00 f909 	mul.w	r9, r0, r9
  403e60:	45a1      	cmp	r9, r4
  403e62:	d909      	bls.n	403e78 <__udivmoddi4+0x98>
  403e64:	19e4      	adds	r4, r4, r7
  403e66:	f100 33ff 	add.w	r3, r0, #4294967295
  403e6a:	f080 810a 	bcs.w	404082 <__udivmoddi4+0x2a2>
  403e6e:	45a1      	cmp	r9, r4
  403e70:	f240 8107 	bls.w	404082 <__udivmoddi4+0x2a2>
  403e74:	3802      	subs	r0, #2
  403e76:	443c      	add	r4, r7
  403e78:	eba4 0409 	sub.w	r4, r4, r9
  403e7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403e80:	2100      	movs	r1, #0
  403e82:	2e00      	cmp	r6, #0
  403e84:	d061      	beq.n	403f4a <__udivmoddi4+0x16a>
  403e86:	fa24 f40e 	lsr.w	r4, r4, lr
  403e8a:	2300      	movs	r3, #0
  403e8c:	6034      	str	r4, [r6, #0]
  403e8e:	6073      	str	r3, [r6, #4]
  403e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e94:	428b      	cmp	r3, r1
  403e96:	d907      	bls.n	403ea8 <__udivmoddi4+0xc8>
  403e98:	2e00      	cmp	r6, #0
  403e9a:	d054      	beq.n	403f46 <__udivmoddi4+0x166>
  403e9c:	2100      	movs	r1, #0
  403e9e:	e886 0021 	stmia.w	r6, {r0, r5}
  403ea2:	4608      	mov	r0, r1
  403ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ea8:	fab3 f183 	clz	r1, r3
  403eac:	2900      	cmp	r1, #0
  403eae:	f040 808e 	bne.w	403fce <__udivmoddi4+0x1ee>
  403eb2:	42ab      	cmp	r3, r5
  403eb4:	d302      	bcc.n	403ebc <__udivmoddi4+0xdc>
  403eb6:	4282      	cmp	r2, r0
  403eb8:	f200 80fa 	bhi.w	4040b0 <__udivmoddi4+0x2d0>
  403ebc:	1a84      	subs	r4, r0, r2
  403ebe:	eb65 0503 	sbc.w	r5, r5, r3
  403ec2:	2001      	movs	r0, #1
  403ec4:	46ac      	mov	ip, r5
  403ec6:	2e00      	cmp	r6, #0
  403ec8:	d03f      	beq.n	403f4a <__udivmoddi4+0x16a>
  403eca:	e886 1010 	stmia.w	r6, {r4, ip}
  403ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ed2:	b912      	cbnz	r2, 403eda <__udivmoddi4+0xfa>
  403ed4:	2701      	movs	r7, #1
  403ed6:	fbb7 f7f2 	udiv	r7, r7, r2
  403eda:	fab7 fe87 	clz	lr, r7
  403ede:	f1be 0f00 	cmp.w	lr, #0
  403ee2:	d134      	bne.n	403f4e <__udivmoddi4+0x16e>
  403ee4:	1beb      	subs	r3, r5, r7
  403ee6:	0c3a      	lsrs	r2, r7, #16
  403ee8:	fa1f fc87 	uxth.w	ip, r7
  403eec:	2101      	movs	r1, #1
  403eee:	fbb3 f8f2 	udiv	r8, r3, r2
  403ef2:	0c25      	lsrs	r5, r4, #16
  403ef4:	fb02 3318 	mls	r3, r2, r8, r3
  403ef8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403efc:	fb0c f308 	mul.w	r3, ip, r8
  403f00:	42ab      	cmp	r3, r5
  403f02:	d907      	bls.n	403f14 <__udivmoddi4+0x134>
  403f04:	19ed      	adds	r5, r5, r7
  403f06:	f108 30ff 	add.w	r0, r8, #4294967295
  403f0a:	d202      	bcs.n	403f12 <__udivmoddi4+0x132>
  403f0c:	42ab      	cmp	r3, r5
  403f0e:	f200 80d1 	bhi.w	4040b4 <__udivmoddi4+0x2d4>
  403f12:	4680      	mov	r8, r0
  403f14:	1aed      	subs	r5, r5, r3
  403f16:	b2a3      	uxth	r3, r4
  403f18:	fbb5 f0f2 	udiv	r0, r5, r2
  403f1c:	fb02 5510 	mls	r5, r2, r0, r5
  403f20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403f24:	fb0c fc00 	mul.w	ip, ip, r0
  403f28:	45a4      	cmp	ip, r4
  403f2a:	d907      	bls.n	403f3c <__udivmoddi4+0x15c>
  403f2c:	19e4      	adds	r4, r4, r7
  403f2e:	f100 33ff 	add.w	r3, r0, #4294967295
  403f32:	d202      	bcs.n	403f3a <__udivmoddi4+0x15a>
  403f34:	45a4      	cmp	ip, r4
  403f36:	f200 80b8 	bhi.w	4040aa <__udivmoddi4+0x2ca>
  403f3a:	4618      	mov	r0, r3
  403f3c:	eba4 040c 	sub.w	r4, r4, ip
  403f40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403f44:	e79d      	b.n	403e82 <__udivmoddi4+0xa2>
  403f46:	4631      	mov	r1, r6
  403f48:	4630      	mov	r0, r6
  403f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f4e:	f1ce 0420 	rsb	r4, lr, #32
  403f52:	fa05 f30e 	lsl.w	r3, r5, lr
  403f56:	fa07 f70e 	lsl.w	r7, r7, lr
  403f5a:	fa20 f804 	lsr.w	r8, r0, r4
  403f5e:	0c3a      	lsrs	r2, r7, #16
  403f60:	fa25 f404 	lsr.w	r4, r5, r4
  403f64:	ea48 0803 	orr.w	r8, r8, r3
  403f68:	fbb4 f1f2 	udiv	r1, r4, r2
  403f6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403f70:	fb02 4411 	mls	r4, r2, r1, r4
  403f74:	fa1f fc87 	uxth.w	ip, r7
  403f78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403f7c:	fb01 f30c 	mul.w	r3, r1, ip
  403f80:	42ab      	cmp	r3, r5
  403f82:	fa00 f40e 	lsl.w	r4, r0, lr
  403f86:	d909      	bls.n	403f9c <__udivmoddi4+0x1bc>
  403f88:	19ed      	adds	r5, r5, r7
  403f8a:	f101 30ff 	add.w	r0, r1, #4294967295
  403f8e:	f080 808a 	bcs.w	4040a6 <__udivmoddi4+0x2c6>
  403f92:	42ab      	cmp	r3, r5
  403f94:	f240 8087 	bls.w	4040a6 <__udivmoddi4+0x2c6>
  403f98:	3902      	subs	r1, #2
  403f9a:	443d      	add	r5, r7
  403f9c:	1aeb      	subs	r3, r5, r3
  403f9e:	fa1f f588 	uxth.w	r5, r8
  403fa2:	fbb3 f0f2 	udiv	r0, r3, r2
  403fa6:	fb02 3310 	mls	r3, r2, r0, r3
  403faa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403fae:	fb00 f30c 	mul.w	r3, r0, ip
  403fb2:	42ab      	cmp	r3, r5
  403fb4:	d907      	bls.n	403fc6 <__udivmoddi4+0x1e6>
  403fb6:	19ed      	adds	r5, r5, r7
  403fb8:	f100 38ff 	add.w	r8, r0, #4294967295
  403fbc:	d26f      	bcs.n	40409e <__udivmoddi4+0x2be>
  403fbe:	42ab      	cmp	r3, r5
  403fc0:	d96d      	bls.n	40409e <__udivmoddi4+0x2be>
  403fc2:	3802      	subs	r0, #2
  403fc4:	443d      	add	r5, r7
  403fc6:	1aeb      	subs	r3, r5, r3
  403fc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403fcc:	e78f      	b.n	403eee <__udivmoddi4+0x10e>
  403fce:	f1c1 0720 	rsb	r7, r1, #32
  403fd2:	fa22 f807 	lsr.w	r8, r2, r7
  403fd6:	408b      	lsls	r3, r1
  403fd8:	fa05 f401 	lsl.w	r4, r5, r1
  403fdc:	ea48 0303 	orr.w	r3, r8, r3
  403fe0:	fa20 fe07 	lsr.w	lr, r0, r7
  403fe4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403fe8:	40fd      	lsrs	r5, r7
  403fea:	ea4e 0e04 	orr.w	lr, lr, r4
  403fee:	fbb5 f9fc 	udiv	r9, r5, ip
  403ff2:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403ff6:	fb0c 5519 	mls	r5, ip, r9, r5
  403ffa:	fa1f f883 	uxth.w	r8, r3
  403ffe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  404002:	fb09 f408 	mul.w	r4, r9, r8
  404006:	42ac      	cmp	r4, r5
  404008:	fa02 f201 	lsl.w	r2, r2, r1
  40400c:	fa00 fa01 	lsl.w	sl, r0, r1
  404010:	d908      	bls.n	404024 <__udivmoddi4+0x244>
  404012:	18ed      	adds	r5, r5, r3
  404014:	f109 30ff 	add.w	r0, r9, #4294967295
  404018:	d243      	bcs.n	4040a2 <__udivmoddi4+0x2c2>
  40401a:	42ac      	cmp	r4, r5
  40401c:	d941      	bls.n	4040a2 <__udivmoddi4+0x2c2>
  40401e:	f1a9 0902 	sub.w	r9, r9, #2
  404022:	441d      	add	r5, r3
  404024:	1b2d      	subs	r5, r5, r4
  404026:	fa1f fe8e 	uxth.w	lr, lr
  40402a:	fbb5 f0fc 	udiv	r0, r5, ip
  40402e:	fb0c 5510 	mls	r5, ip, r0, r5
  404032:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  404036:	fb00 f808 	mul.w	r8, r0, r8
  40403a:	45a0      	cmp	r8, r4
  40403c:	d907      	bls.n	40404e <__udivmoddi4+0x26e>
  40403e:	18e4      	adds	r4, r4, r3
  404040:	f100 35ff 	add.w	r5, r0, #4294967295
  404044:	d229      	bcs.n	40409a <__udivmoddi4+0x2ba>
  404046:	45a0      	cmp	r8, r4
  404048:	d927      	bls.n	40409a <__udivmoddi4+0x2ba>
  40404a:	3802      	subs	r0, #2
  40404c:	441c      	add	r4, r3
  40404e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  404052:	eba4 0408 	sub.w	r4, r4, r8
  404056:	fba0 8902 	umull	r8, r9, r0, r2
  40405a:	454c      	cmp	r4, r9
  40405c:	46c6      	mov	lr, r8
  40405e:	464d      	mov	r5, r9
  404060:	d315      	bcc.n	40408e <__udivmoddi4+0x2ae>
  404062:	d012      	beq.n	40408a <__udivmoddi4+0x2aa>
  404064:	b156      	cbz	r6, 40407c <__udivmoddi4+0x29c>
  404066:	ebba 030e 	subs.w	r3, sl, lr
  40406a:	eb64 0405 	sbc.w	r4, r4, r5
  40406e:	fa04 f707 	lsl.w	r7, r4, r7
  404072:	40cb      	lsrs	r3, r1
  404074:	431f      	orrs	r7, r3
  404076:	40cc      	lsrs	r4, r1
  404078:	6037      	str	r7, [r6, #0]
  40407a:	6074      	str	r4, [r6, #4]
  40407c:	2100      	movs	r1, #0
  40407e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404082:	4618      	mov	r0, r3
  404084:	e6f8      	b.n	403e78 <__udivmoddi4+0x98>
  404086:	4690      	mov	r8, r2
  404088:	e6e0      	b.n	403e4c <__udivmoddi4+0x6c>
  40408a:	45c2      	cmp	sl, r8
  40408c:	d2ea      	bcs.n	404064 <__udivmoddi4+0x284>
  40408e:	ebb8 0e02 	subs.w	lr, r8, r2
  404092:	eb69 0503 	sbc.w	r5, r9, r3
  404096:	3801      	subs	r0, #1
  404098:	e7e4      	b.n	404064 <__udivmoddi4+0x284>
  40409a:	4628      	mov	r0, r5
  40409c:	e7d7      	b.n	40404e <__udivmoddi4+0x26e>
  40409e:	4640      	mov	r0, r8
  4040a0:	e791      	b.n	403fc6 <__udivmoddi4+0x1e6>
  4040a2:	4681      	mov	r9, r0
  4040a4:	e7be      	b.n	404024 <__udivmoddi4+0x244>
  4040a6:	4601      	mov	r1, r0
  4040a8:	e778      	b.n	403f9c <__udivmoddi4+0x1bc>
  4040aa:	3802      	subs	r0, #2
  4040ac:	443c      	add	r4, r7
  4040ae:	e745      	b.n	403f3c <__udivmoddi4+0x15c>
  4040b0:	4608      	mov	r0, r1
  4040b2:	e708      	b.n	403ec6 <__udivmoddi4+0xe6>
  4040b4:	f1a8 0802 	sub.w	r8, r8, #2
  4040b8:	443d      	add	r5, r7
  4040ba:	e72b      	b.n	403f14 <__udivmoddi4+0x134>

004040bc <__aeabi_idiv0>:
  4040bc:	4770      	bx	lr
  4040be:	bf00      	nop

004040c0 <__libc_init_array>:
  4040c0:	b570      	push	{r4, r5, r6, lr}
  4040c2:	4e0f      	ldr	r6, [pc, #60]	; (404100 <__libc_init_array+0x40>)
  4040c4:	4d0f      	ldr	r5, [pc, #60]	; (404104 <__libc_init_array+0x44>)
  4040c6:	1b76      	subs	r6, r6, r5
  4040c8:	10b6      	asrs	r6, r6, #2
  4040ca:	bf18      	it	ne
  4040cc:	2400      	movne	r4, #0
  4040ce:	d005      	beq.n	4040dc <__libc_init_array+0x1c>
  4040d0:	3401      	adds	r4, #1
  4040d2:	f855 3b04 	ldr.w	r3, [r5], #4
  4040d6:	4798      	blx	r3
  4040d8:	42a6      	cmp	r6, r4
  4040da:	d1f9      	bne.n	4040d0 <__libc_init_array+0x10>
  4040dc:	4e0a      	ldr	r6, [pc, #40]	; (404108 <__libc_init_array+0x48>)
  4040de:	4d0b      	ldr	r5, [pc, #44]	; (40410c <__libc_init_array+0x4c>)
  4040e0:	1b76      	subs	r6, r6, r5
  4040e2:	f000 fa1f 	bl	404524 <_init>
  4040e6:	10b6      	asrs	r6, r6, #2
  4040e8:	bf18      	it	ne
  4040ea:	2400      	movne	r4, #0
  4040ec:	d006      	beq.n	4040fc <__libc_init_array+0x3c>
  4040ee:	3401      	adds	r4, #1
  4040f0:	f855 3b04 	ldr.w	r3, [r5], #4
  4040f4:	4798      	blx	r3
  4040f6:	42a6      	cmp	r6, r4
  4040f8:	d1f9      	bne.n	4040ee <__libc_init_array+0x2e>
  4040fa:	bd70      	pop	{r4, r5, r6, pc}
  4040fc:	bd70      	pop	{r4, r5, r6, pc}
  4040fe:	bf00      	nop
  404100:	00404530 	.word	0x00404530
  404104:	00404530 	.word	0x00404530
  404108:	00404538 	.word	0x00404538
  40410c:	00404530 	.word	0x00404530

00404110 <memcpy>:
  404110:	4684      	mov	ip, r0
  404112:	ea41 0300 	orr.w	r3, r1, r0
  404116:	f013 0303 	ands.w	r3, r3, #3
  40411a:	d16d      	bne.n	4041f8 <memcpy+0xe8>
  40411c:	3a40      	subs	r2, #64	; 0x40
  40411e:	d341      	bcc.n	4041a4 <memcpy+0x94>
  404120:	f851 3b04 	ldr.w	r3, [r1], #4
  404124:	f840 3b04 	str.w	r3, [r0], #4
  404128:	f851 3b04 	ldr.w	r3, [r1], #4
  40412c:	f840 3b04 	str.w	r3, [r0], #4
  404130:	f851 3b04 	ldr.w	r3, [r1], #4
  404134:	f840 3b04 	str.w	r3, [r0], #4
  404138:	f851 3b04 	ldr.w	r3, [r1], #4
  40413c:	f840 3b04 	str.w	r3, [r0], #4
  404140:	f851 3b04 	ldr.w	r3, [r1], #4
  404144:	f840 3b04 	str.w	r3, [r0], #4
  404148:	f851 3b04 	ldr.w	r3, [r1], #4
  40414c:	f840 3b04 	str.w	r3, [r0], #4
  404150:	f851 3b04 	ldr.w	r3, [r1], #4
  404154:	f840 3b04 	str.w	r3, [r0], #4
  404158:	f851 3b04 	ldr.w	r3, [r1], #4
  40415c:	f840 3b04 	str.w	r3, [r0], #4
  404160:	f851 3b04 	ldr.w	r3, [r1], #4
  404164:	f840 3b04 	str.w	r3, [r0], #4
  404168:	f851 3b04 	ldr.w	r3, [r1], #4
  40416c:	f840 3b04 	str.w	r3, [r0], #4
  404170:	f851 3b04 	ldr.w	r3, [r1], #4
  404174:	f840 3b04 	str.w	r3, [r0], #4
  404178:	f851 3b04 	ldr.w	r3, [r1], #4
  40417c:	f840 3b04 	str.w	r3, [r0], #4
  404180:	f851 3b04 	ldr.w	r3, [r1], #4
  404184:	f840 3b04 	str.w	r3, [r0], #4
  404188:	f851 3b04 	ldr.w	r3, [r1], #4
  40418c:	f840 3b04 	str.w	r3, [r0], #4
  404190:	f851 3b04 	ldr.w	r3, [r1], #4
  404194:	f840 3b04 	str.w	r3, [r0], #4
  404198:	f851 3b04 	ldr.w	r3, [r1], #4
  40419c:	f840 3b04 	str.w	r3, [r0], #4
  4041a0:	3a40      	subs	r2, #64	; 0x40
  4041a2:	d2bd      	bcs.n	404120 <memcpy+0x10>
  4041a4:	3230      	adds	r2, #48	; 0x30
  4041a6:	d311      	bcc.n	4041cc <memcpy+0xbc>
  4041a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4041ac:	f840 3b04 	str.w	r3, [r0], #4
  4041b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4041b4:	f840 3b04 	str.w	r3, [r0], #4
  4041b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4041bc:	f840 3b04 	str.w	r3, [r0], #4
  4041c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4041c4:	f840 3b04 	str.w	r3, [r0], #4
  4041c8:	3a10      	subs	r2, #16
  4041ca:	d2ed      	bcs.n	4041a8 <memcpy+0x98>
  4041cc:	320c      	adds	r2, #12
  4041ce:	d305      	bcc.n	4041dc <memcpy+0xcc>
  4041d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4041d4:	f840 3b04 	str.w	r3, [r0], #4
  4041d8:	3a04      	subs	r2, #4
  4041da:	d2f9      	bcs.n	4041d0 <memcpy+0xc0>
  4041dc:	3204      	adds	r2, #4
  4041de:	d008      	beq.n	4041f2 <memcpy+0xe2>
  4041e0:	07d2      	lsls	r2, r2, #31
  4041e2:	bf1c      	itt	ne
  4041e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4041e8:	f800 3b01 	strbne.w	r3, [r0], #1
  4041ec:	d301      	bcc.n	4041f2 <memcpy+0xe2>
  4041ee:	880b      	ldrh	r3, [r1, #0]
  4041f0:	8003      	strh	r3, [r0, #0]
  4041f2:	4660      	mov	r0, ip
  4041f4:	4770      	bx	lr
  4041f6:	bf00      	nop
  4041f8:	2a08      	cmp	r2, #8
  4041fa:	d313      	bcc.n	404224 <memcpy+0x114>
  4041fc:	078b      	lsls	r3, r1, #30
  4041fe:	d08d      	beq.n	40411c <memcpy+0xc>
  404200:	f010 0303 	ands.w	r3, r0, #3
  404204:	d08a      	beq.n	40411c <memcpy+0xc>
  404206:	f1c3 0304 	rsb	r3, r3, #4
  40420a:	1ad2      	subs	r2, r2, r3
  40420c:	07db      	lsls	r3, r3, #31
  40420e:	bf1c      	itt	ne
  404210:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404214:	f800 3b01 	strbne.w	r3, [r0], #1
  404218:	d380      	bcc.n	40411c <memcpy+0xc>
  40421a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40421e:	f820 3b02 	strh.w	r3, [r0], #2
  404222:	e77b      	b.n	40411c <memcpy+0xc>
  404224:	3a04      	subs	r2, #4
  404226:	d3d9      	bcc.n	4041dc <memcpy+0xcc>
  404228:	3a01      	subs	r2, #1
  40422a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40422e:	f800 3b01 	strb.w	r3, [r0], #1
  404232:	d2f9      	bcs.n	404228 <memcpy+0x118>
  404234:	780b      	ldrb	r3, [r1, #0]
  404236:	7003      	strb	r3, [r0, #0]
  404238:	784b      	ldrb	r3, [r1, #1]
  40423a:	7043      	strb	r3, [r0, #1]
  40423c:	788b      	ldrb	r3, [r1, #2]
  40423e:	7083      	strb	r3, [r0, #2]
  404240:	4660      	mov	r0, ip
  404242:	4770      	bx	lr

00404244 <memset>:
  404244:	b470      	push	{r4, r5, r6}
  404246:	0786      	lsls	r6, r0, #30
  404248:	d046      	beq.n	4042d8 <memset+0x94>
  40424a:	1e54      	subs	r4, r2, #1
  40424c:	2a00      	cmp	r2, #0
  40424e:	d041      	beq.n	4042d4 <memset+0x90>
  404250:	b2ca      	uxtb	r2, r1
  404252:	4603      	mov	r3, r0
  404254:	e002      	b.n	40425c <memset+0x18>
  404256:	f114 34ff 	adds.w	r4, r4, #4294967295
  40425a:	d33b      	bcc.n	4042d4 <memset+0x90>
  40425c:	f803 2b01 	strb.w	r2, [r3], #1
  404260:	079d      	lsls	r5, r3, #30
  404262:	d1f8      	bne.n	404256 <memset+0x12>
  404264:	2c03      	cmp	r4, #3
  404266:	d92e      	bls.n	4042c6 <memset+0x82>
  404268:	b2cd      	uxtb	r5, r1
  40426a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40426e:	2c0f      	cmp	r4, #15
  404270:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404274:	d919      	bls.n	4042aa <memset+0x66>
  404276:	f103 0210 	add.w	r2, r3, #16
  40427a:	4626      	mov	r6, r4
  40427c:	3e10      	subs	r6, #16
  40427e:	2e0f      	cmp	r6, #15
  404280:	f842 5c10 	str.w	r5, [r2, #-16]
  404284:	f842 5c0c 	str.w	r5, [r2, #-12]
  404288:	f842 5c08 	str.w	r5, [r2, #-8]
  40428c:	f842 5c04 	str.w	r5, [r2, #-4]
  404290:	f102 0210 	add.w	r2, r2, #16
  404294:	d8f2      	bhi.n	40427c <memset+0x38>
  404296:	f1a4 0210 	sub.w	r2, r4, #16
  40429a:	f022 020f 	bic.w	r2, r2, #15
  40429e:	f004 040f 	and.w	r4, r4, #15
  4042a2:	3210      	adds	r2, #16
  4042a4:	2c03      	cmp	r4, #3
  4042a6:	4413      	add	r3, r2
  4042a8:	d90d      	bls.n	4042c6 <memset+0x82>
  4042aa:	461e      	mov	r6, r3
  4042ac:	4622      	mov	r2, r4
  4042ae:	3a04      	subs	r2, #4
  4042b0:	2a03      	cmp	r2, #3
  4042b2:	f846 5b04 	str.w	r5, [r6], #4
  4042b6:	d8fa      	bhi.n	4042ae <memset+0x6a>
  4042b8:	1f22      	subs	r2, r4, #4
  4042ba:	f022 0203 	bic.w	r2, r2, #3
  4042be:	3204      	adds	r2, #4
  4042c0:	4413      	add	r3, r2
  4042c2:	f004 0403 	and.w	r4, r4, #3
  4042c6:	b12c      	cbz	r4, 4042d4 <memset+0x90>
  4042c8:	b2c9      	uxtb	r1, r1
  4042ca:	441c      	add	r4, r3
  4042cc:	f803 1b01 	strb.w	r1, [r3], #1
  4042d0:	429c      	cmp	r4, r3
  4042d2:	d1fb      	bne.n	4042cc <memset+0x88>
  4042d4:	bc70      	pop	{r4, r5, r6}
  4042d6:	4770      	bx	lr
  4042d8:	4614      	mov	r4, r2
  4042da:	4603      	mov	r3, r0
  4042dc:	e7c2      	b.n	404264 <memset+0x20>
  4042de:	bf00      	nop

004042e0 <strncpy>:
  4042e0:	ea40 0301 	orr.w	r3, r0, r1
  4042e4:	f013 0f03 	tst.w	r3, #3
  4042e8:	b470      	push	{r4, r5, r6}
  4042ea:	4603      	mov	r3, r0
  4042ec:	d024      	beq.n	404338 <strncpy+0x58>
  4042ee:	b1a2      	cbz	r2, 40431a <strncpy+0x3a>
  4042f0:	780c      	ldrb	r4, [r1, #0]
  4042f2:	701c      	strb	r4, [r3, #0]
  4042f4:	3a01      	subs	r2, #1
  4042f6:	3301      	adds	r3, #1
  4042f8:	3101      	adds	r1, #1
  4042fa:	b13c      	cbz	r4, 40430c <strncpy+0x2c>
  4042fc:	b16a      	cbz	r2, 40431a <strncpy+0x3a>
  4042fe:	f811 4b01 	ldrb.w	r4, [r1], #1
  404302:	f803 4b01 	strb.w	r4, [r3], #1
  404306:	3a01      	subs	r2, #1
  404308:	2c00      	cmp	r4, #0
  40430a:	d1f7      	bne.n	4042fc <strncpy+0x1c>
  40430c:	b12a      	cbz	r2, 40431a <strncpy+0x3a>
  40430e:	441a      	add	r2, r3
  404310:	2100      	movs	r1, #0
  404312:	f803 1b01 	strb.w	r1, [r3], #1
  404316:	429a      	cmp	r2, r3
  404318:	d1fb      	bne.n	404312 <strncpy+0x32>
  40431a:	bc70      	pop	{r4, r5, r6}
  40431c:	4770      	bx	lr
  40431e:	460e      	mov	r6, r1
  404320:	f851 5b04 	ldr.w	r5, [r1], #4
  404324:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  404328:	ea24 0405 	bic.w	r4, r4, r5
  40432c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  404330:	d105      	bne.n	40433e <strncpy+0x5e>
  404332:	f843 5b04 	str.w	r5, [r3], #4
  404336:	3a04      	subs	r2, #4
  404338:	2a03      	cmp	r2, #3
  40433a:	d8f0      	bhi.n	40431e <strncpy+0x3e>
  40433c:	e7d7      	b.n	4042ee <strncpy+0xe>
  40433e:	4631      	mov	r1, r6
  404340:	e7d6      	b.n	4042f0 <strncpy+0x10>
  404342:	bf00      	nop

00404344 <register_fini>:
  404344:	4b02      	ldr	r3, [pc, #8]	; (404350 <register_fini+0xc>)
  404346:	b113      	cbz	r3, 40434e <register_fini+0xa>
  404348:	4802      	ldr	r0, [pc, #8]	; (404354 <register_fini+0x10>)
  40434a:	f000 b805 	b.w	404358 <atexit>
  40434e:	4770      	bx	lr
  404350:	00000000 	.word	0x00000000
  404354:	00404365 	.word	0x00404365

00404358 <atexit>:
  404358:	2300      	movs	r3, #0
  40435a:	4601      	mov	r1, r0
  40435c:	461a      	mov	r2, r3
  40435e:	4618      	mov	r0, r3
  404360:	f000 b81e 	b.w	4043a0 <__register_exitproc>

00404364 <__libc_fini_array>:
  404364:	b538      	push	{r3, r4, r5, lr}
  404366:	4c0a      	ldr	r4, [pc, #40]	; (404390 <__libc_fini_array+0x2c>)
  404368:	4d0a      	ldr	r5, [pc, #40]	; (404394 <__libc_fini_array+0x30>)
  40436a:	1b64      	subs	r4, r4, r5
  40436c:	10a4      	asrs	r4, r4, #2
  40436e:	d00a      	beq.n	404386 <__libc_fini_array+0x22>
  404370:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404374:	3b01      	subs	r3, #1
  404376:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40437a:	3c01      	subs	r4, #1
  40437c:	f855 3904 	ldr.w	r3, [r5], #-4
  404380:	4798      	blx	r3
  404382:	2c00      	cmp	r4, #0
  404384:	d1f9      	bne.n	40437a <__libc_fini_array+0x16>
  404386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40438a:	f000 b8d5 	b.w	404538 <_fini>
  40438e:	bf00      	nop
  404390:	00404548 	.word	0x00404548
  404394:	00404544 	.word	0x00404544

00404398 <__retarget_lock_acquire_recursive>:
  404398:	4770      	bx	lr
  40439a:	bf00      	nop

0040439c <__retarget_lock_release_recursive>:
  40439c:	4770      	bx	lr
  40439e:	bf00      	nop

004043a0 <__register_exitproc>:
  4043a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4043a4:	4d2c      	ldr	r5, [pc, #176]	; (404458 <__register_exitproc+0xb8>)
  4043a6:	4606      	mov	r6, r0
  4043a8:	6828      	ldr	r0, [r5, #0]
  4043aa:	4698      	mov	r8, r3
  4043ac:	460f      	mov	r7, r1
  4043ae:	4691      	mov	r9, r2
  4043b0:	f7ff fff2 	bl	404398 <__retarget_lock_acquire_recursive>
  4043b4:	4b29      	ldr	r3, [pc, #164]	; (40445c <__register_exitproc+0xbc>)
  4043b6:	681c      	ldr	r4, [r3, #0]
  4043b8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4043bc:	2b00      	cmp	r3, #0
  4043be:	d03e      	beq.n	40443e <__register_exitproc+0x9e>
  4043c0:	685a      	ldr	r2, [r3, #4]
  4043c2:	2a1f      	cmp	r2, #31
  4043c4:	dc1c      	bgt.n	404400 <__register_exitproc+0x60>
  4043c6:	f102 0e01 	add.w	lr, r2, #1
  4043ca:	b176      	cbz	r6, 4043ea <__register_exitproc+0x4a>
  4043cc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4043d0:	2401      	movs	r4, #1
  4043d2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4043d6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4043da:	4094      	lsls	r4, r2
  4043dc:	4320      	orrs	r0, r4
  4043de:	2e02      	cmp	r6, #2
  4043e0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4043e4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4043e8:	d023      	beq.n	404432 <__register_exitproc+0x92>
  4043ea:	3202      	adds	r2, #2
  4043ec:	f8c3 e004 	str.w	lr, [r3, #4]
  4043f0:	6828      	ldr	r0, [r5, #0]
  4043f2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4043f6:	f7ff ffd1 	bl	40439c <__retarget_lock_release_recursive>
  4043fa:	2000      	movs	r0, #0
  4043fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404400:	4b17      	ldr	r3, [pc, #92]	; (404460 <__register_exitproc+0xc0>)
  404402:	b30b      	cbz	r3, 404448 <__register_exitproc+0xa8>
  404404:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404408:	f3af 8000 	nop.w
  40440c:	4603      	mov	r3, r0
  40440e:	b1d8      	cbz	r0, 404448 <__register_exitproc+0xa8>
  404410:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  404414:	6002      	str	r2, [r0, #0]
  404416:	2100      	movs	r1, #0
  404418:	6041      	str	r1, [r0, #4]
  40441a:	460a      	mov	r2, r1
  40441c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404420:	f04f 0e01 	mov.w	lr, #1
  404424:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  404428:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40442c:	2e00      	cmp	r6, #0
  40442e:	d0dc      	beq.n	4043ea <__register_exitproc+0x4a>
  404430:	e7cc      	b.n	4043cc <__register_exitproc+0x2c>
  404432:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  404436:	430c      	orrs	r4, r1
  404438:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40443c:	e7d5      	b.n	4043ea <__register_exitproc+0x4a>
  40443e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  404442:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  404446:	e7bb      	b.n	4043c0 <__register_exitproc+0x20>
  404448:	6828      	ldr	r0, [r5, #0]
  40444a:	f7ff ffa7 	bl	40439c <__retarget_lock_release_recursive>
  40444e:	f04f 30ff 	mov.w	r0, #4294967295
  404452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404456:	bf00      	nop
  404458:	20000448 	.word	0x20000448
  40445c:	00404520 	.word	0x00404520
  404460:	00000000 	.word	0x00000000
  404464:	454c4449 	.word	0x454c4449
  404468:	00000000 	.word	0x00000000
  40446c:	00000a0d 	.word	0x00000a0d
  404470:	09097325 	.word	0x09097325
  404474:	25096325 	.word	0x25096325
  404478:	75250975 	.word	0x75250975
  40447c:	0d752509 	.word	0x0d752509
  404480:	0000000a 	.word	0x0000000a
  404484:	20726d54 	.word	0x20726d54
  404488:	00637653 	.word	0x00637653
  40448c:	726e6163 	.word	0x726e6163
  404490:	00000078 	.word	0x00000078
  404494:	736e6163 	.word	0x736e6163
  404498:	75746174 	.word	0x75746174
  40449c:	00000073 	.word	0x00000073
  4044a0:	74736574 	.word	0x74736574
  4044a4:	6b736154 	.word	0x6b736154
  4044a8:	00000000 	.word	0x00000000
  4044ac:	6f636e65 	.word	0x6f636e65
  4044b0:	00726564 	.word	0x00726564

004044b4 <can_bit_time>:
  4044b4:	02020308 02094b03 43020303 0303030a     .....K.....C....
  4044c4:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
  4044d4:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
  4044e4:	05050510 06114504 47040505 06060512     .....E.....G....
  4044f4:	06134304 44040606 06060714 08154604     .C.....D.....F..
  404504:	47040606 07070716 08174404 46040708     ...G.....D.....F
  404514:	08080718 08194304 44040808              .....C.....D

00404520 <_global_impure_ptr>:
  404520:	20000020                                 .. 

00404524 <_init>:
  404524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404526:	bf00      	nop
  404528:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40452a:	bc08      	pop	{r3}
  40452c:	469e      	mov	lr, r3
  40452e:	4770      	bx	lr

00404530 <__init_array_start>:
  404530:	00404345 	.word	0x00404345

00404534 <__frame_dummy_init_array_entry>:
  404534:	0040011d                                ..@.

00404538 <_fini>:
  404538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40453a:	bf00      	nop
  40453c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40453e:	bc08      	pop	{r3}
  404540:	469e      	mov	lr, r3
  404542:	4770      	bx	lr

00404544 <__fini_array_start>:
  404544:	004000f9 	.word	0x004000f9

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <xFreeBytesRemaining>:
20000014:	a000 0000                                   ....

20000018 <xNextTaskUnblockTime>:
20000018:	ffff ffff 0000 0000                         ........

20000020 <impure_data>:
20000020:	0000 0000 030c 2000 0374 2000 03dc 2000     ....... t.. ... 
	...
200000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000448 <__atexit_recursive_mutex>:
20000448:	a68c 2000                                   ... 
