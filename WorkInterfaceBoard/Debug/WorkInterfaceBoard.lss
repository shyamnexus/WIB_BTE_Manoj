
WorkInterfaceBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049e8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004049e8  004049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000044c  20000000  004049f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a244  20000450  00404e40  0002044c  2**3
                  ALLOC
  4 .stack        00003004  2000a694  0040f084  0002044c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002047a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00014ab7  00000000  00000000  000204d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002a81  00000000  00000000  00034f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005cd7  00000000  00000000  00037a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b20  00000000  00000000  0003d6e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009f0  00000000  00000000  0003e202  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00017fba  00000000  00000000  0003ebf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d81e  00000000  00000000  00056bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00061ad8  00000000  00000000  000643ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002eb4  00000000  00000000  000c5ea4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	98 d6 00 20 65 01 40 00 e9 01 40 00 e9 01 40 00     ... e.@...@...@.
  400010:	e9 01 40 00 e9 01 40 00 e9 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	55 08 40 00 e9 01 40 00 00 00 00 00 65 09 40 00     U.@...@.....e.@.
  40003c:	b9 09 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40004c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40005c:	e9 01 40 00 61 05 40 00 79 05 40 00 91 05 40 00     ..@.a.@.y.@...@.
  40006c:	a9 05 40 00 c1 05 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40007c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40008c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  40009c:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000ac:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000bc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000cc:	e9 01 40 00 e9 01 40 00 e9 01 40 00 e9 01 40 00     ..@...@...@...@.
  4000dc:	e9 01 40 00 e9 01 40 00 00 00 00 00 00 00 00 00     ..@...@.........
	...

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000450 	.word	0x20000450
  400114:	00000000 	.word	0x00000000
  400118:	004049f0 	.word	0x004049f0

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	004049f0 	.word	0x004049f0
  400158:	20000454 	.word	0x20000454
  40015c:	004049f0 	.word	0x004049f0
  400160:	00000000 	.word	0x00000000

00400164 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400164:	b580      	push	{r7, lr}
  400166:	b082      	sub	sp, #8
  400168:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40016a:	4b16      	ldr	r3, [pc, #88]	; (4001c4 <Reset_Handler+0x60>)
  40016c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  40016e:	4b16      	ldr	r3, [pc, #88]	; (4001c8 <Reset_Handler+0x64>)
  400170:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  400172:	687a      	ldr	r2, [r7, #4]
  400174:	683b      	ldr	r3, [r7, #0]
  400176:	429a      	cmp	r2, r3
  400178:	d00c      	beq.n	400194 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40017a:	e007      	b.n	40018c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  40017c:	683b      	ldr	r3, [r7, #0]
  40017e:	1d1a      	adds	r2, r3, #4
  400180:	603a      	str	r2, [r7, #0]
  400182:	687a      	ldr	r2, [r7, #4]
  400184:	1d11      	adds	r1, r2, #4
  400186:	6079      	str	r1, [r7, #4]
  400188:	6812      	ldr	r2, [r2, #0]
  40018a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  40018c:	683b      	ldr	r3, [r7, #0]
  40018e:	4a0f      	ldr	r2, [pc, #60]	; (4001cc <Reset_Handler+0x68>)
  400190:	4293      	cmp	r3, r2
  400192:	d3f3      	bcc.n	40017c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400194:	4b0e      	ldr	r3, [pc, #56]	; (4001d0 <Reset_Handler+0x6c>)
  400196:	603b      	str	r3, [r7, #0]
  400198:	e004      	b.n	4001a4 <Reset_Handler+0x40>
                *pDest++ = 0;
  40019a:	683b      	ldr	r3, [r7, #0]
  40019c:	1d1a      	adds	r2, r3, #4
  40019e:	603a      	str	r2, [r7, #0]
  4001a0:	2200      	movs	r2, #0
  4001a2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  4001a4:	683b      	ldr	r3, [r7, #0]
  4001a6:	4a0b      	ldr	r2, [pc, #44]	; (4001d4 <Reset_Handler+0x70>)
  4001a8:	4293      	cmp	r3, r2
  4001aa:	d3f6      	bcc.n	40019a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4001ac:	4b0a      	ldr	r3, [pc, #40]	; (4001d8 <Reset_Handler+0x74>)
  4001ae:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4001b0:	4a0a      	ldr	r2, [pc, #40]	; (4001dc <Reset_Handler+0x78>)
  4001b2:	687b      	ldr	r3, [r7, #4]
  4001b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4001b8:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  4001ba:	4b09      	ldr	r3, [pc, #36]	; (4001e0 <Reset_Handler+0x7c>)
  4001bc:	4798      	blx	r3

        /* Branch to main function */
        main();
  4001be:	4b09      	ldr	r3, [pc, #36]	; (4001e4 <Reset_Handler+0x80>)
  4001c0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4001c2:	e7fe      	b.n	4001c2 <Reset_Handler+0x5e>
  4001c4:	004049f0 	.word	0x004049f0
  4001c8:	20000000 	.word	0x20000000
  4001cc:	2000044c 	.word	0x2000044c
  4001d0:	20000450 	.word	0x20000450
  4001d4:	2000a694 	.word	0x2000a694
  4001d8:	00400000 	.word	0x00400000
  4001dc:	e000ed00 	.word	0xe000ed00
  4001e0:	00404561 	.word	0x00404561
  4001e4:	004003d9 	.word	0x004003d9

004001e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e8:	b480      	push	{r7}
  4001ea:	af00      	add	r7, sp, #0
        while (1) {
  4001ec:	e7fe      	b.n	4001ec <Dummy_Handler+0x4>
	...

004001f0 <SystemInit>:
/**
 * \brief Setup the microcontroller system.
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  4001f0:	b580      	push	{r7, lr}
  4001f2:	af00      	add	r7, sp, #0
	/* Set max FWS pre-switching; sysclk_init will set correct FWS afterwards */
	EFC->EEFC_FMR = EEFC_FMR_FWS(5);
  4001f4:	4b18      	ldr	r3, [pc, #96]	; (400258 <SystemInit+0x68>)
  4001f6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
  4001fa:	601a      	str	r2, [r3, #0]

	/* Ensure main crystal is started and selected as MAINCK */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  4001fc:	4b17      	ldr	r3, [pc, #92]	; (40025c <SystemInit+0x6c>)
  4001fe:	6a1b      	ldr	r3, [r3, #32]
  400200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  400204:	2b00      	cmp	r3, #0
  400206:	d109      	bne.n	40021c <SystemInit+0x2c>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
  400208:	4b14      	ldr	r3, [pc, #80]	; (40025c <SystemInit+0x6c>)
  40020a:	4a15      	ldr	r2, [pc, #84]	; (400260 <SystemInit+0x70>)
  40020c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {}
  40020e:	bf00      	nop
  400210:	4b12      	ldr	r3, [pc, #72]	; (40025c <SystemInit+0x6c>)
  400212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400214:	f003 0301 	and.w	r3, r3, #1
  400218:	2b00      	cmp	r3, #0
  40021a:	d0f9      	beq.n	400210 <SystemInit+0x20>
	}
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
  40021c:	4b0f      	ldr	r3, [pc, #60]	; (40025c <SystemInit+0x6c>)
  40021e:	4a11      	ldr	r2, [pc, #68]	; (400264 <SystemInit+0x74>)
  400220:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {}
  400222:	bf00      	nop
  400224:	4b0d      	ldr	r3, [pc, #52]	; (40025c <SystemInit+0x6c>)
  400226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40022c:	2b00      	cmp	r3, #0
  40022e:	d0f9      	beq.n	400224 <SystemInit+0x34>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
  400230:	4a0a      	ldr	r2, [pc, #40]	; (40025c <SystemInit+0x6c>)
  400232:	4b0a      	ldr	r3, [pc, #40]	; (40025c <SystemInit+0x6c>)
  400234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400236:	f023 0303 	bic.w	r3, r3, #3
  40023a:	f043 0301 	orr.w	r3, r3, #1
  40023e:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {}
  400240:	bf00      	nop
  400242:	4b06      	ldr	r3, [pc, #24]	; (40025c <SystemInit+0x6c>)
  400244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400246:	f003 0308 	and.w	r3, r3, #8
  40024a:	2b00      	cmp	r3, #0
  40024c:	d0f9      	beq.n	400242 <SystemInit+0x52>

	/* Do not configure PLLA here. ASF sysclk_init() will do it using conf_clock.h */

	/* Update SystemCoreClock to current MAINCK prescaled value; sysclk will update after */
	SystemCoreClockUpdate();
  40024e:	4b06      	ldr	r3, [pc, #24]	; (400268 <SystemInit+0x78>)
  400250:	4798      	blx	r3
}
  400252:	bf00      	nop
  400254:	bd80      	pop	{r7, pc}
  400256:	bf00      	nop
  400258:	400e0a00 	.word	0x400e0a00
  40025c:	400e0400 	.word	0x400e0400
  400260:	00370809 	.word	0x00370809
  400264:	01370809 	.word	0x01370809
  400268:	0040026d 	.word	0x0040026d

0040026c <SystemCoreClockUpdate>:

void SystemCoreClockUpdate( void )
{
  40026c:	b480      	push	{r7}
  40026e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400270:	4b52      	ldr	r3, [pc, #328]	; (4003bc <SystemCoreClockUpdate+0x150>)
  400272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400274:	f003 0303 	and.w	r3, r3, #3
  400278:	2b01      	cmp	r3, #1
  40027a:	d014      	beq.n	4002a6 <SystemCoreClockUpdate+0x3a>
  40027c:	2b01      	cmp	r3, #1
  40027e:	d302      	bcc.n	400286 <SystemCoreClockUpdate+0x1a>
  400280:	2b02      	cmp	r3, #2
  400282:	d038      	beq.n	4002f6 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
		break;

    default:
		break;
  400284:	e07a      	b.n	40037c <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400286:	4b4e      	ldr	r3, [pc, #312]	; (4003c0 <SystemCoreClockUpdate+0x154>)
  400288:	695b      	ldr	r3, [r3, #20]
  40028a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40028e:	2b00      	cmp	r3, #0
  400290:	d004      	beq.n	40029c <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400292:	4b4c      	ldr	r3, [pc, #304]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  400294:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400298:	601a      	str	r2, [r3, #0]
		break;
  40029a:	e06f      	b.n	40037c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40029c:	4b49      	ldr	r3, [pc, #292]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  40029e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4002a2:	601a      	str	r2, [r3, #0]
		break;
  4002a4:	e06a      	b.n	40037c <SystemCoreClockUpdate+0x110>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4002a6:	4b45      	ldr	r3, [pc, #276]	; (4003bc <SystemCoreClockUpdate+0x150>)
  4002a8:	6a1b      	ldr	r3, [r3, #32]
  4002aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4002ae:	2b00      	cmp	r3, #0
  4002b0:	d003      	beq.n	4002ba <SystemCoreClockUpdate+0x4e>
			SystemCoreClock = BOARD_FREQ_MAINCK_XTAL;
  4002b2:	4b44      	ldr	r3, [pc, #272]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  4002b4:	4a44      	ldr	r2, [pc, #272]	; (4003c8 <SystemCoreClockUpdate+0x15c>)
  4002b6:	601a      	str	r2, [r3, #0]
		break;
  4002b8:	e060      	b.n	40037c <SystemCoreClockUpdate+0x110>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4002ba:	4b42      	ldr	r3, [pc, #264]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  4002bc:	4a43      	ldr	r2, [pc, #268]	; (4003cc <SystemCoreClockUpdate+0x160>)
  4002be:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4002c0:	4b3e      	ldr	r3, [pc, #248]	; (4003bc <SystemCoreClockUpdate+0x150>)
  4002c2:	6a1b      	ldr	r3, [r3, #32]
  4002c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4002c8:	2b10      	cmp	r3, #16
  4002ca:	d004      	beq.n	4002d6 <SystemCoreClockUpdate+0x6a>
  4002cc:	2b20      	cmp	r3, #32
  4002ce:	d008      	beq.n	4002e2 <SystemCoreClockUpdate+0x76>
  4002d0:	2b00      	cmp	r3, #0
  4002d2:	d00e      	beq.n	4002f2 <SystemCoreClockUpdate+0x86>
				break;
  4002d4:	e00e      	b.n	4002f4 <SystemCoreClockUpdate+0x88>
          SystemCoreClock *= 2U;
  4002d6:	4b3b      	ldr	r3, [pc, #236]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  4002d8:	681b      	ldr	r3, [r3, #0]
  4002da:	005b      	lsls	r3, r3, #1
  4002dc:	4a39      	ldr	r2, [pc, #228]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  4002de:	6013      	str	r3, [r2, #0]
				break;
  4002e0:	e008      	b.n	4002f4 <SystemCoreClockUpdate+0x88>
          SystemCoreClock *= 3U;
  4002e2:	4b38      	ldr	r3, [pc, #224]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  4002e4:	681a      	ldr	r2, [r3, #0]
  4002e6:	4613      	mov	r3, r2
  4002e8:	005b      	lsls	r3, r3, #1
  4002ea:	4413      	add	r3, r2
  4002ec:	4a35      	ldr	r2, [pc, #212]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  4002ee:	6013      	str	r3, [r2, #0]
				break;
  4002f0:	e000      	b.n	4002f4 <SystemCoreClockUpdate+0x88>
				break;
  4002f2:	bf00      	nop
		break;
  4002f4:	e042      	b.n	40037c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4002f6:	4b31      	ldr	r3, [pc, #196]	; (4003bc <SystemCoreClockUpdate+0x150>)
  4002f8:	6a1b      	ldr	r3, [r3, #32]
  4002fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4002fe:	2b00      	cmp	r3, #0
  400300:	d003      	beq.n	40030a <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;	//MK :check here
  400302:	4b30      	ldr	r3, [pc, #192]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  400304:	4a32      	ldr	r2, [pc, #200]	; (4003d0 <SystemCoreClockUpdate+0x164>)
  400306:	601a      	str	r2, [r3, #0]
  400308:	e01c      	b.n	400344 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40030a:	4b2e      	ldr	r3, [pc, #184]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  40030c:	4a2f      	ldr	r2, [pc, #188]	; (4003cc <SystemCoreClockUpdate+0x160>)
  40030e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400310:	4b2a      	ldr	r3, [pc, #168]	; (4003bc <SystemCoreClockUpdate+0x150>)
  400312:	6a1b      	ldr	r3, [r3, #32]
  400314:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400318:	2b10      	cmp	r3, #16
  40031a:	d004      	beq.n	400326 <SystemCoreClockUpdate+0xba>
  40031c:	2b20      	cmp	r3, #32
  40031e:	d008      	beq.n	400332 <SystemCoreClockUpdate+0xc6>
  400320:	2b00      	cmp	r3, #0
  400322:	d00e      	beq.n	400342 <SystemCoreClockUpdate+0xd6>
          break;
  400324:	e00e      	b.n	400344 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  400326:	4b27      	ldr	r3, [pc, #156]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  400328:	681b      	ldr	r3, [r3, #0]
  40032a:	005b      	lsls	r3, r3, #1
  40032c:	4a25      	ldr	r2, [pc, #148]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  40032e:	6013      	str	r3, [r2, #0]
          break;
  400330:	e008      	b.n	400344 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  400332:	4b24      	ldr	r3, [pc, #144]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  400334:	681a      	ldr	r2, [r3, #0]
  400336:	4613      	mov	r3, r2
  400338:	005b      	lsls	r3, r3, #1
  40033a:	4413      	add	r3, r2
  40033c:	4a21      	ldr	r2, [pc, #132]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  40033e:	6013      	str	r3, [r2, #0]
          break;
  400340:	e000      	b.n	400344 <SystemCoreClockUpdate+0xd8>
          break;
  400342:	bf00      	nop
      if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400344:	4b1d      	ldr	r3, [pc, #116]	; (4003bc <SystemCoreClockUpdate+0x150>)
  400346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400348:	f003 0303 	and.w	r3, r3, #3
  40034c:	2b02      	cmp	r3, #2
  40034e:	d114      	bne.n	40037a <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400350:	4b1a      	ldr	r3, [pc, #104]	; (4003bc <SystemCoreClockUpdate+0x150>)
  400352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  400354:	0c1b      	lsrs	r3, r3, #16
  400356:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40035a:	3301      	adds	r3, #1
  40035c:	4a19      	ldr	r2, [pc, #100]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  40035e:	6812      	ldr	r2, [r2, #0]
  400360:	fb02 f303 	mul.w	r3, r2, r3
  400364:	4a17      	ldr	r2, [pc, #92]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  400366:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400368:	4b14      	ldr	r3, [pc, #80]	; (4003bc <SystemCoreClockUpdate+0x150>)
  40036a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40036c:	b2db      	uxtb	r3, r3
  40036e:	4a15      	ldr	r2, [pc, #84]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  400370:	6812      	ldr	r2, [r2, #0]
  400372:	fbb2 f3f3 	udiv	r3, r2, r3
  400376:	4a13      	ldr	r2, [pc, #76]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  400378:	6013      	str	r3, [r2, #0]
		break;
  40037a:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3)
  40037c:	4b0f      	ldr	r3, [pc, #60]	; (4003bc <SystemCoreClockUpdate+0x150>)
  40037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400380:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400384:	2b70      	cmp	r3, #112	; 0x70
  400386:	d108      	bne.n	40039a <SystemCoreClockUpdate+0x12e>
  {
		SystemCoreClock /= 3U;
  400388:	4b0e      	ldr	r3, [pc, #56]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  40038a:	681b      	ldr	r3, [r3, #0]
  40038c:	4a11      	ldr	r2, [pc, #68]	; (4003d4 <SystemCoreClockUpdate+0x168>)
  40038e:	fba2 2303 	umull	r2, r3, r2, r3
  400392:	085b      	lsrs	r3, r3, #1
  400394:	4a0b      	ldr	r2, [pc, #44]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  400396:	6013      	str	r3, [r2, #0]
	}
  else
  {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  400398:	e00a      	b.n	4003b0 <SystemCoreClockUpdate+0x144>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40039a:	4b08      	ldr	r3, [pc, #32]	; (4003bc <SystemCoreClockUpdate+0x150>)
  40039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40039e:	091b      	lsrs	r3, r3, #4
  4003a0:	f003 0307 	and.w	r3, r3, #7
  4003a4:	4a07      	ldr	r2, [pc, #28]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  4003a6:	6812      	ldr	r2, [r2, #0]
  4003a8:	fa22 f303 	lsr.w	r3, r2, r3
  4003ac:	4a05      	ldr	r2, [pc, #20]	; (4003c4 <SystemCoreClockUpdate+0x158>)
  4003ae:	6013      	str	r3, [r2, #0]
}
  4003b0:	bf00      	nop
  4003b2:	46bd      	mov	sp, r7
  4003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003b8:	4770      	bx	lr
  4003ba:	bf00      	nop
  4003bc:	400e0400 	.word	0x400e0400
  4003c0:	400e1810 	.word	0x400e1810
  4003c4:	2000000c 	.word	0x2000000c
  4003c8:	00f42400 	.word	0x00f42400
  4003cc:	003d0900 	.word	0x003d0900
  4003d0:	00b71b00 	.word	0x00b71b00
  4003d4:	aaaaaaab 	.word	0xaaaaaaab

004003d8 <main>:
#include "WIB_Init.h"
#include "can_app.h"
#include "tasks.h"

int main (void)
{
  4003d8:	b580      	push	{r7, lr}
  4003da:	af00      	add	r7, sp, #0
//	sysclk_init(); // Initialize system clocks based on board configuration
//	board_init(); // Initialize board-specific pins/peripherals (as configured)
	//ioport_init(); // Optional: initialize I/O port service if used

	/* Initialize TIB hardware */
	WIB_Init();
  4003dc:	4b07      	ldr	r3, [pc, #28]	; (4003fc <main+0x24>)
  4003de:	4798      	blx	r3
	
	/* Initialize CAN controller */
	if (!can_app_init()) {
  4003e0:	4b07      	ldr	r3, [pc, #28]	; (400400 <main+0x28>)
  4003e2:	4798      	blx	r3
  4003e4:	4603      	mov	r3, r0
  4003e6:	f083 0301 	eor.w	r3, r3, #1
  4003ea:	b2db      	uxtb	r3, r3
  4003ec:	2b00      	cmp	r3, #0
  4003ee:	d000      	beq.n	4003f2 <main+0x1a>
		// CAN initialization failed - handle error
		while(1); // Stop execution if CAN fails
  4003f0:	e7fe      	b.n	4003f0 <main+0x18>
// 		// In production, you might want to handle this differently
// 		volatile uint32_t debug_loopback_test_failed = 1;
// 	}

	/* Create FreeRTOS tasks */
	create_application_tasks();
  4003f2:	4b04      	ldr	r3, [pc, #16]	; (400404 <main+0x2c>)
  4003f4:	4798      	blx	r3
	
	/* Start FreeRTOS scheduler */
	vTaskStartScheduler();
  4003f6:	4b04      	ldr	r3, [pc, #16]	; (400408 <main+0x30>)
  4003f8:	4798      	blx	r3

	/* Should never reach here */
	while(1);
  4003fa:	e7fe      	b.n	4003fa <main+0x22>
  4003fc:	00403831 	.word	0x00403831
  400400:	004027f9 	.word	0x004027f9
  400404:	00403785 	.word	0x00403785
  400408:	004016b5 	.word	0x004016b5

0040040c <board_init>:
#include "asf.h"

void board_init(void)
{
  40040c:	b590      	push	{r4, r7, lr}
  40040e:	b083      	sub	sp, #12
  400410:	af02      	add	r7, sp, #8
    // Enable peripheral clocks for PIO controllers
    pmc_enable_periph_clk(ID_PIOA);
  400412:	2009      	movs	r0, #9
  400414:	4b18      	ldr	r3, [pc, #96]	; (400478 <board_init+0x6c>)
  400416:	4798      	blx	r3
    pmc_enable_periph_clk(ID_PIOD);
  400418:	200c      	movs	r0, #12
  40041a:	4b17      	ldr	r3, [pc, #92]	; (400478 <board_init+0x6c>)
  40041c:	4798      	blx	r3
  
    /***********************
     * ENCODER PINS
     ***********************/
    // Encoder 1 pins (PA5, PA1) - configured as inputs with pull-up
    pio_set_input(PIOA, PIO_PA5, PIO_PULLUP);  // ENC1_A
  40041e:	2201      	movs	r2, #1
  400420:	2120      	movs	r1, #32
  400422:	4816      	ldr	r0, [pc, #88]	; (40047c <board_init+0x70>)
  400424:	4b16      	ldr	r3, [pc, #88]	; (400480 <board_init+0x74>)
  400426:	4798      	blx	r3
    pio_set_input(PIOA, PIO_PA1, PIO_PULLUP);  // ENC1_B
  400428:	2201      	movs	r2, #1
  40042a:	2102      	movs	r1, #2
  40042c:	4813      	ldr	r0, [pc, #76]	; (40047c <board_init+0x70>)
  40042e:	4b14      	ldr	r3, [pc, #80]	; (400480 <board_init+0x74>)
  400430:	4798      	blx	r3
    
    // Encoder 2 pins (PA15 conflicts with DRDY, using PA16 for ENC2_B)
    // Note: PA15 is used for SPI DRDY, so ENC2_A functionality is disabled
    pio_set_input(PIOA, PIO_PA16, PIO_PULLUP); // ENC2_B
  400432:	2201      	movs	r2, #1
  400434:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400438:	4810      	ldr	r0, [pc, #64]	; (40047c <board_init+0x70>)
  40043a:	4b11      	ldr	r3, [pc, #68]	; (400480 <board_init+0x74>)
  40043c:	4798      	blx	r3
    pio_set_input(PIOA, PIO_PA15, PIO_PULLUP);  // ENC1_A
  40043e:	2201      	movs	r2, #1
  400440:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400444:	480d      	ldr	r0, [pc, #52]	; (40047c <board_init+0x70>)
  400446:	4b0e      	ldr	r3, [pc, #56]	; (400480 <board_init+0x74>)
  400448:	4798      	blx	r3
    // Encoder enable pins (PD17, PD27) - configured as outputs, high = enabled
    pio_set_output(PIOD, PIO_PD17, 1, 0, 0);  // ENC1_ENABLE
  40044a:	2300      	movs	r3, #0
  40044c:	9300      	str	r3, [sp, #0]
  40044e:	2300      	movs	r3, #0
  400450:	2201      	movs	r2, #1
  400452:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400456:	480b      	ldr	r0, [pc, #44]	; (400484 <board_init+0x78>)
  400458:	4c0b      	ldr	r4, [pc, #44]	; (400488 <board_init+0x7c>)
  40045a:	47a0      	blx	r4
    pio_set_output(PIOD, PIO_PD27, 1, 0, 0);  // ENC2_ENABLE
  40045c:	2300      	movs	r3, #0
  40045e:	9300      	str	r3, [sp, #0]
  400460:	2300      	movs	r3, #0
  400462:	2201      	movs	r2, #1
  400464:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400468:	4806      	ldr	r0, [pc, #24]	; (400484 <board_init+0x78>)
  40046a:	4c07      	ldr	r4, [pc, #28]	; (400488 <board_init+0x7c>)
  40046c:	47a0      	blx	r4


}
  40046e:	bf00      	nop
  400470:	3704      	adds	r7, #4
  400472:	46bd      	mov	sp, r7
  400474:	bd90      	pop	{r4, r7, pc}
  400476:	bf00      	nop
  400478:	004041cd 	.word	0x004041cd
  40047c:	400e0e00 	.word	0x400e0e00
  400480:	00403fd1 	.word	0x00403fd1
  400484:	400e1400 	.word	0x400e1400
  400488:	00404051 	.word	0x00404051

0040048c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40048c:	b580      	push	{r7, lr}
  40048e:	b084      	sub	sp, #16
  400490:	af00      	add	r7, sp, #0
  400492:	6078      	str	r0, [r7, #4]
  400494:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400496:	6878      	ldr	r0, [r7, #4]
  400498:	4b2c      	ldr	r3, [pc, #176]	; (40054c <pio_handler_process+0xc0>)
  40049a:	4798      	blx	r3
  40049c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40049e:	6878      	ldr	r0, [r7, #4]
  4004a0:	4b2b      	ldr	r3, [pc, #172]	; (400550 <pio_handler_process+0xc4>)
  4004a2:	4798      	blx	r3
  4004a4:	4602      	mov	r2, r0
  4004a6:	68fb      	ldr	r3, [r7, #12]
  4004a8:	4013      	ands	r3, r2
  4004aa:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4004ac:	68fb      	ldr	r3, [r7, #12]
  4004ae:	2b00      	cmp	r3, #0
  4004b0:	d03c      	beq.n	40052c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4004b2:	2300      	movs	r3, #0
  4004b4:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4004b6:	e034      	b.n	400522 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4004b8:	4a26      	ldr	r2, [pc, #152]	; (400554 <pio_handler_process+0xc8>)
  4004ba:	68bb      	ldr	r3, [r7, #8]
  4004bc:	011b      	lsls	r3, r3, #4
  4004be:	4413      	add	r3, r2
  4004c0:	681a      	ldr	r2, [r3, #0]
  4004c2:	683b      	ldr	r3, [r7, #0]
  4004c4:	429a      	cmp	r2, r3
  4004c6:	d126      	bne.n	400516 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4004c8:	4a22      	ldr	r2, [pc, #136]	; (400554 <pio_handler_process+0xc8>)
  4004ca:	68bb      	ldr	r3, [r7, #8]
  4004cc:	011b      	lsls	r3, r3, #4
  4004ce:	4413      	add	r3, r2
  4004d0:	3304      	adds	r3, #4
  4004d2:	681a      	ldr	r2, [r3, #0]
  4004d4:	68fb      	ldr	r3, [r7, #12]
  4004d6:	4013      	ands	r3, r2
  4004d8:	2b00      	cmp	r3, #0
  4004da:	d01c      	beq.n	400516 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4004dc:	4a1d      	ldr	r2, [pc, #116]	; (400554 <pio_handler_process+0xc8>)
  4004de:	68bb      	ldr	r3, [r7, #8]
  4004e0:	011b      	lsls	r3, r3, #4
  4004e2:	4413      	add	r3, r2
  4004e4:	330c      	adds	r3, #12
  4004e6:	681b      	ldr	r3, [r3, #0]
  4004e8:	491a      	ldr	r1, [pc, #104]	; (400554 <pio_handler_process+0xc8>)
  4004ea:	68ba      	ldr	r2, [r7, #8]
  4004ec:	0112      	lsls	r2, r2, #4
  4004ee:	440a      	add	r2, r1
  4004f0:	6810      	ldr	r0, [r2, #0]
  4004f2:	4918      	ldr	r1, [pc, #96]	; (400554 <pio_handler_process+0xc8>)
  4004f4:	68ba      	ldr	r2, [r7, #8]
  4004f6:	0112      	lsls	r2, r2, #4
  4004f8:	440a      	add	r2, r1
  4004fa:	3204      	adds	r2, #4
  4004fc:	6812      	ldr	r2, [r2, #0]
  4004fe:	4611      	mov	r1, r2
  400500:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400502:	4a14      	ldr	r2, [pc, #80]	; (400554 <pio_handler_process+0xc8>)
  400504:	68bb      	ldr	r3, [r7, #8]
  400506:	011b      	lsls	r3, r3, #4
  400508:	4413      	add	r3, r2
  40050a:	3304      	adds	r3, #4
  40050c:	681b      	ldr	r3, [r3, #0]
  40050e:	43db      	mvns	r3, r3
  400510:	68fa      	ldr	r2, [r7, #12]
  400512:	4013      	ands	r3, r2
  400514:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400516:	68bb      	ldr	r3, [r7, #8]
  400518:	3301      	adds	r3, #1
  40051a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40051c:	68bb      	ldr	r3, [r7, #8]
  40051e:	2b06      	cmp	r3, #6
  400520:	d803      	bhi.n	40052a <pio_handler_process+0x9e>
		while (status != 0) {
  400522:	68fb      	ldr	r3, [r7, #12]
  400524:	2b00      	cmp	r3, #0
  400526:	d1c7      	bne.n	4004b8 <pio_handler_process+0x2c>
  400528:	e000      	b.n	40052c <pio_handler_process+0xa0>
				break;
  40052a:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40052c:	4b0a      	ldr	r3, [pc, #40]	; (400558 <pio_handler_process+0xcc>)
  40052e:	681b      	ldr	r3, [r3, #0]
  400530:	2b00      	cmp	r3, #0
  400532:	d007      	beq.n	400544 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  400534:	4b09      	ldr	r3, [pc, #36]	; (40055c <pio_handler_process+0xd0>)
  400536:	681b      	ldr	r3, [r3, #0]
  400538:	2b00      	cmp	r3, #0
  40053a:	d003      	beq.n	400544 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  40053c:	4b07      	ldr	r3, [pc, #28]	; (40055c <pio_handler_process+0xd0>)
  40053e:	681b      	ldr	r3, [r3, #0]
  400540:	6878      	ldr	r0, [r7, #4]
  400542:	4798      	blx	r3
		}
	}
#endif
}
  400544:	bf00      	nop
  400546:	3710      	adds	r7, #16
  400548:	46bd      	mov	sp, r7
  40054a:	bd80      	pop	{r7, pc}
  40054c:	0040419d 	.word	0x0040419d
  400550:	004041b5 	.word	0x004041b5
  400554:	2000046c 	.word	0x2000046c
  400558:	2000a66c 	.word	0x2000a66c
  40055c:	200004dc 	.word	0x200004dc

00400560 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400560:	b580      	push	{r7, lr}
  400562:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400564:	2109      	movs	r1, #9
  400566:	4802      	ldr	r0, [pc, #8]	; (400570 <PIOA_Handler+0x10>)
  400568:	4b02      	ldr	r3, [pc, #8]	; (400574 <PIOA_Handler+0x14>)
  40056a:	4798      	blx	r3
}
  40056c:	bf00      	nop
  40056e:	bd80      	pop	{r7, pc}
  400570:	400e0e00 	.word	0x400e0e00
  400574:	0040048d 	.word	0x0040048d

00400578 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400578:	b580      	push	{r7, lr}
  40057a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40057c:	210a      	movs	r1, #10
  40057e:	4802      	ldr	r0, [pc, #8]	; (400588 <PIOB_Handler+0x10>)
  400580:	4b02      	ldr	r3, [pc, #8]	; (40058c <PIOB_Handler+0x14>)
  400582:	4798      	blx	r3
}
  400584:	bf00      	nop
  400586:	bd80      	pop	{r7, pc}
  400588:	400e1000 	.word	0x400e1000
  40058c:	0040048d 	.word	0x0040048d

00400590 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400590:	b580      	push	{r7, lr}
  400592:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400594:	210b      	movs	r1, #11
  400596:	4802      	ldr	r0, [pc, #8]	; (4005a0 <PIOC_Handler+0x10>)
  400598:	4b02      	ldr	r3, [pc, #8]	; (4005a4 <PIOC_Handler+0x14>)
  40059a:	4798      	blx	r3
}
  40059c:	bf00      	nop
  40059e:	bd80      	pop	{r7, pc}
  4005a0:	400e1200 	.word	0x400e1200
  4005a4:	0040048d 	.word	0x0040048d

004005a8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4005a8:	b580      	push	{r7, lr}
  4005aa:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4005ac:	210c      	movs	r1, #12
  4005ae:	4802      	ldr	r0, [pc, #8]	; (4005b8 <PIOD_Handler+0x10>)
  4005b0:	4b02      	ldr	r3, [pc, #8]	; (4005bc <PIOD_Handler+0x14>)
  4005b2:	4798      	blx	r3
}
  4005b4:	bf00      	nop
  4005b6:	bd80      	pop	{r7, pc}
  4005b8:	400e1400 	.word	0x400e1400
  4005bc:	0040048d 	.word	0x0040048d

004005c0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4005c0:	b580      	push	{r7, lr}
  4005c2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4005c4:	210d      	movs	r1, #13
  4005c6:	4802      	ldr	r0, [pc, #8]	; (4005d0 <PIOE_Handler+0x10>)
  4005c8:	4b02      	ldr	r3, [pc, #8]	; (4005d4 <PIOE_Handler+0x14>)
  4005ca:	4798      	blx	r3
}
  4005cc:	bf00      	nop
  4005ce:	bd80      	pop	{r7, pc}
  4005d0:	400e1600 	.word	0x400e1600
  4005d4:	0040048d 	.word	0x0040048d

004005d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  4005d8:	b480      	push	{r7}
  4005da:	b083      	sub	sp, #12
  4005dc:	af00      	add	r7, sp, #0
  4005de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  4005e0:	687b      	ldr	r3, [r7, #4]
  4005e2:	f103 0208 	add.w	r2, r3, #8
  4005e6:	687b      	ldr	r3, [r7, #4]
  4005e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4005ea:	687b      	ldr	r3, [r7, #4]
  4005ec:	f04f 32ff 	mov.w	r2, #4294967295
  4005f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  4005f2:	687b      	ldr	r3, [r7, #4]
  4005f4:	f103 0208 	add.w	r2, r3, #8
  4005f8:	687b      	ldr	r3, [r7, #4]
  4005fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  4005fc:	687b      	ldr	r3, [r7, #4]
  4005fe:	f103 0208 	add.w	r2, r3, #8
  400602:	687b      	ldr	r3, [r7, #4]
  400604:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  400606:	687b      	ldr	r3, [r7, #4]
  400608:	2200      	movs	r2, #0
  40060a:	601a      	str	r2, [r3, #0]
}
  40060c:	bf00      	nop
  40060e:	370c      	adds	r7, #12
  400610:	46bd      	mov	sp, r7
  400612:	f85d 7b04 	ldr.w	r7, [sp], #4
  400616:	4770      	bx	lr

00400618 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  400618:	b480      	push	{r7}
  40061a:	b083      	sub	sp, #12
  40061c:	af00      	add	r7, sp, #0
  40061e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400620:	687b      	ldr	r3, [r7, #4]
  400622:	2200      	movs	r2, #0
  400624:	611a      	str	r2, [r3, #16]
}
  400626:	bf00      	nop
  400628:	370c      	adds	r7, #12
  40062a:	46bd      	mov	sp, r7
  40062c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400630:	4770      	bx	lr

00400632 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  400632:	b480      	push	{r7}
  400634:	b085      	sub	sp, #20
  400636:	af00      	add	r7, sp, #0
  400638:	6078      	str	r0, [r7, #4]
  40063a:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  40063c:	687b      	ldr	r3, [r7, #4]
  40063e:	685b      	ldr	r3, [r3, #4]
  400640:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  400642:	68fb      	ldr	r3, [r7, #12]
  400644:	685a      	ldr	r2, [r3, #4]
  400646:	683b      	ldr	r3, [r7, #0]
  400648:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  40064a:	687b      	ldr	r3, [r7, #4]
  40064c:	685a      	ldr	r2, [r3, #4]
  40064e:	683b      	ldr	r3, [r7, #0]
  400650:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  400652:	68fb      	ldr	r3, [r7, #12]
  400654:	685b      	ldr	r3, [r3, #4]
  400656:	683a      	ldr	r2, [r7, #0]
  400658:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  40065a:	68fb      	ldr	r3, [r7, #12]
  40065c:	683a      	ldr	r2, [r7, #0]
  40065e:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  400660:	687b      	ldr	r3, [r7, #4]
  400662:	683a      	ldr	r2, [r7, #0]
  400664:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400666:	683b      	ldr	r3, [r7, #0]
  400668:	687a      	ldr	r2, [r7, #4]
  40066a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  40066c:	687b      	ldr	r3, [r7, #4]
  40066e:	681b      	ldr	r3, [r3, #0]
  400670:	1c5a      	adds	r2, r3, #1
  400672:	687b      	ldr	r3, [r7, #4]
  400674:	601a      	str	r2, [r3, #0]
}
  400676:	bf00      	nop
  400678:	3714      	adds	r7, #20
  40067a:	46bd      	mov	sp, r7
  40067c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400680:	4770      	bx	lr

00400682 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  400682:	b480      	push	{r7}
  400684:	b085      	sub	sp, #20
  400686:	af00      	add	r7, sp, #0
  400688:	6078      	str	r0, [r7, #4]
  40068a:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  40068c:	683b      	ldr	r3, [r7, #0]
  40068e:	681b      	ldr	r3, [r3, #0]
  400690:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400692:	68bb      	ldr	r3, [r7, #8]
  400694:	f1b3 3fff 	cmp.w	r3, #4294967295
  400698:	d103      	bne.n	4006a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  40069a:	687b      	ldr	r3, [r7, #4]
  40069c:	691b      	ldr	r3, [r3, #16]
  40069e:	60fb      	str	r3, [r7, #12]
  4006a0:	e00c      	b.n	4006bc <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  4006a2:	687b      	ldr	r3, [r7, #4]
  4006a4:	3308      	adds	r3, #8
  4006a6:	60fb      	str	r3, [r7, #12]
  4006a8:	e002      	b.n	4006b0 <vListInsert+0x2e>
  4006aa:	68fb      	ldr	r3, [r7, #12]
  4006ac:	685b      	ldr	r3, [r3, #4]
  4006ae:	60fb      	str	r3, [r7, #12]
  4006b0:	68fb      	ldr	r3, [r7, #12]
  4006b2:	685b      	ldr	r3, [r3, #4]
  4006b4:	681a      	ldr	r2, [r3, #0]
  4006b6:	68bb      	ldr	r3, [r7, #8]
  4006b8:	429a      	cmp	r2, r3
  4006ba:	d9f6      	bls.n	4006aa <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4006bc:	68fb      	ldr	r3, [r7, #12]
  4006be:	685a      	ldr	r2, [r3, #4]
  4006c0:	683b      	ldr	r3, [r7, #0]
  4006c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  4006c4:	683b      	ldr	r3, [r7, #0]
  4006c6:	685b      	ldr	r3, [r3, #4]
  4006c8:	683a      	ldr	r2, [r7, #0]
  4006ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4006cc:	683b      	ldr	r3, [r7, #0]
  4006ce:	68fa      	ldr	r2, [r7, #12]
  4006d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  4006d2:	68fb      	ldr	r3, [r7, #12]
  4006d4:	683a      	ldr	r2, [r7, #0]
  4006d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4006d8:	683b      	ldr	r3, [r7, #0]
  4006da:	687a      	ldr	r2, [r7, #4]
  4006dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  4006de:	687b      	ldr	r3, [r7, #4]
  4006e0:	681b      	ldr	r3, [r3, #0]
  4006e2:	1c5a      	adds	r2, r3, #1
  4006e4:	687b      	ldr	r3, [r7, #4]
  4006e6:	601a      	str	r2, [r3, #0]
}
  4006e8:	bf00      	nop
  4006ea:	3714      	adds	r7, #20
  4006ec:	46bd      	mov	sp, r7
  4006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006f2:	4770      	bx	lr

004006f4 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  4006f4:	b480      	push	{r7}
  4006f6:	b085      	sub	sp, #20
  4006f8:	af00      	add	r7, sp, #0
  4006fa:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4006fc:	687b      	ldr	r3, [r7, #4]
  4006fe:	685b      	ldr	r3, [r3, #4]
  400700:	687a      	ldr	r2, [r7, #4]
  400702:	6892      	ldr	r2, [r2, #8]
  400704:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400706:	687b      	ldr	r3, [r7, #4]
  400708:	689b      	ldr	r3, [r3, #8]
  40070a:	687a      	ldr	r2, [r7, #4]
  40070c:	6852      	ldr	r2, [r2, #4]
  40070e:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  400710:	687b      	ldr	r3, [r7, #4]
  400712:	691b      	ldr	r3, [r3, #16]
  400714:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400716:	68fb      	ldr	r3, [r7, #12]
  400718:	685a      	ldr	r2, [r3, #4]
  40071a:	687b      	ldr	r3, [r7, #4]
  40071c:	429a      	cmp	r2, r3
  40071e:	d103      	bne.n	400728 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400720:	687b      	ldr	r3, [r7, #4]
  400722:	689a      	ldr	r2, [r3, #8]
  400724:	68fb      	ldr	r3, [r7, #12]
  400726:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  400728:	687b      	ldr	r3, [r7, #4]
  40072a:	2200      	movs	r2, #0
  40072c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  40072e:	68fb      	ldr	r3, [r7, #12]
  400730:	681b      	ldr	r3, [r3, #0]
  400732:	1e5a      	subs	r2, r3, #1
  400734:	68fb      	ldr	r3, [r7, #12]
  400736:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400738:	68fb      	ldr	r3, [r7, #12]
  40073a:	681b      	ldr	r3, [r3, #0]
}
  40073c:	4618      	mov	r0, r3
  40073e:	3714      	adds	r7, #20
  400740:	46bd      	mov	sp, r7
  400742:	f85d 7b04 	ldr.w	r7, [sp], #4
  400746:	4770      	bx	lr

00400748 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400748:	b480      	push	{r7}
  40074a:	b083      	sub	sp, #12
  40074c:	af00      	add	r7, sp, #0
  40074e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400750:	687b      	ldr	r3, [r7, #4]
  400752:	2b07      	cmp	r3, #7
  400754:	d825      	bhi.n	4007a2 <osc_get_rate+0x5a>
  400756:	a201      	add	r2, pc, #4	; (adr r2, 40075c <osc_get_rate+0x14>)
  400758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40075c:	0040077d 	.word	0x0040077d
  400760:	00400783 	.word	0x00400783
  400764:	00400789 	.word	0x00400789
  400768:	0040078f 	.word	0x0040078f
  40076c:	00400793 	.word	0x00400793
  400770:	00400797 	.word	0x00400797
  400774:	0040079b 	.word	0x0040079b
  400778:	0040079f 	.word	0x0040079f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40077c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400780:	e010      	b.n	4007a4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400786:	e00d      	b.n	4007a4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40078c:	e00a      	b.n	4007a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40078e:	4b08      	ldr	r3, [pc, #32]	; (4007b0 <osc_get_rate+0x68>)
  400790:	e008      	b.n	4007a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400792:	4b08      	ldr	r3, [pc, #32]	; (4007b4 <osc_get_rate+0x6c>)
  400794:	e006      	b.n	4007a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400796:	4b08      	ldr	r3, [pc, #32]	; (4007b8 <osc_get_rate+0x70>)
  400798:	e004      	b.n	4007a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40079a:	4b08      	ldr	r3, [pc, #32]	; (4007bc <osc_get_rate+0x74>)
  40079c:	e002      	b.n	4007a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40079e:	4b06      	ldr	r3, [pc, #24]	; (4007b8 <osc_get_rate+0x70>)
  4007a0:	e000      	b.n	4007a4 <osc_get_rate+0x5c>
	}

	return 0;
  4007a2:	2300      	movs	r3, #0
}
  4007a4:	4618      	mov	r0, r3
  4007a6:	370c      	adds	r7, #12
  4007a8:	46bd      	mov	sp, r7
  4007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007ae:	4770      	bx	lr
  4007b0:	003d0900 	.word	0x003d0900
  4007b4:	007a1200 	.word	0x007a1200
  4007b8:	00b71b00 	.word	0x00b71b00
  4007bc:	00f42400 	.word	0x00f42400

004007c0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4007c0:	b580      	push	{r7, lr}
  4007c2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4007c4:	2006      	movs	r0, #6
  4007c6:	4b05      	ldr	r3, [pc, #20]	; (4007dc <sysclk_get_main_hz+0x1c>)
  4007c8:	4798      	blx	r3
  4007ca:	4602      	mov	r2, r0
  4007cc:	4613      	mov	r3, r2
  4007ce:	005b      	lsls	r3, r3, #1
  4007d0:	4413      	add	r3, r2
  4007d2:	009b      	lsls	r3, r3, #2
  4007d4:	085b      	lsrs	r3, r3, #1

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4007d6:	4618      	mov	r0, r3
  4007d8:	bd80      	pop	{r7, pc}
  4007da:	bf00      	nop
  4007dc:	00400749 	.word	0x00400749

004007e0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4007e0:	b580      	push	{r7, lr}
  4007e2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4007e4:	4b02      	ldr	r3, [pc, #8]	; (4007f0 <sysclk_get_cpu_hz+0x10>)
  4007e6:	4798      	blx	r3
  4007e8:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4007ea:	4618      	mov	r0, r3
  4007ec:	bd80      	pop	{r7, pc}
  4007ee:	bf00      	nop
  4007f0:	004007c1 	.word	0x004007c1

004007f4 <pxPortInitialiseStack>:
/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack,
		pdTASK_CODE pxCode, void *pvParameters )
{
  4007f4:	b480      	push	{r7}
  4007f6:	b085      	sub	sp, #20
  4007f8:	af00      	add	r7, sp, #0
  4007fa:	60f8      	str	r0, [r7, #12]
  4007fc:	60b9      	str	r1, [r7, #8]
  4007fe:	607a      	str	r2, [r7, #4]
	* interrupt. */

	/* Offset added to account for the way the MCU uses the stack on
	* entry/exit
	* of interrupts, and to ensure alignment. */
	pxTopOfStack--;
  400800:	68fb      	ldr	r3, [r7, #12]
  400802:	3b04      	subs	r3, #4
  400804:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;    /* xPSR */
  400806:	68fb      	ldr	r3, [r7, #12]
  400808:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  40080c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40080e:	68fb      	ldr	r3, [r7, #12]
  400810:	3b04      	subs	r3, #4
  400812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pxCode;       /* PC */
  400814:	68ba      	ldr	r2, [r7, #8]
  400816:	68fb      	ldr	r3, [r7, #12]
  400818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40081a:	68fb      	ldr	r3, [r7, #12]
  40081c:	3b04      	subs	r3, #4
  40081e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;    /* LR */
  400820:	68fb      	ldr	r3, [r7, #12]
  400822:	2200      	movs	r2, #0
  400824:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;    /* R12, R3, R2 and R1. */
  400826:	68fb      	ldr	r3, [r7, #12]
  400828:	3b14      	subs	r3, #20
  40082a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;       /* R0 */
  40082c:	687a      	ldr	r2, [r7, #4]
  40082e:	68fb      	ldr	r3, [r7, #12]
  400830:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	* own exec return value. */
	pxTopOfStack--;
  400832:	68fb      	ldr	r3, [r7, #12]
  400834:	3b04      	subs	r3, #4
  400836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400838:	68fb      	ldr	r3, [r7, #12]
  40083a:	f06f 0202 	mvn.w	r2, #2
  40083e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;    /* R11, R10, R9, R8, R7, R6, R5 and R4. */
  400840:	68fb      	ldr	r3, [r7, #12]
  400842:	3b20      	subs	r3, #32
  400844:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  400846:	68fb      	ldr	r3, [r7, #12]
}
  400848:	4618      	mov	r0, r3
  40084a:	3714      	adds	r7, #20
  40084c:	46bd      	mov	sp, r7
  40084e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400852:	4770      	bx	lr

00400854 <SVC_Handler>:
/*-----------------------------------------------------------*/

/*void vPortSVCHandler( void )*/ /* ATMEL */
__attribute__ ((naked)) void SVC_Handler( void )
{
	__asm volatile (
  400854:	4b05      	ldr	r3, [pc, #20]	; (40086c <pxCurrentTCBConst2>)
  400856:	6819      	ldr	r1, [r3, #0]
  400858:	6808      	ldr	r0, [r1, #0]
  40085a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40085e:	f380 8809 	msr	PSP, r0
  400862:	f04f 0000 	mov.w	r0, #0
  400866:	f380 8811 	msr	BASEPRI, r0
  40086a:	4770      	bx	lr

0040086c <pxCurrentTCBConst2>:
  40086c:	2000a4ec 	.word	0x2000a4ec
		" bx r14                          \n"
		"                                   \n"
		" .align 2                        \n"
		"pxCurrentTCBConst2: .word pxCurrentTCB \n"
		);
}
  400870:	bf00      	nop
  400872:	bf00      	nop

00400874 <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile (
  400874:	4804      	ldr	r0, [pc, #16]	; (400888 <prvPortStartFirstTask+0x14>)
  400876:	6800      	ldr	r0, [r0, #0]
  400878:	6800      	ldr	r0, [r0, #0]
  40087a:	f380 8808 	msr	MSP, r0
  40087e:	b662      	cpsie	i
  400880:	df00      	svc	0
  400882:	bf00      	nop
		" msr msp, r0             \n"                         /* Set the msp back to the start of the stack. */
		" cpsie i                 \n"                         /* Globally enable interrupts. */
		" svc 0                   \n"                         /* System call to start first task. */
		" nop                     \n"
		);
}
  400884:	bf00      	nop
  400886:	0000      	.short	0x0000
  400888:	e000ed08 	.word	0xe000ed08

0040088c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  40088c:	b580      	push	{r7, lr}
  40088e:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	* See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400890:	4a0e      	ldr	r2, [pc, #56]	; (4008cc <xPortStartScheduler+0x40>)
  400892:	4b0e      	ldr	r3, [pc, #56]	; (4008cc <xPortStartScheduler+0x40>)
  400894:	681b      	ldr	r3, [r3, #0]
  400896:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40089a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40089c:	4a0b      	ldr	r2, [pc, #44]	; (4008cc <xPortStartScheduler+0x40>)
  40089e:	4b0b      	ldr	r3, [pc, #44]	; (4008cc <xPortStartScheduler+0x40>)
  4008a0:	681b      	ldr	r3, [r3, #0]
  4008a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
  4008a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	* here already. */
	vPortSetupTimerInterrupt();
  4008a8:	4b09      	ldr	r3, [pc, #36]	; (4008d0 <xPortStartScheduler+0x44>)
  4008aa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  4008ac:	4b09      	ldr	r3, [pc, #36]	; (4008d4 <xPortStartScheduler+0x48>)
  4008ae:	2200      	movs	r2, #0
  4008b0:	601a      	str	r2, [r3, #0]

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  4008b2:	4b09      	ldr	r3, [pc, #36]	; (4008d8 <xPortStartScheduler+0x4c>)
  4008b4:	4798      	blx	r3
#endif

	/* Lazy save always. */
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
  4008b6:	4a09      	ldr	r2, [pc, #36]	; (4008dc <xPortStartScheduler+0x50>)
  4008b8:	4b08      	ldr	r3, [pc, #32]	; (4008dc <xPortStartScheduler+0x50>)
  4008ba:	681b      	ldr	r3, [r3, #0]
  4008bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4008c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  4008c2:	4b07      	ldr	r3, [pc, #28]	; (4008e0 <xPortStartScheduler+0x54>)
  4008c4:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  4008c6:	2300      	movs	r3, #0
}
  4008c8:	4618      	mov	r0, r3
  4008ca:	bd80      	pop	{r7, pc}
  4008cc:	e000ed20 	.word	0xe000ed20
  4008d0:	004009e9 	.word	0x004009e9
  4008d4:	20000010 	.word	0x20000010
  4008d8:	00400a1d 	.word	0x00400a1d
  4008dc:	e000ef34 	.word	0xe000ef34
  4008e0:	00400875 	.word	0x00400875

004008e4 <vPortYieldFromISR>:
}

/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  4008e4:	b480      	push	{r7}
  4008e6:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4008e8:	4b04      	ldr	r3, [pc, #16]	; (4008fc <vPortYieldFromISR+0x18>)
  4008ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4008ee:	601a      	str	r2, [r3, #0]
}
  4008f0:	bf00      	nop
  4008f2:	46bd      	mov	sp, r7
  4008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008f8:	4770      	bx	lr
  4008fa:	bf00      	nop
  4008fc:	e000ed04 	.word	0xe000ed04

00400900 <vPortEnterCritical>:

/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  400900:	b580      	push	{r7, lr}
  400902:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  400904:	4b04      	ldr	r3, [pc, #16]	; (400918 <vPortEnterCritical+0x18>)
  400906:	4798      	blx	r3
	uxCriticalNesting++;
  400908:	4b04      	ldr	r3, [pc, #16]	; (40091c <vPortEnterCritical+0x1c>)
  40090a:	681b      	ldr	r3, [r3, #0]
  40090c:	3301      	adds	r3, #1
  40090e:	4a03      	ldr	r2, [pc, #12]	; (40091c <vPortEnterCritical+0x1c>)
  400910:	6013      	str	r3, [r2, #0]
}
  400912:	bf00      	nop
  400914:	bd80      	pop	{r7, pc}
  400916:	bf00      	nop
  400918:	00400949 	.word	0x00400949
  40091c:	20000010 	.word	0x20000010

00400920 <vPortExitCritical>:

/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  400920:	b580      	push	{r7, lr}
  400922:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  400924:	4b06      	ldr	r3, [pc, #24]	; (400940 <vPortExitCritical+0x20>)
  400926:	681b      	ldr	r3, [r3, #0]
  400928:	3b01      	subs	r3, #1
  40092a:	4a05      	ldr	r2, [pc, #20]	; (400940 <vPortExitCritical+0x20>)
  40092c:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
  40092e:	4b04      	ldr	r3, [pc, #16]	; (400940 <vPortExitCritical+0x20>)
  400930:	681b      	ldr	r3, [r3, #0]
  400932:	2b00      	cmp	r3, #0
  400934:	d102      	bne.n	40093c <vPortExitCritical+0x1c>
		portENABLE_INTERRUPTS();
  400936:	2000      	movs	r0, #0
  400938:	4b02      	ldr	r3, [pc, #8]	; (400944 <vPortExitCritical+0x24>)
  40093a:	4798      	blx	r3
	}
}
  40093c:	bf00      	nop
  40093e:	bd80      	pop	{r7, pc}
  400940:	20000010 	.word	0x20000010
  400944:	0040095b 	.word	0x0040095b

00400948 <ulPortSetInterruptMask>:

/*-----------------------------------------------------------*/

__attribute__((naked)) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile \
  400948:	f3ef 8011 	mrs	r0, BASEPRI
  40094c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  400950:	f381 8811 	msr	BASEPRI, r1
  400954:	4770      	bx	lr
		:: "i" (configMAX_SYSCALL_INTERRUPT_PRIORITY) : "r0", "r1" \
	);

	/* This return will not be reached but is necessary to prevent compiler
	 * warnings. */
	return 0;
  400956:	2300      	movs	r3, #0
}
  400958:	4618      	mov	r0, r3

0040095a <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__((naked)) void vPortClearInterruptMask(
		unsigned long ulNewMaskValue )
{
	__asm volatile \
  40095a:	f380 8811 	msr	BASEPRI, r0
  40095e:	4770      	bx	lr
	( \
		" msr basepri, r0                            \n" \
		" bx lr                                      \n" \
		::: "r0" \
	);
}
  400960:	bf00      	nop
	...

00400964 <PendSV_Handler>:
/*void xPortPendSVHandler( void )*/
__attribute__((naked)) void PendSV_Handler( void )   /* ATMEL */
{
	/* This is a naked function. */

	__asm volatile
  400964:	f3ef 8009 	mrs	r0, PSP
  400968:	4b11      	ldr	r3, [pc, #68]	; (4009b0 <pxCurrentTCBConst>)
  40096a:	681a      	ldr	r2, [r3, #0]
  40096c:	f01e 0f10 	tst.w	lr, #16
  400970:	bf08      	it	eq
  400972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40097a:	6010      	str	r0, [r2, #0]
  40097c:	e92d 4008 	stmdb	sp!, {r3, lr}
  400980:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  400984:	f380 8811 	msr	BASEPRI, r0
  400988:	f001 f82e 	bl	4019e8 <vTaskSwitchContext>
  40098c:	f04f 0000 	mov.w	r0, #0
  400990:	f380 8811 	msr	BASEPRI, r0
  400994:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400998:	6819      	ldr	r1, [r3, #0]
  40099a:	6808      	ldr	r0, [r1, #0]
  40099c:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4009a0:	f01e 0f10 	tst.w	lr, #16
  4009a4:	bf08      	it	eq
  4009a6:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4009aa:	f380 8809 	msr	PSP, r0
  4009ae:	4770      	bx	lr

004009b0 <pxCurrentTCBConst>:
  4009b0:	2000a4ec 	.word	0x2000a4ec
		"                                       \n"
		"   .align 2                            \n"
		"pxCurrentTCBConst: .word pxCurrentTCB    \n"
		::"i" (configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
  4009b4:	bf00      	nop
  4009b6:	bf00      	nop

004009b8 <SysTick_Handler>:

/*-----------------------------------------------------------*/
void SysTick_Handler( void ) /* ATMEL */
{
  4009b8:	b580      	push	{r7, lr}
  4009ba:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4009bc:	4b06      	ldr	r3, [pc, #24]	; (4009d8 <SysTick_Handler+0x20>)
  4009be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4009c2:	601a      	str	r2, [r3, #0]
	#endif

	(void)portSET_INTERRUPT_MASK_FROM_ISR();
  4009c4:	4b05      	ldr	r3, [pc, #20]	; (4009dc <SysTick_Handler+0x24>)
  4009c6:	4798      	blx	r3
	{
		vTaskIncrementTick();
  4009c8:	4b05      	ldr	r3, [pc, #20]	; (4009e0 <SysTick_Handler+0x28>)
  4009ca:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  4009cc:	2000      	movs	r0, #0
  4009ce:	4b05      	ldr	r3, [pc, #20]	; (4009e4 <SysTick_Handler+0x2c>)
  4009d0:	4798      	blx	r3
}
  4009d2:	bf00      	nop
  4009d4:	bd80      	pop	{r7, pc}
  4009d6:	bf00      	nop
  4009d8:	e000ed04 	.word	0xe000ed04
  4009dc:	00400949 	.word	0x00400949
  4009e0:	0040189d 	.word	0x0040189d
  4009e4:	0040095b 	.word	0x0040095b

004009e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__((weak)) void vPortSetupTimerInterrupt( void )
{
  4009e8:	b598      	push	{r3, r4, r7, lr}
  4009ea:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG
  4009ec:	4c07      	ldr	r4, [pc, #28]	; (400a0c <vPortSetupTimerInterrupt+0x24>)
		= (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  4009ee:	4b08      	ldr	r3, [pc, #32]	; (400a10 <vPortSetupTimerInterrupt+0x28>)
  4009f0:	4798      	blx	r3
  4009f2:	4602      	mov	r2, r0
  4009f4:	4b07      	ldr	r3, [pc, #28]	; (400a14 <vPortSetupTimerInterrupt+0x2c>)
  4009f6:	fba3 2302 	umull	r2, r3, r3, r2
  4009fa:	099b      	lsrs	r3, r3, #6
  4009fc:	3b01      	subs	r3, #1
  4009fe:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT |
  400a00:	4b05      	ldr	r3, [pc, #20]	; (400a18 <vPortSetupTimerInterrupt+0x30>)
  400a02:	2207      	movs	r2, #7
  400a04:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
}
  400a06:	bf00      	nop
  400a08:	bd98      	pop	{r3, r4, r7, pc}
  400a0a:	bf00      	nop
  400a0c:	e000e014 	.word	0xe000e014
  400a10:	004007e1 	.word	0x004007e1
  400a14:	10624dd3 	.word	0x10624dd3
  400a18:	e000e010 	.word	0xe000e010

00400a1c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400a1c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400a2c <vPortEnableVFP+0x10>
  400a20:	6801      	ldr	r1, [r0, #0]
  400a22:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400a26:	6001      	str	r1, [r0, #0]
  400a28:	4770      	bx	lr
		"                            \n"
		" orr r1, r1, #( 0xf << 20 ) \n" /* Enable CP10 and CP11 coprocessors, then save back. */
		" str r1, [r0]               \n"
		" bx r14                     "
	);
}
  400a2a:	bf00      	nop
  400a2c:	e000ed88 	.word	0xe000ed88

00400a30 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  400a30:	b580      	push	{r7, lr}
  400a32:	b086      	sub	sp, #24
  400a34:	af00      	add	r7, sp, #0
  400a36:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  400a38:	2300      	movs	r3, #0
  400a3a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  400a3c:	4b34      	ldr	r3, [pc, #208]	; (400b10 <pvPortMalloc+0xe0>)
  400a3e:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  400a40:	4b34      	ldr	r3, [pc, #208]	; (400b14 <pvPortMalloc+0xe4>)
  400a42:	681b      	ldr	r3, [r3, #0]
  400a44:	2b00      	cmp	r3, #0
  400a46:	d101      	bne.n	400a4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  400a48:	4b33      	ldr	r3, [pc, #204]	; (400b18 <pvPortMalloc+0xe8>)
  400a4a:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  400a4c:	687b      	ldr	r3, [r7, #4]
  400a4e:	2b00      	cmp	r3, #0
  400a50:	d00e      	beq.n	400a70 <pvPortMalloc+0x40>
		{
			xWantedSize += heapSTRUCT_SIZE;
  400a52:	2310      	movs	r3, #16
  400a54:	461a      	mov	r2, r3
  400a56:	687b      	ldr	r3, [r7, #4]
  400a58:	4413      	add	r3, r2
  400a5a:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400a5c:	687b      	ldr	r3, [r7, #4]
  400a5e:	f003 0307 	and.w	r3, r3, #7
  400a62:	2b00      	cmp	r3, #0
  400a64:	d004      	beq.n	400a70 <pvPortMalloc+0x40>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400a66:	687b      	ldr	r3, [r7, #4]
  400a68:	f023 0307 	bic.w	r3, r3, #7
  400a6c:	3308      	adds	r3, #8
  400a6e:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  400a70:	687b      	ldr	r3, [r7, #4]
  400a72:	2b00      	cmp	r3, #0
  400a74:	d045      	beq.n	400b02 <pvPortMalloc+0xd2>
  400a76:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  400a7a:	687b      	ldr	r3, [r7, #4]
  400a7c:	4293      	cmp	r3, r2
  400a7e:	d240      	bcs.n	400b02 <pvPortMalloc+0xd2>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  400a80:	4b26      	ldr	r3, [pc, #152]	; (400b1c <pvPortMalloc+0xec>)
  400a82:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  400a84:	4b25      	ldr	r3, [pc, #148]	; (400b1c <pvPortMalloc+0xec>)
  400a86:	681b      	ldr	r3, [r3, #0]
  400a88:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400a8a:	e004      	b.n	400a96 <pvPortMalloc+0x66>
			{
				pxPreviousBlock = pxBlock;
  400a8c:	697b      	ldr	r3, [r7, #20]
  400a8e:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  400a90:	697b      	ldr	r3, [r7, #20]
  400a92:	681b      	ldr	r3, [r3, #0]
  400a94:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400a96:	697b      	ldr	r3, [r7, #20]
  400a98:	685a      	ldr	r2, [r3, #4]
  400a9a:	687b      	ldr	r3, [r7, #4]
  400a9c:	429a      	cmp	r2, r3
  400a9e:	d203      	bcs.n	400aa8 <pvPortMalloc+0x78>
  400aa0:	697b      	ldr	r3, [r7, #20]
  400aa2:	681b      	ldr	r3, [r3, #0]
  400aa4:	2b00      	cmp	r3, #0
  400aa6:	d1f1      	bne.n	400a8c <pvPortMalloc+0x5c>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  400aa8:	4b1a      	ldr	r3, [pc, #104]	; (400b14 <pvPortMalloc+0xe4>)
  400aaa:	681b      	ldr	r3, [r3, #0]
  400aac:	697a      	ldr	r2, [r7, #20]
  400aae:	429a      	cmp	r2, r3
  400ab0:	d027      	beq.n	400b02 <pvPortMalloc+0xd2>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  400ab2:	693b      	ldr	r3, [r7, #16]
  400ab4:	681b      	ldr	r3, [r3, #0]
  400ab6:	2210      	movs	r2, #16
  400ab8:	4413      	add	r3, r2
  400aba:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  400abc:	697b      	ldr	r3, [r7, #20]
  400abe:	681a      	ldr	r2, [r3, #0]
  400ac0:	693b      	ldr	r3, [r7, #16]
  400ac2:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400ac4:	697b      	ldr	r3, [r7, #20]
  400ac6:	685a      	ldr	r2, [r3, #4]
  400ac8:	687b      	ldr	r3, [r7, #4]
  400aca:	1ad3      	subs	r3, r2, r3
  400acc:	2210      	movs	r2, #16
  400ace:	0052      	lsls	r2, r2, #1
  400ad0:	4293      	cmp	r3, r2
  400ad2:	d90f      	bls.n	400af4 <pvPortMalloc+0xc4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  400ad4:	697a      	ldr	r2, [r7, #20]
  400ad6:	687b      	ldr	r3, [r7, #4]
  400ad8:	4413      	add	r3, r2
  400ada:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  400adc:	697b      	ldr	r3, [r7, #20]
  400ade:	685a      	ldr	r2, [r3, #4]
  400ae0:	687b      	ldr	r3, [r7, #4]
  400ae2:	1ad2      	subs	r2, r2, r3
  400ae4:	68bb      	ldr	r3, [r7, #8]
  400ae6:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  400ae8:	697b      	ldr	r3, [r7, #20]
  400aea:	687a      	ldr	r2, [r7, #4]
  400aec:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  400aee:	68b8      	ldr	r0, [r7, #8]
  400af0:	4b0b      	ldr	r3, [pc, #44]	; (400b20 <pvPortMalloc+0xf0>)
  400af2:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  400af4:	4b0b      	ldr	r3, [pc, #44]	; (400b24 <pvPortMalloc+0xf4>)
  400af6:	681a      	ldr	r2, [r3, #0]
  400af8:	697b      	ldr	r3, [r7, #20]
  400afa:	685b      	ldr	r3, [r3, #4]
  400afc:	1ad3      	subs	r3, r2, r3
  400afe:	4a09      	ldr	r2, [pc, #36]	; (400b24 <pvPortMalloc+0xf4>)
  400b00:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  400b02:	4b09      	ldr	r3, [pc, #36]	; (400b28 <pvPortMalloc+0xf8>)
  400b04:	4798      	blx	r3
			;//SvApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
  400b06:	68fb      	ldr	r3, [r7, #12]
}
  400b08:	4618      	mov	r0, r3
  400b0a:	3718      	adds	r7, #24
  400b0c:	46bd      	mov	sp, r7
  400b0e:	bd80      	pop	{r7, pc}
  400b10:	00401735 	.word	0x00401735
  400b14:	2000a4e8 	.word	0x2000a4e8
  400b18:	00400b81 	.word	0x00400b81
  400b1c:	2000a4e0 	.word	0x2000a4e0
  400b20:	00400c11 	.word	0x00400c11
  400b24:	20000014 	.word	0x20000014
  400b28:	00401751 	.word	0x00401751

00400b2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  400b2c:	b580      	push	{r7, lr}
  400b2e:	b084      	sub	sp, #16
  400b30:	af00      	add	r7, sp, #0
  400b32:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  400b34:	687b      	ldr	r3, [r7, #4]
  400b36:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  400b38:	687b      	ldr	r3, [r7, #4]
  400b3a:	2b00      	cmp	r3, #0
  400b3c:	d014      	beq.n	400b68 <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  400b3e:	2310      	movs	r3, #16
  400b40:	425b      	negs	r3, r3
  400b42:	68fa      	ldr	r2, [r7, #12]
  400b44:	4413      	add	r3, r2
  400b46:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  400b48:	68fb      	ldr	r3, [r7, #12]
  400b4a:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  400b4c:	4b08      	ldr	r3, [pc, #32]	; (400b70 <vPortFree+0x44>)
  400b4e:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  400b50:	68bb      	ldr	r3, [r7, #8]
  400b52:	685a      	ldr	r2, [r3, #4]
  400b54:	4b07      	ldr	r3, [pc, #28]	; (400b74 <vPortFree+0x48>)
  400b56:	681b      	ldr	r3, [r3, #0]
  400b58:	4413      	add	r3, r2
  400b5a:	4a06      	ldr	r2, [pc, #24]	; (400b74 <vPortFree+0x48>)
  400b5c:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  400b5e:	68b8      	ldr	r0, [r7, #8]
  400b60:	4b05      	ldr	r3, [pc, #20]	; (400b78 <vPortFree+0x4c>)
  400b62:	4798      	blx	r3
		}
		xTaskResumeAll();
  400b64:	4b05      	ldr	r3, [pc, #20]	; (400b7c <vPortFree+0x50>)
  400b66:	4798      	blx	r3
	}
}
  400b68:	bf00      	nop
  400b6a:	3710      	adds	r7, #16
  400b6c:	46bd      	mov	sp, r7
  400b6e:	bd80      	pop	{r7, pc}
  400b70:	00401735 	.word	0x00401735
  400b74:	20000014 	.word	0x20000014
  400b78:	00400c11 	.word	0x00400c11
  400b7c:	00401751 	.word	0x00401751

00400b80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  400b80:	b580      	push	{r7, lr}
  400b82:	b082      	sub	sp, #8
  400b84:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  400b86:	4b1d      	ldr	r3, [pc, #116]	; (400bfc <prvHeapInit+0x7c>)
  400b88:	4a1d      	ldr	r2, [pc, #116]	; (400c00 <prvHeapInit+0x80>)
  400b8a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  400b8c:	4b1b      	ldr	r3, [pc, #108]	; (400bfc <prvHeapInit+0x7c>)
  400b8e:	2200      	movs	r2, #0
  400b90:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  400b92:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  400b96:	4b1a      	ldr	r3, [pc, #104]	; (400c00 <prvHeapInit+0x80>)
  400b98:	4413      	add	r3, r2
  400b9a:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  400b9c:	2310      	movs	r3, #16
  400b9e:	425b      	negs	r3, r3
  400ba0:	687a      	ldr	r2, [r7, #4]
  400ba2:	4413      	add	r3, r2
  400ba4:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  400ba6:	4a17      	ldr	r2, [pc, #92]	; (400c04 <prvHeapInit+0x84>)
  400ba8:	687b      	ldr	r3, [r7, #4]
  400baa:	6013      	str	r3, [r2, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  400bac:	4b15      	ldr	r3, [pc, #84]	; (400c04 <prvHeapInit+0x84>)
  400bae:	681b      	ldr	r3, [r3, #0]
  400bb0:	f003 0307 	and.w	r3, r3, #7
  400bb4:	2b00      	cmp	r3, #0
  400bb6:	d003      	beq.n	400bc0 <prvHeapInit+0x40>
  400bb8:	4b13      	ldr	r3, [pc, #76]	; (400c08 <prvHeapInit+0x88>)
  400bba:	4798      	blx	r3
  400bbc:	bf00      	nop
  400bbe:	e7fd      	b.n	400bbc <prvHeapInit+0x3c>
	pxEnd->xBlockSize = 0;
  400bc0:	4b10      	ldr	r3, [pc, #64]	; (400c04 <prvHeapInit+0x84>)
  400bc2:	681b      	ldr	r3, [r3, #0]
  400bc4:	2200      	movs	r2, #0
  400bc6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  400bc8:	4b0e      	ldr	r3, [pc, #56]	; (400c04 <prvHeapInit+0x84>)
  400bca:	681b      	ldr	r3, [r3, #0]
  400bcc:	2200      	movs	r2, #0
  400bce:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  400bd0:	4b0b      	ldr	r3, [pc, #44]	; (400c00 <prvHeapInit+0x80>)
  400bd2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  400bd4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  400bd8:	2210      	movs	r2, #16
  400bda:	1a9a      	subs	r2, r3, r2
  400bdc:	683b      	ldr	r3, [r7, #0]
  400bde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  400be0:	4b08      	ldr	r3, [pc, #32]	; (400c04 <prvHeapInit+0x84>)
  400be2:	681a      	ldr	r2, [r3, #0]
  400be4:	683b      	ldr	r3, [r7, #0]
  400be6:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  400be8:	4b08      	ldr	r3, [pc, #32]	; (400c0c <prvHeapInit+0x8c>)
  400bea:	681b      	ldr	r3, [r3, #0]
  400bec:	2210      	movs	r2, #16
  400bee:	1a9b      	subs	r3, r3, r2
  400bf0:	4a06      	ldr	r2, [pc, #24]	; (400c0c <prvHeapInit+0x8c>)
  400bf2:	6013      	str	r3, [r2, #0]
}
  400bf4:	bf00      	nop
  400bf6:	3708      	adds	r7, #8
  400bf8:	46bd      	mov	sp, r7
  400bfa:	bd80      	pop	{r7, pc}
  400bfc:	2000a4e0 	.word	0x2000a4e0
  400c00:	200004e0 	.word	0x200004e0
  400c04:	2000a4e8 	.word	0x2000a4e8
  400c08:	00400949 	.word	0x00400949
  400c0c:	20000014 	.word	0x20000014

00400c10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  400c10:	b480      	push	{r7}
  400c12:	b085      	sub	sp, #20
  400c14:	af00      	add	r7, sp, #0
  400c16:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  400c18:	4b28      	ldr	r3, [pc, #160]	; (400cbc <prvInsertBlockIntoFreeList+0xac>)
  400c1a:	60fb      	str	r3, [r7, #12]
  400c1c:	e002      	b.n	400c24 <prvInsertBlockIntoFreeList+0x14>
  400c1e:	68fb      	ldr	r3, [r7, #12]
  400c20:	681b      	ldr	r3, [r3, #0]
  400c22:	60fb      	str	r3, [r7, #12]
  400c24:	68fb      	ldr	r3, [r7, #12]
  400c26:	681a      	ldr	r2, [r3, #0]
  400c28:	687b      	ldr	r3, [r7, #4]
  400c2a:	429a      	cmp	r2, r3
  400c2c:	d3f7      	bcc.n	400c1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  400c2e:	68fb      	ldr	r3, [r7, #12]
  400c30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  400c32:	68fb      	ldr	r3, [r7, #12]
  400c34:	685b      	ldr	r3, [r3, #4]
  400c36:	68ba      	ldr	r2, [r7, #8]
  400c38:	441a      	add	r2, r3
  400c3a:	687b      	ldr	r3, [r7, #4]
  400c3c:	429a      	cmp	r2, r3
  400c3e:	d108      	bne.n	400c52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  400c40:	68fb      	ldr	r3, [r7, #12]
  400c42:	685a      	ldr	r2, [r3, #4]
  400c44:	687b      	ldr	r3, [r7, #4]
  400c46:	685b      	ldr	r3, [r3, #4]
  400c48:	441a      	add	r2, r3
  400c4a:	68fb      	ldr	r3, [r7, #12]
  400c4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  400c4e:	68fb      	ldr	r3, [r7, #12]
  400c50:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  400c52:	687b      	ldr	r3, [r7, #4]
  400c54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  400c56:	687b      	ldr	r3, [r7, #4]
  400c58:	685b      	ldr	r3, [r3, #4]
  400c5a:	68ba      	ldr	r2, [r7, #8]
  400c5c:	441a      	add	r2, r3
  400c5e:	68fb      	ldr	r3, [r7, #12]
  400c60:	681b      	ldr	r3, [r3, #0]
  400c62:	429a      	cmp	r2, r3
  400c64:	d118      	bne.n	400c98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  400c66:	68fb      	ldr	r3, [r7, #12]
  400c68:	681a      	ldr	r2, [r3, #0]
  400c6a:	4b15      	ldr	r3, [pc, #84]	; (400cc0 <prvInsertBlockIntoFreeList+0xb0>)
  400c6c:	681b      	ldr	r3, [r3, #0]
  400c6e:	429a      	cmp	r2, r3
  400c70:	d00d      	beq.n	400c8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  400c72:	687b      	ldr	r3, [r7, #4]
  400c74:	685a      	ldr	r2, [r3, #4]
  400c76:	68fb      	ldr	r3, [r7, #12]
  400c78:	681b      	ldr	r3, [r3, #0]
  400c7a:	685b      	ldr	r3, [r3, #4]
  400c7c:	441a      	add	r2, r3
  400c7e:	687b      	ldr	r3, [r7, #4]
  400c80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  400c82:	68fb      	ldr	r3, [r7, #12]
  400c84:	681b      	ldr	r3, [r3, #0]
  400c86:	681a      	ldr	r2, [r3, #0]
  400c88:	687b      	ldr	r3, [r7, #4]
  400c8a:	601a      	str	r2, [r3, #0]
  400c8c:	e008      	b.n	400ca0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  400c8e:	4b0c      	ldr	r3, [pc, #48]	; (400cc0 <prvInsertBlockIntoFreeList+0xb0>)
  400c90:	681a      	ldr	r2, [r3, #0]
  400c92:	687b      	ldr	r3, [r7, #4]
  400c94:	601a      	str	r2, [r3, #0]
  400c96:	e003      	b.n	400ca0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  400c98:	68fb      	ldr	r3, [r7, #12]
  400c9a:	681a      	ldr	r2, [r3, #0]
  400c9c:	687b      	ldr	r3, [r7, #4]
  400c9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  400ca0:	68fa      	ldr	r2, [r7, #12]
  400ca2:	687b      	ldr	r3, [r7, #4]
  400ca4:	429a      	cmp	r2, r3
  400ca6:	d002      	beq.n	400cae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  400ca8:	68fb      	ldr	r3, [r7, #12]
  400caa:	687a      	ldr	r2, [r7, #4]
  400cac:	601a      	str	r2, [r3, #0]
	}
}
  400cae:	bf00      	nop
  400cb0:	3714      	adds	r7, #20
  400cb2:	46bd      	mov	sp, r7
  400cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cb8:	4770      	bx	lr
  400cba:	bf00      	nop
  400cbc:	2000a4e0 	.word	0x2000a4e0
  400cc0:	2000a4e8 	.word	0x2000a4e8

00400cc4 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  400cc4:	b580      	push	{r7, lr}
  400cc6:	b082      	sub	sp, #8
  400cc8:	af00      	add	r7, sp, #0
  400cca:	6078      	str	r0, [r7, #4]
  400ccc:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  400cce:	687b      	ldr	r3, [r7, #4]
  400cd0:	2b00      	cmp	r3, #0
  400cd2:	d103      	bne.n	400cdc <xQueueGenericReset+0x18>
  400cd4:	4b27      	ldr	r3, [pc, #156]	; (400d74 <xQueueGenericReset+0xb0>)
  400cd6:	4798      	blx	r3
  400cd8:	bf00      	nop
  400cda:	e7fd      	b.n	400cd8 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
  400cdc:	4b26      	ldr	r3, [pc, #152]	; (400d78 <xQueueGenericReset+0xb4>)
  400cde:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400ce0:	687b      	ldr	r3, [r7, #4]
  400ce2:	681a      	ldr	r2, [r3, #0]
  400ce4:	687b      	ldr	r3, [r7, #4]
  400ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400ce8:	6879      	ldr	r1, [r7, #4]
  400cea:	6c09      	ldr	r1, [r1, #64]	; 0x40
  400cec:	fb01 f303 	mul.w	r3, r1, r3
  400cf0:	441a      	add	r2, r3
  400cf2:	687b      	ldr	r3, [r7, #4]
  400cf4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  400cf6:	687b      	ldr	r3, [r7, #4]
  400cf8:	2200      	movs	r2, #0
  400cfa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400cfc:	687b      	ldr	r3, [r7, #4]
  400cfe:	681a      	ldr	r2, [r3, #0]
  400d00:	687b      	ldr	r3, [r7, #4]
  400d02:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  400d04:	687b      	ldr	r3, [r7, #4]
  400d06:	681a      	ldr	r2, [r3, #0]
  400d08:	687b      	ldr	r3, [r7, #4]
  400d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400d0c:	3b01      	subs	r3, #1
  400d0e:	6879      	ldr	r1, [r7, #4]
  400d10:	6c09      	ldr	r1, [r1, #64]	; 0x40
  400d12:	fb01 f303 	mul.w	r3, r1, r3
  400d16:	441a      	add	r2, r3
  400d18:	687b      	ldr	r3, [r7, #4]
  400d1a:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400d1c:	687b      	ldr	r3, [r7, #4]
  400d1e:	f04f 32ff 	mov.w	r2, #4294967295
  400d22:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400d24:	687b      	ldr	r3, [r7, #4]
  400d26:	f04f 32ff 	mov.w	r2, #4294967295
  400d2a:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  400d2c:	683b      	ldr	r3, [r7, #0]
  400d2e:	2b00      	cmp	r3, #0
  400d30:	d10e      	bne.n	400d50 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400d32:	687b      	ldr	r3, [r7, #4]
  400d34:	691b      	ldr	r3, [r3, #16]
  400d36:	2b00      	cmp	r3, #0
  400d38:	d014      	beq.n	400d64 <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400d3a:	687b      	ldr	r3, [r7, #4]
  400d3c:	3310      	adds	r3, #16
  400d3e:	4618      	mov	r0, r3
  400d40:	4b0e      	ldr	r3, [pc, #56]	; (400d7c <xQueueGenericReset+0xb8>)
  400d42:	4798      	blx	r3
  400d44:	4603      	mov	r3, r0
  400d46:	2b01      	cmp	r3, #1
  400d48:	d10c      	bne.n	400d64 <xQueueGenericReset+0xa0>
				{
					portYIELD_WITHIN_API();
  400d4a:	4b0d      	ldr	r3, [pc, #52]	; (400d80 <xQueueGenericReset+0xbc>)
  400d4c:	4798      	blx	r3
  400d4e:	e009      	b.n	400d64 <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400d50:	687b      	ldr	r3, [r7, #4]
  400d52:	3310      	adds	r3, #16
  400d54:	4618      	mov	r0, r3
  400d56:	4b0b      	ldr	r3, [pc, #44]	; (400d84 <xQueueGenericReset+0xc0>)
  400d58:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400d5a:	687b      	ldr	r3, [r7, #4]
  400d5c:	3324      	adds	r3, #36	; 0x24
  400d5e:	4618      	mov	r0, r3
  400d60:	4b08      	ldr	r3, [pc, #32]	; (400d84 <xQueueGenericReset+0xc0>)
  400d62:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  400d64:	4b08      	ldr	r3, [pc, #32]	; (400d88 <xQueueGenericReset+0xc4>)
  400d66:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  400d68:	2301      	movs	r3, #1
}
  400d6a:	4618      	mov	r0, r3
  400d6c:	3708      	adds	r7, #8
  400d6e:	46bd      	mov	sp, r7
  400d70:	bd80      	pop	{r7, pc}
  400d72:	bf00      	nop
  400d74:	00400949 	.word	0x00400949
  400d78:	00400901 	.word	0x00400901
  400d7c:	00401b75 	.word	0x00401b75
  400d80:	004008e5 	.word	0x004008e5
  400d84:	004005d9 	.word	0x004005d9
  400d88:	00400921 	.word	0x00400921

00400d8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  400d8c:	b580      	push	{r7, lr}
  400d8e:	b088      	sub	sp, #32
  400d90:	af00      	add	r7, sp, #0
  400d92:	60f8      	str	r0, [r7, #12]
  400d94:	60b9      	str	r1, [r7, #8]
  400d96:	4613      	mov	r3, r2
  400d98:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  400d9a:	2300      	movs	r3, #0
  400d9c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  400d9e:	68fb      	ldr	r3, [r7, #12]
  400da0:	2b00      	cmp	r3, #0
  400da2:	d02a      	beq.n	400dfa <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  400da4:	2050      	movs	r0, #80	; 0x50
  400da6:	4b1b      	ldr	r3, [pc, #108]	; (400e14 <xQueueGenericCreate+0x88>)
  400da8:	4798      	blx	r3
  400daa:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  400dac:	69bb      	ldr	r3, [r7, #24]
  400dae:	2b00      	cmp	r3, #0
  400db0:	d023      	beq.n	400dfa <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  400db2:	68fb      	ldr	r3, [r7, #12]
  400db4:	68ba      	ldr	r2, [r7, #8]
  400db6:	fb02 f303 	mul.w	r3, r2, r3
  400dba:	3301      	adds	r3, #1
  400dbc:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  400dbe:	6978      	ldr	r0, [r7, #20]
  400dc0:	4b14      	ldr	r3, [pc, #80]	; (400e14 <xQueueGenericCreate+0x88>)
  400dc2:	4798      	blx	r3
  400dc4:	4602      	mov	r2, r0
  400dc6:	69bb      	ldr	r3, [r7, #24]
  400dc8:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  400dca:	69bb      	ldr	r3, [r7, #24]
  400dcc:	681b      	ldr	r3, [r3, #0]
  400dce:	2b00      	cmp	r3, #0
  400dd0:	d010      	beq.n	400df4 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  400dd2:	69bb      	ldr	r3, [r7, #24]
  400dd4:	68fa      	ldr	r2, [r7, #12]
  400dd6:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  400dd8:	69bb      	ldr	r3, [r7, #24]
  400dda:	68ba      	ldr	r2, [r7, #8]
  400ddc:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  400dde:	2101      	movs	r1, #1
  400de0:	69b8      	ldr	r0, [r7, #24]
  400de2:	4b0d      	ldr	r3, [pc, #52]	; (400e18 <xQueueGenericCreate+0x8c>)
  400de4:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  400de6:	69bb      	ldr	r3, [r7, #24]
  400de8:	79fa      	ldrb	r2, [r7, #7]
  400dea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  400dee:	69bb      	ldr	r3, [r7, #24]
  400df0:	61fb      	str	r3, [r7, #28]
  400df2:	e002      	b.n	400dfa <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  400df4:	69b8      	ldr	r0, [r7, #24]
  400df6:	4b09      	ldr	r3, [pc, #36]	; (400e1c <xQueueGenericCreate+0x90>)
  400df8:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  400dfa:	69fb      	ldr	r3, [r7, #28]
  400dfc:	2b00      	cmp	r3, #0
  400dfe:	d103      	bne.n	400e08 <xQueueGenericCreate+0x7c>
  400e00:	4b07      	ldr	r3, [pc, #28]	; (400e20 <xQueueGenericCreate+0x94>)
  400e02:	4798      	blx	r3
  400e04:	bf00      	nop
  400e06:	e7fd      	b.n	400e04 <xQueueGenericCreate+0x78>

	return xReturn;
  400e08:	69fb      	ldr	r3, [r7, #28]
}
  400e0a:	4618      	mov	r0, r3
  400e0c:	3720      	adds	r7, #32
  400e0e:	46bd      	mov	sp, r7
  400e10:	bd80      	pop	{r7, pc}
  400e12:	bf00      	nop
  400e14:	00400a31 	.word	0x00400a31
  400e18:	00400cc5 	.word	0x00400cc5
  400e1c:	00400b2d 	.word	0x00400b2d
  400e20:	00400949 	.word	0x00400949

00400e24 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  400e24:	b580      	push	{r7, lr}
  400e26:	b088      	sub	sp, #32
  400e28:	af00      	add	r7, sp, #0
  400e2a:	60f8      	str	r0, [r7, #12]
  400e2c:	60b9      	str	r1, [r7, #8]
  400e2e:	607a      	str	r2, [r7, #4]
  400e30:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  400e32:	2300      	movs	r3, #0
  400e34:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  400e36:	68fb      	ldr	r3, [r7, #12]
  400e38:	2b00      	cmp	r3, #0
  400e3a:	d103      	bne.n	400e44 <xQueueGenericSend+0x20>
  400e3c:	4b46      	ldr	r3, [pc, #280]	; (400f58 <xQueueGenericSend+0x134>)
  400e3e:	4798      	blx	r3
  400e40:	bf00      	nop
  400e42:	e7fd      	b.n	400e40 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400e44:	68bb      	ldr	r3, [r7, #8]
  400e46:	2b00      	cmp	r3, #0
  400e48:	d103      	bne.n	400e52 <xQueueGenericSend+0x2e>
  400e4a:	68fb      	ldr	r3, [r7, #12]
  400e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400e4e:	2b00      	cmp	r3, #0
  400e50:	d101      	bne.n	400e56 <xQueueGenericSend+0x32>
  400e52:	2301      	movs	r3, #1
  400e54:	e000      	b.n	400e58 <xQueueGenericSend+0x34>
  400e56:	2300      	movs	r3, #0
  400e58:	2b00      	cmp	r3, #0
  400e5a:	d103      	bne.n	400e64 <xQueueGenericSend+0x40>
  400e5c:	4b3e      	ldr	r3, [pc, #248]	; (400f58 <xQueueGenericSend+0x134>)
  400e5e:	4798      	blx	r3
  400e60:	bf00      	nop
  400e62:	e7fd      	b.n	400e60 <xQueueGenericSend+0x3c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400e64:	4b3d      	ldr	r3, [pc, #244]	; (400f5c <xQueueGenericSend+0x138>)
  400e66:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400e68:	68fb      	ldr	r3, [r7, #12]
  400e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400e6c:	68fb      	ldr	r3, [r7, #12]
  400e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400e70:	429a      	cmp	r2, r3
  400e72:	d216      	bcs.n	400ea2 <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400e74:	683a      	ldr	r2, [r7, #0]
  400e76:	68b9      	ldr	r1, [r7, #8]
  400e78:	68f8      	ldr	r0, [r7, #12]
  400e7a:	4b39      	ldr	r3, [pc, #228]	; (400f60 <xQueueGenericSend+0x13c>)
  400e7c:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400e7e:	68fb      	ldr	r3, [r7, #12]
  400e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400e82:	2b00      	cmp	r3, #0
  400e84:	d009      	beq.n	400e9a <xQueueGenericSend+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400e86:	68fb      	ldr	r3, [r7, #12]
  400e88:	3324      	adds	r3, #36	; 0x24
  400e8a:	4618      	mov	r0, r3
  400e8c:	4b35      	ldr	r3, [pc, #212]	; (400f64 <xQueueGenericSend+0x140>)
  400e8e:	4798      	blx	r3
  400e90:	4603      	mov	r3, r0
  400e92:	2b01      	cmp	r3, #1
  400e94:	d101      	bne.n	400e9a <xQueueGenericSend+0x76>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  400e96:	4b34      	ldr	r3, [pc, #208]	; (400f68 <xQueueGenericSend+0x144>)
  400e98:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  400e9a:	4b34      	ldr	r3, [pc, #208]	; (400f6c <xQueueGenericSend+0x148>)
  400e9c:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  400e9e:	2301      	movs	r3, #1
  400ea0:	e056      	b.n	400f50 <xQueueGenericSend+0x12c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  400ea2:	687b      	ldr	r3, [r7, #4]
  400ea4:	2b00      	cmp	r3, #0
  400ea6:	d103      	bne.n	400eb0 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400ea8:	4b30      	ldr	r3, [pc, #192]	; (400f6c <xQueueGenericSend+0x148>)
  400eaa:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  400eac:	2300      	movs	r3, #0
  400eae:	e04f      	b.n	400f50 <xQueueGenericSend+0x12c>
				}
				else if( xEntryTimeSet == pdFALSE )
  400eb0:	69fb      	ldr	r3, [r7, #28]
  400eb2:	2b00      	cmp	r3, #0
  400eb4:	d106      	bne.n	400ec4 <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400eb6:	f107 0314 	add.w	r3, r7, #20
  400eba:	4618      	mov	r0, r3
  400ebc:	4b2c      	ldr	r3, [pc, #176]	; (400f70 <xQueueGenericSend+0x14c>)
  400ebe:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400ec0:	2301      	movs	r3, #1
  400ec2:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  400ec4:	4b29      	ldr	r3, [pc, #164]	; (400f6c <xQueueGenericSend+0x148>)
  400ec6:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400ec8:	4b2a      	ldr	r3, [pc, #168]	; (400f74 <xQueueGenericSend+0x150>)
  400eca:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400ecc:	4b23      	ldr	r3, [pc, #140]	; (400f5c <xQueueGenericSend+0x138>)
  400ece:	4798      	blx	r3
  400ed0:	68fb      	ldr	r3, [r7, #12]
  400ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ed8:	d102      	bne.n	400ee0 <xQueueGenericSend+0xbc>
  400eda:	68fb      	ldr	r3, [r7, #12]
  400edc:	2200      	movs	r2, #0
  400ede:	645a      	str	r2, [r3, #68]	; 0x44
  400ee0:	68fb      	ldr	r3, [r7, #12]
  400ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ee8:	d102      	bne.n	400ef0 <xQueueGenericSend+0xcc>
  400eea:	68fb      	ldr	r3, [r7, #12]
  400eec:	2200      	movs	r2, #0
  400eee:	649a      	str	r2, [r3, #72]	; 0x48
  400ef0:	4b1e      	ldr	r3, [pc, #120]	; (400f6c <xQueueGenericSend+0x148>)
  400ef2:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400ef4:	1d3a      	adds	r2, r7, #4
  400ef6:	f107 0314 	add.w	r3, r7, #20
  400efa:	4611      	mov	r1, r2
  400efc:	4618      	mov	r0, r3
  400efe:	4b1e      	ldr	r3, [pc, #120]	; (400f78 <xQueueGenericSend+0x154>)
  400f00:	4798      	blx	r3
  400f02:	4603      	mov	r3, r0
  400f04:	2b00      	cmp	r3, #0
  400f06:	d11d      	bne.n	400f44 <xQueueGenericSend+0x120>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400f08:	68f8      	ldr	r0, [r7, #12]
  400f0a:	4b1c      	ldr	r3, [pc, #112]	; (400f7c <xQueueGenericSend+0x158>)
  400f0c:	4798      	blx	r3
  400f0e:	4603      	mov	r3, r0
  400f10:	2b00      	cmp	r3, #0
  400f12:	d011      	beq.n	400f38 <xQueueGenericSend+0x114>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400f14:	68fb      	ldr	r3, [r7, #12]
  400f16:	3310      	adds	r3, #16
  400f18:	687a      	ldr	r2, [r7, #4]
  400f1a:	4611      	mov	r1, r2
  400f1c:	4618      	mov	r0, r3
  400f1e:	4b18      	ldr	r3, [pc, #96]	; (400f80 <xQueueGenericSend+0x15c>)
  400f20:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  400f22:	68f8      	ldr	r0, [r7, #12]
  400f24:	4b17      	ldr	r3, [pc, #92]	; (400f84 <xQueueGenericSend+0x160>)
  400f26:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  400f28:	4b17      	ldr	r3, [pc, #92]	; (400f88 <xQueueGenericSend+0x164>)
  400f2a:	4798      	blx	r3
  400f2c:	4603      	mov	r3, r0
  400f2e:	2b00      	cmp	r3, #0
  400f30:	d198      	bne.n	400e64 <xQueueGenericSend+0x40>
				{
					portYIELD_WITHIN_API();
  400f32:	4b0d      	ldr	r3, [pc, #52]	; (400f68 <xQueueGenericSend+0x144>)
  400f34:	4798      	blx	r3
  400f36:	e795      	b.n	400e64 <xQueueGenericSend+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400f38:	68f8      	ldr	r0, [r7, #12]
  400f3a:	4b12      	ldr	r3, [pc, #72]	; (400f84 <xQueueGenericSend+0x160>)
  400f3c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400f3e:	4b12      	ldr	r3, [pc, #72]	; (400f88 <xQueueGenericSend+0x164>)
  400f40:	4798      	blx	r3
  400f42:	e78f      	b.n	400e64 <xQueueGenericSend+0x40>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  400f44:	68f8      	ldr	r0, [r7, #12]
  400f46:	4b0f      	ldr	r3, [pc, #60]	; (400f84 <xQueueGenericSend+0x160>)
  400f48:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400f4a:	4b0f      	ldr	r3, [pc, #60]	; (400f88 <xQueueGenericSend+0x164>)
  400f4c:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  400f4e:	2300      	movs	r3, #0
		}
	}
}
  400f50:	4618      	mov	r0, r3
  400f52:	3720      	adds	r7, #32
  400f54:	46bd      	mov	sp, r7
  400f56:	bd80      	pop	{r7, pc}
  400f58:	00400949 	.word	0x00400949
  400f5c:	00400901 	.word	0x00400901
  400f60:	0040121d 	.word	0x0040121d
  400f64:	00401b75 	.word	0x00401b75
  400f68:	004008e5 	.word	0x004008e5
  400f6c:	00400921 	.word	0x00400921
  400f70:	00401c31 	.word	0x00401c31
  400f74:	00401735 	.word	0x00401735
  400f78:	00401c6d 	.word	0x00401c6d
  400f7c:	00401409 	.word	0x00401409
  400f80:	00401a8d 	.word	0x00401a8d
  400f84:	0040132d 	.word	0x0040132d
  400f88:	00401751 	.word	0x00401751

00400f8c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  400f8c:	b580      	push	{r7, lr}
  400f8e:	b086      	sub	sp, #24
  400f90:	af00      	add	r7, sp, #0
  400f92:	60f8      	str	r0, [r7, #12]
  400f94:	60b9      	str	r1, [r7, #8]
  400f96:	607a      	str	r2, [r7, #4]
  400f98:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  400f9a:	68fb      	ldr	r3, [r7, #12]
  400f9c:	2b00      	cmp	r3, #0
  400f9e:	d103      	bne.n	400fa8 <xQueueGenericSendFromISR+0x1c>
  400fa0:	4b25      	ldr	r3, [pc, #148]	; (401038 <xQueueGenericSendFromISR+0xac>)
  400fa2:	4798      	blx	r3
  400fa4:	bf00      	nop
  400fa6:	e7fd      	b.n	400fa4 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400fa8:	68bb      	ldr	r3, [r7, #8]
  400faa:	2b00      	cmp	r3, #0
  400fac:	d103      	bne.n	400fb6 <xQueueGenericSendFromISR+0x2a>
  400fae:	68fb      	ldr	r3, [r7, #12]
  400fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400fb2:	2b00      	cmp	r3, #0
  400fb4:	d101      	bne.n	400fba <xQueueGenericSendFromISR+0x2e>
  400fb6:	2301      	movs	r3, #1
  400fb8:	e000      	b.n	400fbc <xQueueGenericSendFromISR+0x30>
  400fba:	2300      	movs	r3, #0
  400fbc:	2b00      	cmp	r3, #0
  400fbe:	d103      	bne.n	400fc8 <xQueueGenericSendFromISR+0x3c>
  400fc0:	4b1d      	ldr	r3, [pc, #116]	; (401038 <xQueueGenericSendFromISR+0xac>)
  400fc2:	4798      	blx	r3
  400fc4:	bf00      	nop
  400fc6:	e7fd      	b.n	400fc4 <xQueueGenericSendFromISR+0x38>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  400fc8:	4b1b      	ldr	r3, [pc, #108]	; (401038 <xQueueGenericSendFromISR+0xac>)
  400fca:	4798      	blx	r3
  400fcc:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400fce:	68fb      	ldr	r3, [r7, #12]
  400fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400fd2:	68fb      	ldr	r3, [r7, #12]
  400fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400fd6:	429a      	cmp	r2, r3
  400fd8:	d224      	bcs.n	401024 <xQueueGenericSendFromISR+0x98>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400fda:	683a      	ldr	r2, [r7, #0]
  400fdc:	68b9      	ldr	r1, [r7, #8]
  400fde:	68f8      	ldr	r0, [r7, #12]
  400fe0:	4b16      	ldr	r3, [pc, #88]	; (40103c <xQueueGenericSendFromISR+0xb0>)
  400fe2:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  400fe4:	68fb      	ldr	r3, [r7, #12]
  400fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fec:	d112      	bne.n	401014 <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400fee:	68fb      	ldr	r3, [r7, #12]
  400ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400ff2:	2b00      	cmp	r3, #0
  400ff4:	d013      	beq.n	40101e <xQueueGenericSendFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ff6:	68fb      	ldr	r3, [r7, #12]
  400ff8:	3324      	adds	r3, #36	; 0x24
  400ffa:	4618      	mov	r0, r3
  400ffc:	4b10      	ldr	r3, [pc, #64]	; (401040 <xQueueGenericSendFromISR+0xb4>)
  400ffe:	4798      	blx	r3
  401000:	4603      	mov	r3, r0
  401002:	2b00      	cmp	r3, #0
  401004:	d00b      	beq.n	40101e <xQueueGenericSendFromISR+0x92>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  401006:	687b      	ldr	r3, [r7, #4]
  401008:	2b00      	cmp	r3, #0
  40100a:	d008      	beq.n	40101e <xQueueGenericSendFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  40100c:	687b      	ldr	r3, [r7, #4]
  40100e:	2201      	movs	r2, #1
  401010:	601a      	str	r2, [r3, #0]
  401012:	e004      	b.n	40101e <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  401014:	68fb      	ldr	r3, [r7, #12]
  401016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401018:	1c5a      	adds	r2, r3, #1
  40101a:	68fb      	ldr	r3, [r7, #12]
  40101c:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  40101e:	2301      	movs	r3, #1
  401020:	617b      	str	r3, [r7, #20]
  401022:	e001      	b.n	401028 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  401024:	2300      	movs	r3, #0
  401026:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  401028:	6938      	ldr	r0, [r7, #16]
  40102a:	4b06      	ldr	r3, [pc, #24]	; (401044 <xQueueGenericSendFromISR+0xb8>)
  40102c:	4798      	blx	r3

	return xReturn;
  40102e:	697b      	ldr	r3, [r7, #20]
}
  401030:	4618      	mov	r0, r3
  401032:	3718      	adds	r7, #24
  401034:	46bd      	mov	sp, r7
  401036:	bd80      	pop	{r7, pc}
  401038:	00400949 	.word	0x00400949
  40103c:	0040121d 	.word	0x0040121d
  401040:	00401b75 	.word	0x00401b75
  401044:	0040095b 	.word	0x0040095b

00401048 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  401048:	b580      	push	{r7, lr}
  40104a:	b088      	sub	sp, #32
  40104c:	af00      	add	r7, sp, #0
  40104e:	60f8      	str	r0, [r7, #12]
  401050:	60b9      	str	r1, [r7, #8]
  401052:	607a      	str	r2, [r7, #4]
  401054:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  401056:	2300      	movs	r3, #0
  401058:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  40105a:	68fb      	ldr	r3, [r7, #12]
  40105c:	2b00      	cmp	r3, #0
  40105e:	d103      	bne.n	401068 <xQueueGenericReceive+0x20>
  401060:	4b5f      	ldr	r3, [pc, #380]	; (4011e0 <xQueueGenericReceive+0x198>)
  401062:	4798      	blx	r3
  401064:	bf00      	nop
  401066:	e7fd      	b.n	401064 <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  401068:	68bb      	ldr	r3, [r7, #8]
  40106a:	2b00      	cmp	r3, #0
  40106c:	d103      	bne.n	401076 <xQueueGenericReceive+0x2e>
  40106e:	68fb      	ldr	r3, [r7, #12]
  401070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401072:	2b00      	cmp	r3, #0
  401074:	d101      	bne.n	40107a <xQueueGenericReceive+0x32>
  401076:	2301      	movs	r3, #1
  401078:	e000      	b.n	40107c <xQueueGenericReceive+0x34>
  40107a:	2300      	movs	r3, #0
  40107c:	2b00      	cmp	r3, #0
  40107e:	d103      	bne.n	401088 <xQueueGenericReceive+0x40>
  401080:	4b57      	ldr	r3, [pc, #348]	; (4011e0 <xQueueGenericReceive+0x198>)
  401082:	4798      	blx	r3
  401084:	bf00      	nop
  401086:	e7fd      	b.n	401084 <xQueueGenericReceive+0x3c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401088:	4b56      	ldr	r3, [pc, #344]	; (4011e4 <xQueueGenericReceive+0x19c>)
  40108a:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  40108c:	68fb      	ldr	r3, [r7, #12]
  40108e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401090:	2b00      	cmp	r3, #0
  401092:	d03b      	beq.n	40110c <xQueueGenericReceive+0xc4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  401094:	68fb      	ldr	r3, [r7, #12]
  401096:	68db      	ldr	r3, [r3, #12]
  401098:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  40109a:	68b9      	ldr	r1, [r7, #8]
  40109c:	68f8      	ldr	r0, [r7, #12]
  40109e:	4b52      	ldr	r3, [pc, #328]	; (4011e8 <xQueueGenericReceive+0x1a0>)
  4010a0:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  4010a2:	683b      	ldr	r3, [r7, #0]
  4010a4:	2b00      	cmp	r3, #0
  4010a6:	d11c      	bne.n	4010e2 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  4010a8:	68fb      	ldr	r3, [r7, #12]
  4010aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4010ac:	1e5a      	subs	r2, r3, #1
  4010ae:	68fb      	ldr	r3, [r7, #12]
  4010b0:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4010b2:	68fb      	ldr	r3, [r7, #12]
  4010b4:	681b      	ldr	r3, [r3, #0]
  4010b6:	2b00      	cmp	r3, #0
  4010b8:	d104      	bne.n	4010c4 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  4010ba:	4b4c      	ldr	r3, [pc, #304]	; (4011ec <xQueueGenericReceive+0x1a4>)
  4010bc:	4798      	blx	r3
  4010be:	4602      	mov	r2, r0
  4010c0:	68fb      	ldr	r3, [r7, #12]
  4010c2:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4010c4:	68fb      	ldr	r3, [r7, #12]
  4010c6:	691b      	ldr	r3, [r3, #16]
  4010c8:	2b00      	cmp	r3, #0
  4010ca:	d01b      	beq.n	401104 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4010cc:	68fb      	ldr	r3, [r7, #12]
  4010ce:	3310      	adds	r3, #16
  4010d0:	4618      	mov	r0, r3
  4010d2:	4b47      	ldr	r3, [pc, #284]	; (4011f0 <xQueueGenericReceive+0x1a8>)
  4010d4:	4798      	blx	r3
  4010d6:	4603      	mov	r3, r0
  4010d8:	2b01      	cmp	r3, #1
  4010da:	d113      	bne.n	401104 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
  4010dc:	4b45      	ldr	r3, [pc, #276]	; (4011f4 <xQueueGenericReceive+0x1ac>)
  4010de:	4798      	blx	r3
  4010e0:	e010      	b.n	401104 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  4010e2:	68fb      	ldr	r3, [r7, #12]
  4010e4:	69ba      	ldr	r2, [r7, #24]
  4010e6:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4010e8:	68fb      	ldr	r3, [r7, #12]
  4010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4010ec:	2b00      	cmp	r3, #0
  4010ee:	d009      	beq.n	401104 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4010f0:	68fb      	ldr	r3, [r7, #12]
  4010f2:	3324      	adds	r3, #36	; 0x24
  4010f4:	4618      	mov	r0, r3
  4010f6:	4b3e      	ldr	r3, [pc, #248]	; (4011f0 <xQueueGenericReceive+0x1a8>)
  4010f8:	4798      	blx	r3
  4010fa:	4603      	mov	r3, r0
  4010fc:	2b00      	cmp	r3, #0
  4010fe:	d001      	beq.n	401104 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  401100:	4b3c      	ldr	r3, [pc, #240]	; (4011f4 <xQueueGenericReceive+0x1ac>)
  401102:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  401104:	4b3c      	ldr	r3, [pc, #240]	; (4011f8 <xQueueGenericReceive+0x1b0>)
  401106:	4798      	blx	r3
				return pdPASS;
  401108:	2301      	movs	r3, #1
  40110a:	e064      	b.n	4011d6 <xQueueGenericReceive+0x18e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  40110c:	687b      	ldr	r3, [r7, #4]
  40110e:	2b00      	cmp	r3, #0
  401110:	d103      	bne.n	40111a <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401112:	4b39      	ldr	r3, [pc, #228]	; (4011f8 <xQueueGenericReceive+0x1b0>)
  401114:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  401116:	2300      	movs	r3, #0
  401118:	e05d      	b.n	4011d6 <xQueueGenericReceive+0x18e>
				}
				else if( xEntryTimeSet == pdFALSE )
  40111a:	69fb      	ldr	r3, [r7, #28]
  40111c:	2b00      	cmp	r3, #0
  40111e:	d106      	bne.n	40112e <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401120:	f107 0310 	add.w	r3, r7, #16
  401124:	4618      	mov	r0, r3
  401126:	4b35      	ldr	r3, [pc, #212]	; (4011fc <xQueueGenericReceive+0x1b4>)
  401128:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  40112a:	2301      	movs	r3, #1
  40112c:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  40112e:	4b32      	ldr	r3, [pc, #200]	; (4011f8 <xQueueGenericReceive+0x1b0>)
  401130:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401132:	4b33      	ldr	r3, [pc, #204]	; (401200 <xQueueGenericReceive+0x1b8>)
  401134:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401136:	4b2b      	ldr	r3, [pc, #172]	; (4011e4 <xQueueGenericReceive+0x19c>)
  401138:	4798      	blx	r3
  40113a:	68fb      	ldr	r3, [r7, #12]
  40113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40113e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401142:	d102      	bne.n	40114a <xQueueGenericReceive+0x102>
  401144:	68fb      	ldr	r3, [r7, #12]
  401146:	2200      	movs	r2, #0
  401148:	645a      	str	r2, [r3, #68]	; 0x44
  40114a:	68fb      	ldr	r3, [r7, #12]
  40114c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40114e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401152:	d102      	bne.n	40115a <xQueueGenericReceive+0x112>
  401154:	68fb      	ldr	r3, [r7, #12]
  401156:	2200      	movs	r2, #0
  401158:	649a      	str	r2, [r3, #72]	; 0x48
  40115a:	4b27      	ldr	r3, [pc, #156]	; (4011f8 <xQueueGenericReceive+0x1b0>)
  40115c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40115e:	1d3a      	adds	r2, r7, #4
  401160:	f107 0310 	add.w	r3, r7, #16
  401164:	4611      	mov	r1, r2
  401166:	4618      	mov	r0, r3
  401168:	4b26      	ldr	r3, [pc, #152]	; (401204 <xQueueGenericReceive+0x1bc>)
  40116a:	4798      	blx	r3
  40116c:	4603      	mov	r3, r0
  40116e:	2b00      	cmp	r3, #0
  401170:	d12b      	bne.n	4011ca <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401172:	68f8      	ldr	r0, [r7, #12]
  401174:	4b24      	ldr	r3, [pc, #144]	; (401208 <xQueueGenericReceive+0x1c0>)
  401176:	4798      	blx	r3
  401178:	4603      	mov	r3, r0
  40117a:	2b00      	cmp	r3, #0
  40117c:	d01f      	beq.n	4011be <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40117e:	68fb      	ldr	r3, [r7, #12]
  401180:	681b      	ldr	r3, [r3, #0]
  401182:	2b00      	cmp	r3, #0
  401184:	d108      	bne.n	401198 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
  401186:	4b17      	ldr	r3, [pc, #92]	; (4011e4 <xQueueGenericReceive+0x19c>)
  401188:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  40118a:	68fb      	ldr	r3, [r7, #12]
  40118c:	685b      	ldr	r3, [r3, #4]
  40118e:	4618      	mov	r0, r3
  401190:	4b1e      	ldr	r3, [pc, #120]	; (40120c <xQueueGenericReceive+0x1c4>)
  401192:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  401194:	4b18      	ldr	r3, [pc, #96]	; (4011f8 <xQueueGenericReceive+0x1b0>)
  401196:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401198:	68fb      	ldr	r3, [r7, #12]
  40119a:	3324      	adds	r3, #36	; 0x24
  40119c:	687a      	ldr	r2, [r7, #4]
  40119e:	4611      	mov	r1, r2
  4011a0:	4618      	mov	r0, r3
  4011a2:	4b1b      	ldr	r3, [pc, #108]	; (401210 <xQueueGenericReceive+0x1c8>)
  4011a4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4011a6:	68f8      	ldr	r0, [r7, #12]
  4011a8:	4b1a      	ldr	r3, [pc, #104]	; (401214 <xQueueGenericReceive+0x1cc>)
  4011aa:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4011ac:	4b1a      	ldr	r3, [pc, #104]	; (401218 <xQueueGenericReceive+0x1d0>)
  4011ae:	4798      	blx	r3
  4011b0:	4603      	mov	r3, r0
  4011b2:	2b00      	cmp	r3, #0
  4011b4:	f47f af68 	bne.w	401088 <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
  4011b8:	4b0e      	ldr	r3, [pc, #56]	; (4011f4 <xQueueGenericReceive+0x1ac>)
  4011ba:	4798      	blx	r3
  4011bc:	e764      	b.n	401088 <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  4011be:	68f8      	ldr	r0, [r7, #12]
  4011c0:	4b14      	ldr	r3, [pc, #80]	; (401214 <xQueueGenericReceive+0x1cc>)
  4011c2:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4011c4:	4b14      	ldr	r3, [pc, #80]	; (401218 <xQueueGenericReceive+0x1d0>)
  4011c6:	4798      	blx	r3
  4011c8:	e75e      	b.n	401088 <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  4011ca:	68f8      	ldr	r0, [r7, #12]
  4011cc:	4b11      	ldr	r3, [pc, #68]	; (401214 <xQueueGenericReceive+0x1cc>)
  4011ce:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4011d0:	4b11      	ldr	r3, [pc, #68]	; (401218 <xQueueGenericReceive+0x1d0>)
  4011d2:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  4011d4:	2300      	movs	r3, #0
		}
	}
}
  4011d6:	4618      	mov	r0, r3
  4011d8:	3720      	adds	r7, #32
  4011da:	46bd      	mov	sp, r7
  4011dc:	bd80      	pop	{r7, pc}
  4011de:	bf00      	nop
  4011e0:	00400949 	.word	0x00400949
  4011e4:	00400901 	.word	0x00400901
  4011e8:	004012dd 	.word	0x004012dd
  4011ec:	00401fed 	.word	0x00401fed
  4011f0:	00401b75 	.word	0x00401b75
  4011f4:	004008e5 	.word	0x004008e5
  4011f8:	00400921 	.word	0x00400921
  4011fc:	00401c31 	.word	0x00401c31
  401200:	00401735 	.word	0x00401735
  401204:	00401c6d 	.word	0x00401c6d
  401208:	004013d5 	.word	0x004013d5
  40120c:	00402049 	.word	0x00402049
  401210:	00401a8d 	.word	0x00401a8d
  401214:	0040132d 	.word	0x0040132d
  401218:	00401751 	.word	0x00401751

0040121c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  40121c:	b580      	push	{r7, lr}
  40121e:	b084      	sub	sp, #16
  401220:	af00      	add	r7, sp, #0
  401222:	60f8      	str	r0, [r7, #12]
  401224:	60b9      	str	r1, [r7, #8]
  401226:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  401228:	68fb      	ldr	r3, [r7, #12]
  40122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40122c:	2b00      	cmp	r3, #0
  40122e:	d10c      	bne.n	40124a <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401230:	68fb      	ldr	r3, [r7, #12]
  401232:	681b      	ldr	r3, [r3, #0]
  401234:	2b00      	cmp	r3, #0
  401236:	d143      	bne.n	4012c0 <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401238:	68fb      	ldr	r3, [r7, #12]
  40123a:	685b      	ldr	r3, [r3, #4]
  40123c:	4618      	mov	r0, r3
  40123e:	4b25      	ldr	r3, [pc, #148]	; (4012d4 <prvCopyDataToQueue+0xb8>)
  401240:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401242:	68fb      	ldr	r3, [r7, #12]
  401244:	2200      	movs	r2, #0
  401246:	605a      	str	r2, [r3, #4]
  401248:	e03a      	b.n	4012c0 <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  40124a:	687b      	ldr	r3, [r7, #4]
  40124c:	2b00      	cmp	r3, #0
  40124e:	d119      	bne.n	401284 <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  401250:	68fb      	ldr	r3, [r7, #12]
  401252:	6898      	ldr	r0, [r3, #8]
  401254:	68fb      	ldr	r3, [r7, #12]
  401256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401258:	461a      	mov	r2, r3
  40125a:	68b9      	ldr	r1, [r7, #8]
  40125c:	4b1e      	ldr	r3, [pc, #120]	; (4012d8 <prvCopyDataToQueue+0xbc>)
  40125e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401260:	68fb      	ldr	r3, [r7, #12]
  401262:	689a      	ldr	r2, [r3, #8]
  401264:	68fb      	ldr	r3, [r7, #12]
  401266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401268:	441a      	add	r2, r3
  40126a:	68fb      	ldr	r3, [r7, #12]
  40126c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  40126e:	68fb      	ldr	r3, [r7, #12]
  401270:	689a      	ldr	r2, [r3, #8]
  401272:	68fb      	ldr	r3, [r7, #12]
  401274:	685b      	ldr	r3, [r3, #4]
  401276:	429a      	cmp	r2, r3
  401278:	d322      	bcc.n	4012c0 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40127a:	68fb      	ldr	r3, [r7, #12]
  40127c:	681a      	ldr	r2, [r3, #0]
  40127e:	68fb      	ldr	r3, [r7, #12]
  401280:	609a      	str	r2, [r3, #8]
  401282:	e01d      	b.n	4012c0 <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  401284:	68fb      	ldr	r3, [r7, #12]
  401286:	68d8      	ldr	r0, [r3, #12]
  401288:	68fb      	ldr	r3, [r7, #12]
  40128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40128c:	461a      	mov	r2, r3
  40128e:	68b9      	ldr	r1, [r7, #8]
  401290:	4b11      	ldr	r3, [pc, #68]	; (4012d8 <prvCopyDataToQueue+0xbc>)
  401292:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  401294:	68fb      	ldr	r3, [r7, #12]
  401296:	68da      	ldr	r2, [r3, #12]
  401298:	68fb      	ldr	r3, [r7, #12]
  40129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  40129c:	425b      	negs	r3, r3
  40129e:	441a      	add	r2, r3
  4012a0:	68fb      	ldr	r3, [r7, #12]
  4012a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  4012a4:	68fb      	ldr	r3, [r7, #12]
  4012a6:	68da      	ldr	r2, [r3, #12]
  4012a8:	68fb      	ldr	r3, [r7, #12]
  4012aa:	681b      	ldr	r3, [r3, #0]
  4012ac:	429a      	cmp	r2, r3
  4012ae:	d207      	bcs.n	4012c0 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4012b0:	68fb      	ldr	r3, [r7, #12]
  4012b2:	685a      	ldr	r2, [r3, #4]
  4012b4:	68fb      	ldr	r3, [r7, #12]
  4012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4012b8:	425b      	negs	r3, r3
  4012ba:	441a      	add	r2, r3
  4012bc:	68fb      	ldr	r3, [r7, #12]
  4012be:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4012c0:	68fb      	ldr	r3, [r7, #12]
  4012c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4012c4:	1c5a      	adds	r2, r3, #1
  4012c6:	68fb      	ldr	r3, [r7, #12]
  4012c8:	639a      	str	r2, [r3, #56]	; 0x38
}
  4012ca:	bf00      	nop
  4012cc:	3710      	adds	r7, #16
  4012ce:	46bd      	mov	sp, r7
  4012d0:	bd80      	pop	{r7, pc}
  4012d2:	bf00      	nop
  4012d4:	004020fd 	.word	0x004020fd
  4012d8:	004045b1 	.word	0x004045b1

004012dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  4012dc:	b580      	push	{r7, lr}
  4012de:	b082      	sub	sp, #8
  4012e0:	af00      	add	r7, sp, #0
  4012e2:	6078      	str	r0, [r7, #4]
  4012e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  4012e6:	687b      	ldr	r3, [r7, #4]
  4012e8:	681b      	ldr	r3, [r3, #0]
  4012ea:	2b00      	cmp	r3, #0
  4012ec:	d018      	beq.n	401320 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  4012ee:	687b      	ldr	r3, [r7, #4]
  4012f0:	68da      	ldr	r2, [r3, #12]
  4012f2:	687b      	ldr	r3, [r7, #4]
  4012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4012f6:	441a      	add	r2, r3
  4012f8:	687b      	ldr	r3, [r7, #4]
  4012fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  4012fc:	687b      	ldr	r3, [r7, #4]
  4012fe:	68da      	ldr	r2, [r3, #12]
  401300:	687b      	ldr	r3, [r7, #4]
  401302:	685b      	ldr	r3, [r3, #4]
  401304:	429a      	cmp	r2, r3
  401306:	d303      	bcc.n	401310 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  401308:	687b      	ldr	r3, [r7, #4]
  40130a:	681a      	ldr	r2, [r3, #0]
  40130c:	687b      	ldr	r3, [r7, #4]
  40130e:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  401310:	687b      	ldr	r3, [r7, #4]
  401312:	68d9      	ldr	r1, [r3, #12]
  401314:	687b      	ldr	r3, [r7, #4]
  401316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  401318:	461a      	mov	r2, r3
  40131a:	6838      	ldr	r0, [r7, #0]
  40131c:	4b02      	ldr	r3, [pc, #8]	; (401328 <prvCopyDataFromQueue+0x4c>)
  40131e:	4798      	blx	r3
	}
}
  401320:	bf00      	nop
  401322:	3708      	adds	r7, #8
  401324:	46bd      	mov	sp, r7
  401326:	bd80      	pop	{r7, pc}
  401328:	004045b1 	.word	0x004045b1

0040132c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  40132c:	b580      	push	{r7, lr}
  40132e:	b082      	sub	sp, #8
  401330:	af00      	add	r7, sp, #0
  401332:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  401334:	4b23      	ldr	r3, [pc, #140]	; (4013c4 <prvUnlockQueue+0x98>)
  401336:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401338:	e012      	b.n	401360 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40133a:	687b      	ldr	r3, [r7, #4]
  40133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40133e:	2b00      	cmp	r3, #0
  401340:	d013      	beq.n	40136a <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401342:	687b      	ldr	r3, [r7, #4]
  401344:	3324      	adds	r3, #36	; 0x24
  401346:	4618      	mov	r0, r3
  401348:	4b1f      	ldr	r3, [pc, #124]	; (4013c8 <prvUnlockQueue+0x9c>)
  40134a:	4798      	blx	r3
  40134c:	4603      	mov	r3, r0
  40134e:	2b00      	cmp	r3, #0
  401350:	d001      	beq.n	401356 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  401352:	4b1e      	ldr	r3, [pc, #120]	; (4013cc <prvUnlockQueue+0xa0>)
  401354:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  401356:	687b      	ldr	r3, [r7, #4]
  401358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40135a:	1e5a      	subs	r2, r3, #1
  40135c:	687b      	ldr	r3, [r7, #4]
  40135e:	649a      	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401360:	687b      	ldr	r3, [r7, #4]
  401362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401364:	2b00      	cmp	r3, #0
  401366:	dce8      	bgt.n	40133a <prvUnlockQueue+0xe>
  401368:	e000      	b.n	40136c <prvUnlockQueue+0x40>
			}
			else
			{
				break;
  40136a:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  40136c:	687b      	ldr	r3, [r7, #4]
  40136e:	f04f 32ff 	mov.w	r2, #4294967295
  401372:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  401374:	4b16      	ldr	r3, [pc, #88]	; (4013d0 <prvUnlockQueue+0xa4>)
  401376:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  401378:	4b12      	ldr	r3, [pc, #72]	; (4013c4 <prvUnlockQueue+0x98>)
  40137a:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40137c:	e012      	b.n	4013a4 <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40137e:	687b      	ldr	r3, [r7, #4]
  401380:	691b      	ldr	r3, [r3, #16]
  401382:	2b00      	cmp	r3, #0
  401384:	d013      	beq.n	4013ae <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401386:	687b      	ldr	r3, [r7, #4]
  401388:	3310      	adds	r3, #16
  40138a:	4618      	mov	r0, r3
  40138c:	4b0e      	ldr	r3, [pc, #56]	; (4013c8 <prvUnlockQueue+0x9c>)
  40138e:	4798      	blx	r3
  401390:	4603      	mov	r3, r0
  401392:	2b00      	cmp	r3, #0
  401394:	d001      	beq.n	40139a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  401396:	4b0d      	ldr	r3, [pc, #52]	; (4013cc <prvUnlockQueue+0xa0>)
  401398:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  40139a:	687b      	ldr	r3, [r7, #4]
  40139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40139e:	1e5a      	subs	r2, r3, #1
  4013a0:	687b      	ldr	r3, [r7, #4]
  4013a2:	645a      	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4013a4:	687b      	ldr	r3, [r7, #4]
  4013a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  4013a8:	2b00      	cmp	r3, #0
  4013aa:	dce8      	bgt.n	40137e <prvUnlockQueue+0x52>
  4013ac:	e000      	b.n	4013b0 <prvUnlockQueue+0x84>
			}
			else
			{
				break;
  4013ae:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  4013b0:	687b      	ldr	r3, [r7, #4]
  4013b2:	f04f 32ff 	mov.w	r2, #4294967295
  4013b6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  4013b8:	4b05      	ldr	r3, [pc, #20]	; (4013d0 <prvUnlockQueue+0xa4>)
  4013ba:	4798      	blx	r3
}
  4013bc:	bf00      	nop
  4013be:	3708      	adds	r7, #8
  4013c0:	46bd      	mov	sp, r7
  4013c2:	bd80      	pop	{r7, pc}
  4013c4:	00400901 	.word	0x00400901
  4013c8:	00401b75 	.word	0x00401b75
  4013cc:	00401d21 	.word	0x00401d21
  4013d0:	00400921 	.word	0x00400921

004013d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  4013d4:	b580      	push	{r7, lr}
  4013d6:	b084      	sub	sp, #16
  4013d8:	af00      	add	r7, sp, #0
  4013da:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4013dc:	4b08      	ldr	r3, [pc, #32]	; (401400 <prvIsQueueEmpty+0x2c>)
  4013de:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  4013e0:	687b      	ldr	r3, [r7, #4]
  4013e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4013e4:	2b00      	cmp	r3, #0
  4013e6:	bf0c      	ite	eq
  4013e8:	2301      	moveq	r3, #1
  4013ea:	2300      	movne	r3, #0
  4013ec:	b2db      	uxtb	r3, r3
  4013ee:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  4013f0:	4b04      	ldr	r3, [pc, #16]	; (401404 <prvIsQueueEmpty+0x30>)
  4013f2:	4798      	blx	r3

	return xReturn;
  4013f4:	68fb      	ldr	r3, [r7, #12]
}
  4013f6:	4618      	mov	r0, r3
  4013f8:	3710      	adds	r7, #16
  4013fa:	46bd      	mov	sp, r7
  4013fc:	bd80      	pop	{r7, pc}
  4013fe:	bf00      	nop
  401400:	00400901 	.word	0x00400901
  401404:	00400921 	.word	0x00400921

00401408 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  401408:	b580      	push	{r7, lr}
  40140a:	b084      	sub	sp, #16
  40140c:	af00      	add	r7, sp, #0
  40140e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  401410:	4b09      	ldr	r3, [pc, #36]	; (401438 <prvIsQueueFull+0x30>)
  401412:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  401414:	687b      	ldr	r3, [r7, #4]
  401416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  401418:	687b      	ldr	r3, [r7, #4]
  40141a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40141c:	429a      	cmp	r2, r3
  40141e:	bf0c      	ite	eq
  401420:	2301      	moveq	r3, #1
  401422:	2300      	movne	r3, #0
  401424:	b2db      	uxtb	r3, r3
  401426:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  401428:	4b04      	ldr	r3, [pc, #16]	; (40143c <prvIsQueueFull+0x34>)
  40142a:	4798      	blx	r3

	return xReturn;
  40142c:	68fb      	ldr	r3, [r7, #12]
}
  40142e:	4618      	mov	r0, r3
  401430:	3710      	adds	r7, #16
  401432:	46bd      	mov	sp, r7
  401434:	bd80      	pop	{r7, pc}
  401436:	bf00      	nop
  401438:	00400901 	.word	0x00400901
  40143c:	00400921 	.word	0x00400921

00401440 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  401440:	b580      	push	{r7, lr}
  401442:	b082      	sub	sp, #8
  401444:	af00      	add	r7, sp, #0
  401446:	6078      	str	r0, [r7, #4]
  401448:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  40144a:	4b12      	ldr	r3, [pc, #72]	; (401494 <vQueueWaitForMessageRestricted+0x54>)
  40144c:	4798      	blx	r3
  40144e:	687b      	ldr	r3, [r7, #4]
  401450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  401452:	f1b3 3fff 	cmp.w	r3, #4294967295
  401456:	d102      	bne.n	40145e <vQueueWaitForMessageRestricted+0x1e>
  401458:	687b      	ldr	r3, [r7, #4]
  40145a:	2200      	movs	r2, #0
  40145c:	645a      	str	r2, [r3, #68]	; 0x44
  40145e:	687b      	ldr	r3, [r7, #4]
  401460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401462:	f1b3 3fff 	cmp.w	r3, #4294967295
  401466:	d102      	bne.n	40146e <vQueueWaitForMessageRestricted+0x2e>
  401468:	687b      	ldr	r3, [r7, #4]
  40146a:	2200      	movs	r2, #0
  40146c:	649a      	str	r2, [r3, #72]	; 0x48
  40146e:	4b0a      	ldr	r3, [pc, #40]	; (401498 <vQueueWaitForMessageRestricted+0x58>)
  401470:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  401472:	687b      	ldr	r3, [r7, #4]
  401474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401476:	2b00      	cmp	r3, #0
  401478:	d105      	bne.n	401486 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40147a:	687b      	ldr	r3, [r7, #4]
  40147c:	3324      	adds	r3, #36	; 0x24
  40147e:	6839      	ldr	r1, [r7, #0]
  401480:	4618      	mov	r0, r3
  401482:	4b06      	ldr	r3, [pc, #24]	; (40149c <vQueueWaitForMessageRestricted+0x5c>)
  401484:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  401486:	6878      	ldr	r0, [r7, #4]
  401488:	4b05      	ldr	r3, [pc, #20]	; (4014a0 <vQueueWaitForMessageRestricted+0x60>)
  40148a:	4798      	blx	r3
	}
  40148c:	bf00      	nop
  40148e:	3708      	adds	r7, #8
  401490:	46bd      	mov	sp, r7
  401492:	bd80      	pop	{r7, pc}
  401494:	00400901 	.word	0x00400901
  401498:	00400921 	.word	0x00400921
  40149c:	00401b11 	.word	0x00401b11
  4014a0:	0040132d 	.word	0x0040132d

004014a4 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  4014a4:	b590      	push	{r4, r7, lr}
  4014a6:	b08b      	sub	sp, #44	; 0x2c
  4014a8:	af02      	add	r7, sp, #8
  4014aa:	60f8      	str	r0, [r7, #12]
  4014ac:	60b9      	str	r1, [r7, #8]
  4014ae:	603b      	str	r3, [r7, #0]
  4014b0:	4613      	mov	r3, r2
  4014b2:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  4014b4:	68fb      	ldr	r3, [r7, #12]
  4014b6:	2b00      	cmp	r3, #0
  4014b8:	d103      	bne.n	4014c2 <xTaskGenericCreate+0x1e>
  4014ba:	4b54      	ldr	r3, [pc, #336]	; (40160c <xTaskGenericCreate+0x168>)
  4014bc:	4798      	blx	r3
  4014be:	bf00      	nop
  4014c0:	e7fd      	b.n	4014be <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  4014c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4014c4:	2b04      	cmp	r3, #4
  4014c6:	d903      	bls.n	4014d0 <xTaskGenericCreate+0x2c>
  4014c8:	4b50      	ldr	r3, [pc, #320]	; (40160c <xTaskGenericCreate+0x168>)
  4014ca:	4798      	blx	r3
  4014cc:	bf00      	nop
  4014ce:	e7fd      	b.n	4014cc <xTaskGenericCreate+0x28>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  4014d0:	88fb      	ldrh	r3, [r7, #6]
  4014d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  4014d4:	4618      	mov	r0, r3
  4014d6:	4b4e      	ldr	r3, [pc, #312]	; (401610 <xTaskGenericCreate+0x16c>)
  4014d8:	4798      	blx	r3
  4014da:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  4014dc:	69bb      	ldr	r3, [r7, #24]
  4014de:	2b00      	cmp	r3, #0
  4014e0:	d07d      	beq.n	4015de <xTaskGenericCreate+0x13a>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  4014e2:	69bb      	ldr	r3, [r7, #24]
  4014e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4014e6:	88fb      	ldrh	r3, [r7, #6]
  4014e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  4014ec:	3b01      	subs	r3, #1
  4014ee:	009b      	lsls	r3, r3, #2
  4014f0:	4413      	add	r3, r2
  4014f2:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  4014f4:	697b      	ldr	r3, [r7, #20]
  4014f6:	f023 0307 	bic.w	r3, r3, #7
  4014fa:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  4014fc:	697b      	ldr	r3, [r7, #20]
  4014fe:	f003 0307 	and.w	r3, r3, #7
  401502:	2b00      	cmp	r3, #0
  401504:	d003      	beq.n	40150e <xTaskGenericCreate+0x6a>
  401506:	4b41      	ldr	r3, [pc, #260]	; (40160c <xTaskGenericCreate+0x168>)
  401508:	4798      	blx	r3
  40150a:	bf00      	nop
  40150c:	e7fd      	b.n	40150a <xTaskGenericCreate+0x66>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  40150e:	88fb      	ldrh	r3, [r7, #6]
  401510:	9300      	str	r3, [sp, #0]
  401512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  401514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  401516:	68b9      	ldr	r1, [r7, #8]
  401518:	69b8      	ldr	r0, [r7, #24]
  40151a:	4c3e      	ldr	r4, [pc, #248]	; (401614 <xTaskGenericCreate+0x170>)
  40151c:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40151e:	683a      	ldr	r2, [r7, #0]
  401520:	68f9      	ldr	r1, [r7, #12]
  401522:	6978      	ldr	r0, [r7, #20]
  401524:	4b3c      	ldr	r3, [pc, #240]	; (401618 <xTaskGenericCreate+0x174>)
  401526:	4798      	blx	r3
  401528:	4602      	mov	r2, r0
  40152a:	69bb      	ldr	r3, [r7, #24]
  40152c:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
  40152e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  401530:	2b00      	cmp	r3, #0
  401532:	d002      	beq.n	40153a <xTaskGenericCreate+0x96>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  401534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  401536:	69ba      	ldr	r2, [r7, #24]
  401538:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  40153a:	4b38      	ldr	r3, [pc, #224]	; (40161c <xTaskGenericCreate+0x178>)
  40153c:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  40153e:	4b38      	ldr	r3, [pc, #224]	; (401620 <xTaskGenericCreate+0x17c>)
  401540:	681b      	ldr	r3, [r3, #0]
  401542:	3301      	adds	r3, #1
  401544:	4a36      	ldr	r2, [pc, #216]	; (401620 <xTaskGenericCreate+0x17c>)
  401546:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401548:	4b36      	ldr	r3, [pc, #216]	; (401624 <xTaskGenericCreate+0x180>)
  40154a:	681b      	ldr	r3, [r3, #0]
  40154c:	2b00      	cmp	r3, #0
  40154e:	d109      	bne.n	401564 <xTaskGenericCreate+0xc0>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  401550:	4a34      	ldr	r2, [pc, #208]	; (401624 <xTaskGenericCreate+0x180>)
  401552:	69bb      	ldr	r3, [r7, #24]
  401554:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  401556:	4b32      	ldr	r3, [pc, #200]	; (401620 <xTaskGenericCreate+0x17c>)
  401558:	681b      	ldr	r3, [r3, #0]
  40155a:	2b01      	cmp	r3, #1
  40155c:	d10f      	bne.n	40157e <xTaskGenericCreate+0xda>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  40155e:	4b32      	ldr	r3, [pc, #200]	; (401628 <xTaskGenericCreate+0x184>)
  401560:	4798      	blx	r3
  401562:	e00c      	b.n	40157e <xTaskGenericCreate+0xda>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  401564:	4b31      	ldr	r3, [pc, #196]	; (40162c <xTaskGenericCreate+0x188>)
  401566:	681b      	ldr	r3, [r3, #0]
  401568:	2b00      	cmp	r3, #0
  40156a:	d108      	bne.n	40157e <xTaskGenericCreate+0xda>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  40156c:	4b2d      	ldr	r3, [pc, #180]	; (401624 <xTaskGenericCreate+0x180>)
  40156e:	681b      	ldr	r3, [r3, #0]
  401570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401574:	429a      	cmp	r2, r3
  401576:	d802      	bhi.n	40157e <xTaskGenericCreate+0xda>
					{
						pxCurrentTCB = pxNewTCB;
  401578:	4a2a      	ldr	r2, [pc, #168]	; (401624 <xTaskGenericCreate+0x180>)
  40157a:	69bb      	ldr	r3, [r7, #24]
  40157c:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  40157e:	69bb      	ldr	r3, [r7, #24]
  401580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401582:	4b2b      	ldr	r3, [pc, #172]	; (401630 <xTaskGenericCreate+0x18c>)
  401584:	681b      	ldr	r3, [r3, #0]
  401586:	429a      	cmp	r2, r3
  401588:	d903      	bls.n	401592 <xTaskGenericCreate+0xee>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  40158a:	69bb      	ldr	r3, [r7, #24]
  40158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40158e:	4a28      	ldr	r2, [pc, #160]	; (401630 <xTaskGenericCreate+0x18c>)
  401590:	6013      	str	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401592:	4b28      	ldr	r3, [pc, #160]	; (401634 <xTaskGenericCreate+0x190>)
  401594:	681a      	ldr	r2, [r3, #0]
  401596:	69bb      	ldr	r3, [r7, #24]
  401598:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  40159a:	4b26      	ldr	r3, [pc, #152]	; (401634 <xTaskGenericCreate+0x190>)
  40159c:	681b      	ldr	r3, [r3, #0]
  40159e:	3301      	adds	r3, #1
  4015a0:	4a24      	ldr	r2, [pc, #144]	; (401634 <xTaskGenericCreate+0x190>)
  4015a2:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  4015a4:	69bb      	ldr	r3, [r7, #24]
  4015a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4015a8:	4b23      	ldr	r3, [pc, #140]	; (401638 <xTaskGenericCreate+0x194>)
  4015aa:	681b      	ldr	r3, [r3, #0]
  4015ac:	429a      	cmp	r2, r3
  4015ae:	d903      	bls.n	4015b8 <xTaskGenericCreate+0x114>
  4015b0:	69bb      	ldr	r3, [r7, #24]
  4015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4015b4:	4a20      	ldr	r2, [pc, #128]	; (401638 <xTaskGenericCreate+0x194>)
  4015b6:	6013      	str	r3, [r2, #0]
  4015b8:	69bb      	ldr	r3, [r7, #24]
  4015ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4015bc:	4613      	mov	r3, r2
  4015be:	009b      	lsls	r3, r3, #2
  4015c0:	4413      	add	r3, r2
  4015c2:	009b      	lsls	r3, r3, #2
  4015c4:	4a1d      	ldr	r2, [pc, #116]	; (40163c <xTaskGenericCreate+0x198>)
  4015c6:	441a      	add	r2, r3
  4015c8:	69bb      	ldr	r3, [r7, #24]
  4015ca:	3304      	adds	r3, #4
  4015cc:	4619      	mov	r1, r3
  4015ce:	4610      	mov	r0, r2
  4015d0:	4b1b      	ldr	r3, [pc, #108]	; (401640 <xTaskGenericCreate+0x19c>)
  4015d2:	4798      	blx	r3

			xReturn = pdPASS;
  4015d4:	2301      	movs	r3, #1
  4015d6:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  4015d8:	4b1a      	ldr	r3, [pc, #104]	; (401644 <xTaskGenericCreate+0x1a0>)
  4015da:	4798      	blx	r3
  4015dc:	e002      	b.n	4015e4 <xTaskGenericCreate+0x140>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4015de:	f04f 33ff 	mov.w	r3, #4294967295
  4015e2:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  4015e4:	69fb      	ldr	r3, [r7, #28]
  4015e6:	2b01      	cmp	r3, #1
  4015e8:	d10b      	bne.n	401602 <xTaskGenericCreate+0x15e>
	{
		if( xSchedulerRunning != pdFALSE )
  4015ea:	4b10      	ldr	r3, [pc, #64]	; (40162c <xTaskGenericCreate+0x188>)
  4015ec:	681b      	ldr	r3, [r3, #0]
  4015ee:	2b00      	cmp	r3, #0
  4015f0:	d007      	beq.n	401602 <xTaskGenericCreate+0x15e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  4015f2:	4b0c      	ldr	r3, [pc, #48]	; (401624 <xTaskGenericCreate+0x180>)
  4015f4:	681b      	ldr	r3, [r3, #0]
  4015f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4015f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4015fa:	429a      	cmp	r2, r3
  4015fc:	d201      	bcs.n	401602 <xTaskGenericCreate+0x15e>
			{
				portYIELD_WITHIN_API();
  4015fe:	4b12      	ldr	r3, [pc, #72]	; (401648 <xTaskGenericCreate+0x1a4>)
  401600:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  401602:	69fb      	ldr	r3, [r7, #28]
}
  401604:	4618      	mov	r0, r3
  401606:	3724      	adds	r7, #36	; 0x24
  401608:	46bd      	mov	sp, r7
  40160a:	bd90      	pop	{r4, r7, pc}
  40160c:	00400949 	.word	0x00400949
  401610:	00401f59 	.word	0x00401f59
  401614:	00401d61 	.word	0x00401d61
  401618:	004007f5 	.word	0x004007f5
  40161c:	00400901 	.word	0x00400901
  401620:	2000a5c4 	.word	0x2000a5c4
  401624:	2000a4ec 	.word	0x2000a4ec
  401628:	00401dd5 	.word	0x00401dd5
  40162c:	2000a5d4 	.word	0x2000a5d4
  401630:	2000a5cc 	.word	0x2000a5cc
  401634:	2000a5e8 	.word	0x2000a5e8
  401638:	2000a5d0 	.word	0x2000a5d0
  40163c:	2000a4f0 	.word	0x2000a4f0
  401640:	00400633 	.word	0x00400633
  401644:	00400921 	.word	0x00400921
  401648:	004008e5 	.word	0x004008e5

0040164c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  40164c:	b580      	push	{r7, lr}
  40164e:	b084      	sub	sp, #16
  401650:	af00      	add	r7, sp, #0
  401652:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  401654:	2300      	movs	r3, #0
  401656:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  401658:	687b      	ldr	r3, [r7, #4]
  40165a:	2b00      	cmp	r3, #0
  40165c:	d012      	beq.n	401684 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  40165e:	4b0e      	ldr	r3, [pc, #56]	; (401698 <vTaskDelay+0x4c>)
  401660:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  401662:	4b0e      	ldr	r3, [pc, #56]	; (40169c <vTaskDelay+0x50>)
  401664:	681a      	ldr	r2, [r3, #0]
  401666:	687b      	ldr	r3, [r7, #4]
  401668:	4413      	add	r3, r2
  40166a:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  40166c:	4b0c      	ldr	r3, [pc, #48]	; (4016a0 <vTaskDelay+0x54>)
  40166e:	681b      	ldr	r3, [r3, #0]
  401670:	3304      	adds	r3, #4
  401672:	4618      	mov	r0, r3
  401674:	4b0b      	ldr	r3, [pc, #44]	; (4016a4 <vTaskDelay+0x58>)
  401676:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401678:	68b8      	ldr	r0, [r7, #8]
  40167a:	4b0b      	ldr	r3, [pc, #44]	; (4016a8 <vTaskDelay+0x5c>)
  40167c:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  40167e:	4b0b      	ldr	r3, [pc, #44]	; (4016ac <vTaskDelay+0x60>)
  401680:	4798      	blx	r3
  401682:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  401684:	68fb      	ldr	r3, [r7, #12]
  401686:	2b00      	cmp	r3, #0
  401688:	d101      	bne.n	40168e <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  40168a:	4b09      	ldr	r3, [pc, #36]	; (4016b0 <vTaskDelay+0x64>)
  40168c:	4798      	blx	r3
		}
	}
  40168e:	bf00      	nop
  401690:	3710      	adds	r7, #16
  401692:	46bd      	mov	sp, r7
  401694:	bd80      	pop	{r7, pc}
  401696:	bf00      	nop
  401698:	00401735 	.word	0x00401735
  40169c:	2000a5c8 	.word	0x2000a5c8
  4016a0:	2000a4ec 	.word	0x2000a4ec
  4016a4:	004006f5 	.word	0x004006f5
  4016a8:	00401ee9 	.word	0x00401ee9
  4016ac:	00401751 	.word	0x00401751
  4016b0:	004008e5 	.word	0x004008e5

004016b4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  4016b4:	b590      	push	{r4, r7, lr}
  4016b6:	b087      	sub	sp, #28
  4016b8:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  4016ba:	2300      	movs	r3, #0
  4016bc:	9303      	str	r3, [sp, #12]
  4016be:	2300      	movs	r3, #0
  4016c0:	9302      	str	r3, [sp, #8]
  4016c2:	2300      	movs	r3, #0
  4016c4:	9301      	str	r3, [sp, #4]
  4016c6:	2300      	movs	r3, #0
  4016c8:	9300      	str	r3, [sp, #0]
  4016ca:	2300      	movs	r3, #0
  4016cc:	2282      	movs	r2, #130	; 0x82
  4016ce:	4911      	ldr	r1, [pc, #68]	; (401714 <vTaskStartScheduler+0x60>)
  4016d0:	4811      	ldr	r0, [pc, #68]	; (401718 <vTaskStartScheduler+0x64>)
  4016d2:	4c12      	ldr	r4, [pc, #72]	; (40171c <vTaskStartScheduler+0x68>)
  4016d4:	47a0      	blx	r4
  4016d6:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  4016d8:	687b      	ldr	r3, [r7, #4]
  4016da:	2b01      	cmp	r3, #1
  4016dc:	d102      	bne.n	4016e4 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  4016de:	4b10      	ldr	r3, [pc, #64]	; (401720 <vTaskStartScheduler+0x6c>)
  4016e0:	4798      	blx	r3
  4016e2:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  4016e4:	687b      	ldr	r3, [r7, #4]
  4016e6:	2b01      	cmp	r3, #1
  4016e8:	d109      	bne.n	4016fe <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  4016ea:	4b0e      	ldr	r3, [pc, #56]	; (401724 <vTaskStartScheduler+0x70>)
  4016ec:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  4016ee:	4b0e      	ldr	r3, [pc, #56]	; (401728 <vTaskStartScheduler+0x74>)
  4016f0:	2201      	movs	r2, #1
  4016f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  4016f4:	4b0d      	ldr	r3, [pc, #52]	; (40172c <vTaskStartScheduler+0x78>)
  4016f6:	2200      	movs	r2, #0
  4016f8:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  4016fa:	4b0d      	ldr	r3, [pc, #52]	; (401730 <vTaskStartScheduler+0x7c>)
  4016fc:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  4016fe:	687b      	ldr	r3, [r7, #4]
  401700:	2b00      	cmp	r3, #0
  401702:	d103      	bne.n	40170c <vTaskStartScheduler+0x58>
  401704:	4b07      	ldr	r3, [pc, #28]	; (401724 <vTaskStartScheduler+0x70>)
  401706:	4798      	blx	r3
  401708:	bf00      	nop
  40170a:	e7fd      	b.n	401708 <vTaskStartScheduler+0x54>
}
  40170c:	bf00      	nop
  40170e:	370c      	adds	r7, #12
  401710:	46bd      	mov	sp, r7
  401712:	bd90      	pop	{r4, r7, pc}
  401714:	00404904 	.word	0x00404904
  401718:	00401d39 	.word	0x00401d39
  40171c:	004014a5 	.word	0x004014a5
  401720:	00402181 	.word	0x00402181
  401724:	00400949 	.word	0x00400949
  401728:	2000a5d4 	.word	0x2000a5d4
  40172c:	2000a5c8 	.word	0x2000a5c8
  401730:	0040088d 	.word	0x0040088d

00401734 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  401734:	b480      	push	{r7}
  401736:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  401738:	4b04      	ldr	r3, [pc, #16]	; (40174c <vTaskSuspendAll+0x18>)
  40173a:	681b      	ldr	r3, [r3, #0]
  40173c:	3301      	adds	r3, #1
  40173e:	4a03      	ldr	r2, [pc, #12]	; (40174c <vTaskSuspendAll+0x18>)
  401740:	6013      	str	r3, [r2, #0]
}
  401742:	bf00      	nop
  401744:	46bd      	mov	sp, r7
  401746:	f85d 7b04 	ldr.w	r7, [sp], #4
  40174a:	4770      	bx	lr
  40174c:	2000a5d8 	.word	0x2000a5d8

00401750 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  401750:	b590      	push	{r4, r7, lr}
  401752:	b083      	sub	sp, #12
  401754:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  401756:	2300      	movs	r3, #0
  401758:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  40175a:	4b36      	ldr	r3, [pc, #216]	; (401834 <xTaskResumeAll+0xe4>)
  40175c:	681b      	ldr	r3, [r3, #0]
  40175e:	2b00      	cmp	r3, #0
  401760:	d103      	bne.n	40176a <xTaskResumeAll+0x1a>
  401762:	4b35      	ldr	r3, [pc, #212]	; (401838 <xTaskResumeAll+0xe8>)
  401764:	4798      	blx	r3
  401766:	bf00      	nop
  401768:	e7fd      	b.n	401766 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  40176a:	4b34      	ldr	r3, [pc, #208]	; (40183c <xTaskResumeAll+0xec>)
  40176c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  40176e:	4b31      	ldr	r3, [pc, #196]	; (401834 <xTaskResumeAll+0xe4>)
  401770:	681b      	ldr	r3, [r3, #0]
  401772:	3b01      	subs	r3, #1
  401774:	4a2f      	ldr	r2, [pc, #188]	; (401834 <xTaskResumeAll+0xe4>)
  401776:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401778:	4b2e      	ldr	r3, [pc, #184]	; (401834 <xTaskResumeAll+0xe4>)
  40177a:	681b      	ldr	r3, [r3, #0]
  40177c:	2b00      	cmp	r3, #0
  40177e:	d152      	bne.n	401826 <xTaskResumeAll+0xd6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  401780:	4b2f      	ldr	r3, [pc, #188]	; (401840 <xTaskResumeAll+0xf0>)
  401782:	681b      	ldr	r3, [r3, #0]
  401784:	2b00      	cmp	r3, #0
  401786:	d04e      	beq.n	401826 <xTaskResumeAll+0xd6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  401788:	2300      	movs	r3, #0
  40178a:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  40178c:	e027      	b.n	4017de <xTaskResumeAll+0x8e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  40178e:	4b2d      	ldr	r3, [pc, #180]	; (401844 <xTaskResumeAll+0xf4>)
  401790:	68db      	ldr	r3, [r3, #12]
  401792:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  401794:	f104 0318 	add.w	r3, r4, #24
  401798:	4618      	mov	r0, r3
  40179a:	4b2b      	ldr	r3, [pc, #172]	; (401848 <xTaskResumeAll+0xf8>)
  40179c:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  40179e:	1d23      	adds	r3, r4, #4
  4017a0:	4618      	mov	r0, r3
  4017a2:	4b29      	ldr	r3, [pc, #164]	; (401848 <xTaskResumeAll+0xf8>)
  4017a4:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  4017a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4017a8:	4b28      	ldr	r3, [pc, #160]	; (40184c <xTaskResumeAll+0xfc>)
  4017aa:	681b      	ldr	r3, [r3, #0]
  4017ac:	429a      	cmp	r2, r3
  4017ae:	d902      	bls.n	4017b6 <xTaskResumeAll+0x66>
  4017b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4017b2:	4a26      	ldr	r2, [pc, #152]	; (40184c <xTaskResumeAll+0xfc>)
  4017b4:	6013      	str	r3, [r2, #0]
  4017b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4017b8:	4613      	mov	r3, r2
  4017ba:	009b      	lsls	r3, r3, #2
  4017bc:	4413      	add	r3, r2
  4017be:	009b      	lsls	r3, r3, #2
  4017c0:	4a23      	ldr	r2, [pc, #140]	; (401850 <xTaskResumeAll+0x100>)
  4017c2:	4413      	add	r3, r2
  4017c4:	1d22      	adds	r2, r4, #4
  4017c6:	4611      	mov	r1, r2
  4017c8:	4618      	mov	r0, r3
  4017ca:	4b22      	ldr	r3, [pc, #136]	; (401854 <xTaskResumeAll+0x104>)
  4017cc:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4017ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4017d0:	4b21      	ldr	r3, [pc, #132]	; (401858 <xTaskResumeAll+0x108>)
  4017d2:	681b      	ldr	r3, [r3, #0]
  4017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4017d6:	429a      	cmp	r2, r3
  4017d8:	d301      	bcc.n	4017de <xTaskResumeAll+0x8e>
					{
						xYieldRequired = pdTRUE;
  4017da:	2301      	movs	r3, #1
  4017dc:	603b      	str	r3, [r7, #0]
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  4017de:	4b19      	ldr	r3, [pc, #100]	; (401844 <xTaskResumeAll+0xf4>)
  4017e0:	681b      	ldr	r3, [r3, #0]
  4017e2:	2b00      	cmp	r3, #0
  4017e4:	d1d3      	bne.n	40178e <xTaskResumeAll+0x3e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  4017e6:	4b1d      	ldr	r3, [pc, #116]	; (40185c <xTaskResumeAll+0x10c>)
  4017e8:	681b      	ldr	r3, [r3, #0]
  4017ea:	2b00      	cmp	r3, #0
  4017ec:	d00d      	beq.n	40180a <xTaskResumeAll+0xba>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  4017ee:	e006      	b.n	4017fe <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  4017f0:	4b1b      	ldr	r3, [pc, #108]	; (401860 <xTaskResumeAll+0x110>)
  4017f2:	4798      	blx	r3
						--uxMissedTicks;
  4017f4:	4b19      	ldr	r3, [pc, #100]	; (40185c <xTaskResumeAll+0x10c>)
  4017f6:	681b      	ldr	r3, [r3, #0]
  4017f8:	3b01      	subs	r3, #1
  4017fa:	4a18      	ldr	r2, [pc, #96]	; (40185c <xTaskResumeAll+0x10c>)
  4017fc:	6013      	str	r3, [r2, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  4017fe:	4b17      	ldr	r3, [pc, #92]	; (40185c <xTaskResumeAll+0x10c>)
  401800:	681b      	ldr	r3, [r3, #0]
  401802:	2b00      	cmp	r3, #0
  401804:	d1f4      	bne.n	4017f0 <xTaskResumeAll+0xa0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  401806:	2301      	movs	r3, #1
  401808:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  40180a:	683b      	ldr	r3, [r7, #0]
  40180c:	2b01      	cmp	r3, #1
  40180e:	d003      	beq.n	401818 <xTaskResumeAll+0xc8>
  401810:	4b14      	ldr	r3, [pc, #80]	; (401864 <xTaskResumeAll+0x114>)
  401812:	681b      	ldr	r3, [r3, #0]
  401814:	2b01      	cmp	r3, #1
  401816:	d106      	bne.n	401826 <xTaskResumeAll+0xd6>
				{
					xAlreadyYielded = pdTRUE;
  401818:	2301      	movs	r3, #1
  40181a:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  40181c:	4b11      	ldr	r3, [pc, #68]	; (401864 <xTaskResumeAll+0x114>)
  40181e:	2200      	movs	r2, #0
  401820:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  401822:	4b11      	ldr	r3, [pc, #68]	; (401868 <xTaskResumeAll+0x118>)
  401824:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  401826:	4b11      	ldr	r3, [pc, #68]	; (40186c <xTaskResumeAll+0x11c>)
  401828:	4798      	blx	r3

	return xAlreadyYielded;
  40182a:	687b      	ldr	r3, [r7, #4]
}
  40182c:	4618      	mov	r0, r3
  40182e:	370c      	adds	r7, #12
  401830:	46bd      	mov	sp, r7
  401832:	bd90      	pop	{r4, r7, pc}
  401834:	2000a5d8 	.word	0x2000a5d8
  401838:	00400949 	.word	0x00400949
  40183c:	00400901 	.word	0x00400901
  401840:	2000a5c4 	.word	0x2000a5c4
  401844:	2000a584 	.word	0x2000a584
  401848:	004006f5 	.word	0x004006f5
  40184c:	2000a5d0 	.word	0x2000a5d0
  401850:	2000a4f0 	.word	0x2000a4f0
  401854:	00400633 	.word	0x00400633
  401858:	2000a4ec 	.word	0x2000a4ec
  40185c:	2000a5dc 	.word	0x2000a5dc
  401860:	0040189d 	.word	0x0040189d
  401864:	2000a5e0 	.word	0x2000a5e0
  401868:	004008e5 	.word	0x004008e5
  40186c:	00400921 	.word	0x00400921

00401870 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  401870:	b580      	push	{r7, lr}
  401872:	b082      	sub	sp, #8
  401874:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  401876:	4b06      	ldr	r3, [pc, #24]	; (401890 <xTaskGetTickCount+0x20>)
  401878:	4798      	blx	r3
	{
		xTicks = xTickCount;
  40187a:	4b06      	ldr	r3, [pc, #24]	; (401894 <xTaskGetTickCount+0x24>)
  40187c:	681b      	ldr	r3, [r3, #0]
  40187e:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  401880:	4b05      	ldr	r3, [pc, #20]	; (401898 <xTaskGetTickCount+0x28>)
  401882:	4798      	blx	r3

	return xTicks;
  401884:	687b      	ldr	r3, [r7, #4]
}
  401886:	4618      	mov	r0, r3
  401888:	3708      	adds	r7, #8
  40188a:	46bd      	mov	sp, r7
  40188c:	bd80      	pop	{r7, pc}
  40188e:	bf00      	nop
  401890:	00400901 	.word	0x00400901
  401894:	2000a5c8 	.word	0x2000a5c8
  401898:	00400921 	.word	0x00400921

0040189c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  40189c:	b580      	push	{r7, lr}
  40189e:	b084      	sub	sp, #16
  4018a0:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4018a2:	4b45      	ldr	r3, [pc, #276]	; (4019b8 <vTaskIncrementTick+0x11c>)
  4018a4:	681b      	ldr	r3, [r3, #0]
  4018a6:	2b00      	cmp	r3, #0
  4018a8:	d17b      	bne.n	4019a2 <vTaskIncrementTick+0x106>
	{
		++xTickCount;
  4018aa:	4b44      	ldr	r3, [pc, #272]	; (4019bc <vTaskIncrementTick+0x120>)
  4018ac:	681b      	ldr	r3, [r3, #0]
  4018ae:	3301      	adds	r3, #1
  4018b0:	4a42      	ldr	r2, [pc, #264]	; (4019bc <vTaskIncrementTick+0x120>)
  4018b2:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
  4018b4:	4b41      	ldr	r3, [pc, #260]	; (4019bc <vTaskIncrementTick+0x120>)
  4018b6:	681b      	ldr	r3, [r3, #0]
  4018b8:	2b00      	cmp	r3, #0
  4018ba:	d12a      	bne.n	401912 <vTaskIncrementTick+0x76>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  4018bc:	4b40      	ldr	r3, [pc, #256]	; (4019c0 <vTaskIncrementTick+0x124>)
  4018be:	681b      	ldr	r3, [r3, #0]
  4018c0:	681b      	ldr	r3, [r3, #0]
  4018c2:	2b00      	cmp	r3, #0
  4018c4:	d003      	beq.n	4018ce <vTaskIncrementTick+0x32>
  4018c6:	4b3f      	ldr	r3, [pc, #252]	; (4019c4 <vTaskIncrementTick+0x128>)
  4018c8:	4798      	blx	r3
  4018ca:	bf00      	nop
  4018cc:	e7fd      	b.n	4018ca <vTaskIncrementTick+0x2e>

			pxTemp = pxDelayedTaskList;
  4018ce:	4b3c      	ldr	r3, [pc, #240]	; (4019c0 <vTaskIncrementTick+0x124>)
  4018d0:	681b      	ldr	r3, [r3, #0]
  4018d2:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  4018d4:	4b3c      	ldr	r3, [pc, #240]	; (4019c8 <vTaskIncrementTick+0x12c>)
  4018d6:	681b      	ldr	r3, [r3, #0]
  4018d8:	4a39      	ldr	r2, [pc, #228]	; (4019c0 <vTaskIncrementTick+0x124>)
  4018da:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
  4018dc:	4a3a      	ldr	r2, [pc, #232]	; (4019c8 <vTaskIncrementTick+0x12c>)
  4018de:	68fb      	ldr	r3, [r7, #12]
  4018e0:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
  4018e2:	4b3a      	ldr	r3, [pc, #232]	; (4019cc <vTaskIncrementTick+0x130>)
  4018e4:	681b      	ldr	r3, [r3, #0]
  4018e6:	3301      	adds	r3, #1
  4018e8:	4a38      	ldr	r2, [pc, #224]	; (4019cc <vTaskIncrementTick+0x130>)
  4018ea:	6013      	str	r3, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4018ec:	4b34      	ldr	r3, [pc, #208]	; (4019c0 <vTaskIncrementTick+0x124>)
  4018ee:	681b      	ldr	r3, [r3, #0]
  4018f0:	681b      	ldr	r3, [r3, #0]
  4018f2:	2b00      	cmp	r3, #0
  4018f4:	d104      	bne.n	401900 <vTaskIncrementTick+0x64>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  4018f6:	4b36      	ldr	r3, [pc, #216]	; (4019d0 <vTaskIncrementTick+0x134>)
  4018f8:	f04f 32ff 	mov.w	r2, #4294967295
  4018fc:	601a      	str	r2, [r3, #0]
  4018fe:	e008      	b.n	401912 <vTaskIncrementTick+0x76>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401900:	4b2f      	ldr	r3, [pc, #188]	; (4019c0 <vTaskIncrementTick+0x124>)
  401902:	681b      	ldr	r3, [r3, #0]
  401904:	68db      	ldr	r3, [r3, #12]
  401906:	68db      	ldr	r3, [r3, #12]
  401908:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  40190a:	68bb      	ldr	r3, [r7, #8]
  40190c:	685b      	ldr	r3, [r3, #4]
  40190e:	4a30      	ldr	r2, [pc, #192]	; (4019d0 <vTaskIncrementTick+0x134>)
  401910:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  401912:	4b2a      	ldr	r3, [pc, #168]	; (4019bc <vTaskIncrementTick+0x120>)
  401914:	681a      	ldr	r2, [r3, #0]
  401916:	4b2e      	ldr	r3, [pc, #184]	; (4019d0 <vTaskIncrementTick+0x134>)
  401918:	681b      	ldr	r3, [r3, #0]
  40191a:	429a      	cmp	r2, r3
  40191c:	d347      	bcc.n	4019ae <vTaskIncrementTick+0x112>
  40191e:	4b28      	ldr	r3, [pc, #160]	; (4019c0 <vTaskIncrementTick+0x124>)
  401920:	681b      	ldr	r3, [r3, #0]
  401922:	681b      	ldr	r3, [r3, #0]
  401924:	2b00      	cmp	r3, #0
  401926:	d104      	bne.n	401932 <vTaskIncrementTick+0x96>
  401928:	4b29      	ldr	r3, [pc, #164]	; (4019d0 <vTaskIncrementTick+0x134>)
  40192a:	f04f 32ff 	mov.w	r2, #4294967295
  40192e:	601a      	str	r2, [r3, #0]
  401930:	e03d      	b.n	4019ae <vTaskIncrementTick+0x112>
  401932:	4b23      	ldr	r3, [pc, #140]	; (4019c0 <vTaskIncrementTick+0x124>)
  401934:	681b      	ldr	r3, [r3, #0]
  401936:	68db      	ldr	r3, [r3, #12]
  401938:	68db      	ldr	r3, [r3, #12]
  40193a:	60bb      	str	r3, [r7, #8]
  40193c:	68bb      	ldr	r3, [r7, #8]
  40193e:	685b      	ldr	r3, [r3, #4]
  401940:	607b      	str	r3, [r7, #4]
  401942:	4b1e      	ldr	r3, [pc, #120]	; (4019bc <vTaskIncrementTick+0x120>)
  401944:	681a      	ldr	r2, [r3, #0]
  401946:	687b      	ldr	r3, [r7, #4]
  401948:	429a      	cmp	r2, r3
  40194a:	d203      	bcs.n	401954 <vTaskIncrementTick+0xb8>
  40194c:	4a20      	ldr	r2, [pc, #128]	; (4019d0 <vTaskIncrementTick+0x134>)
  40194e:	687b      	ldr	r3, [r7, #4]
  401950:	6013      	str	r3, [r2, #0]
  401952:	e02c      	b.n	4019ae <vTaskIncrementTick+0x112>
  401954:	68bb      	ldr	r3, [r7, #8]
  401956:	3304      	adds	r3, #4
  401958:	4618      	mov	r0, r3
  40195a:	4b1e      	ldr	r3, [pc, #120]	; (4019d4 <vTaskIncrementTick+0x138>)
  40195c:	4798      	blx	r3
  40195e:	68bb      	ldr	r3, [r7, #8]
  401960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401962:	2b00      	cmp	r3, #0
  401964:	d004      	beq.n	401970 <vTaskIncrementTick+0xd4>
  401966:	68bb      	ldr	r3, [r7, #8]
  401968:	3318      	adds	r3, #24
  40196a:	4618      	mov	r0, r3
  40196c:	4b19      	ldr	r3, [pc, #100]	; (4019d4 <vTaskIncrementTick+0x138>)
  40196e:	4798      	blx	r3
  401970:	68bb      	ldr	r3, [r7, #8]
  401972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401974:	4b18      	ldr	r3, [pc, #96]	; (4019d8 <vTaskIncrementTick+0x13c>)
  401976:	681b      	ldr	r3, [r3, #0]
  401978:	429a      	cmp	r2, r3
  40197a:	d903      	bls.n	401984 <vTaskIncrementTick+0xe8>
  40197c:	68bb      	ldr	r3, [r7, #8]
  40197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401980:	4a15      	ldr	r2, [pc, #84]	; (4019d8 <vTaskIncrementTick+0x13c>)
  401982:	6013      	str	r3, [r2, #0]
  401984:	68bb      	ldr	r3, [r7, #8]
  401986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401988:	4613      	mov	r3, r2
  40198a:	009b      	lsls	r3, r3, #2
  40198c:	4413      	add	r3, r2
  40198e:	009b      	lsls	r3, r3, #2
  401990:	4a12      	ldr	r2, [pc, #72]	; (4019dc <vTaskIncrementTick+0x140>)
  401992:	441a      	add	r2, r3
  401994:	68bb      	ldr	r3, [r7, #8]
  401996:	3304      	adds	r3, #4
  401998:	4619      	mov	r1, r3
  40199a:	4610      	mov	r0, r2
  40199c:	4b10      	ldr	r3, [pc, #64]	; (4019e0 <vTaskIncrementTick+0x144>)
  40199e:	4798      	blx	r3
  4019a0:	e7bd      	b.n	40191e <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
  4019a2:	4b10      	ldr	r3, [pc, #64]	; (4019e4 <vTaskIncrementTick+0x148>)
  4019a4:	681b      	ldr	r3, [r3, #0]
  4019a6:	3301      	adds	r3, #1
  4019a8:	4a0e      	ldr	r2, [pc, #56]	; (4019e4 <vTaskIncrementTick+0x148>)
  4019aa:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  4019ac:	e7ff      	b.n	4019ae <vTaskIncrementTick+0x112>
  4019ae:	bf00      	nop
  4019b0:	3710      	adds	r7, #16
  4019b2:	46bd      	mov	sp, r7
  4019b4:	bd80      	pop	{r7, pc}
  4019b6:	bf00      	nop
  4019b8:	2000a5d8 	.word	0x2000a5d8
  4019bc:	2000a5c8 	.word	0x2000a5c8
  4019c0:	2000a57c 	.word	0x2000a57c
  4019c4:	00400949 	.word	0x00400949
  4019c8:	2000a580 	.word	0x2000a580
  4019cc:	2000a5e4 	.word	0x2000a5e4
  4019d0:	20000018 	.word	0x20000018
  4019d4:	004006f5 	.word	0x004006f5
  4019d8:	2000a5d0 	.word	0x2000a5d0
  4019dc:	2000a4f0 	.word	0x2000a4f0
  4019e0:	00400633 	.word	0x00400633
  4019e4:	2000a5dc 	.word	0x2000a5dc

004019e8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  4019e8:	b580      	push	{r7, lr}
  4019ea:	b082      	sub	sp, #8
  4019ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  4019ee:	4b21      	ldr	r3, [pc, #132]	; (401a74 <vTaskSwitchContext+0x8c>)
  4019f0:	681b      	ldr	r3, [r3, #0]
  4019f2:	2b00      	cmp	r3, #0
  4019f4:	d010      	beq.n	401a18 <vTaskSwitchContext+0x30>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  4019f6:	4b20      	ldr	r3, [pc, #128]	; (401a78 <vTaskSwitchContext+0x90>)
  4019f8:	2201      	movs	r2, #1
  4019fa:	601a      	str	r2, [r3, #0]

		taskSELECT_HIGHEST_PRIORITY_TASK();

		traceTASK_SWITCHED_IN();
	}
}
  4019fc:	e035      	b.n	401a6a <vTaskSwitchContext+0x82>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4019fe:	4b1f      	ldr	r3, [pc, #124]	; (401a7c <vTaskSwitchContext+0x94>)
  401a00:	681b      	ldr	r3, [r3, #0]
  401a02:	2b00      	cmp	r3, #0
  401a04:	d103      	bne.n	401a0e <vTaskSwitchContext+0x26>
  401a06:	4b1e      	ldr	r3, [pc, #120]	; (401a80 <vTaskSwitchContext+0x98>)
  401a08:	4798      	blx	r3
  401a0a:	bf00      	nop
  401a0c:	e7fd      	b.n	401a0a <vTaskSwitchContext+0x22>
  401a0e:	4b1b      	ldr	r3, [pc, #108]	; (401a7c <vTaskSwitchContext+0x94>)
  401a10:	681b      	ldr	r3, [r3, #0]
  401a12:	3b01      	subs	r3, #1
  401a14:	4a19      	ldr	r2, [pc, #100]	; (401a7c <vTaskSwitchContext+0x94>)
  401a16:	6013      	str	r3, [r2, #0]
  401a18:	4b18      	ldr	r3, [pc, #96]	; (401a7c <vTaskSwitchContext+0x94>)
  401a1a:	681a      	ldr	r2, [r3, #0]
  401a1c:	4919      	ldr	r1, [pc, #100]	; (401a84 <vTaskSwitchContext+0x9c>)
  401a1e:	4613      	mov	r3, r2
  401a20:	009b      	lsls	r3, r3, #2
  401a22:	4413      	add	r3, r2
  401a24:	009b      	lsls	r3, r3, #2
  401a26:	440b      	add	r3, r1
  401a28:	681b      	ldr	r3, [r3, #0]
  401a2a:	2b00      	cmp	r3, #0
  401a2c:	d0e7      	beq.n	4019fe <vTaskSwitchContext+0x16>
  401a2e:	4b13      	ldr	r3, [pc, #76]	; (401a7c <vTaskSwitchContext+0x94>)
  401a30:	681a      	ldr	r2, [r3, #0]
  401a32:	4613      	mov	r3, r2
  401a34:	009b      	lsls	r3, r3, #2
  401a36:	4413      	add	r3, r2
  401a38:	009b      	lsls	r3, r3, #2
  401a3a:	4a12      	ldr	r2, [pc, #72]	; (401a84 <vTaskSwitchContext+0x9c>)
  401a3c:	4413      	add	r3, r2
  401a3e:	607b      	str	r3, [r7, #4]
  401a40:	687b      	ldr	r3, [r7, #4]
  401a42:	685b      	ldr	r3, [r3, #4]
  401a44:	685a      	ldr	r2, [r3, #4]
  401a46:	687b      	ldr	r3, [r7, #4]
  401a48:	605a      	str	r2, [r3, #4]
  401a4a:	687b      	ldr	r3, [r7, #4]
  401a4c:	685a      	ldr	r2, [r3, #4]
  401a4e:	687b      	ldr	r3, [r7, #4]
  401a50:	3308      	adds	r3, #8
  401a52:	429a      	cmp	r2, r3
  401a54:	d104      	bne.n	401a60 <vTaskSwitchContext+0x78>
  401a56:	687b      	ldr	r3, [r7, #4]
  401a58:	685b      	ldr	r3, [r3, #4]
  401a5a:	685a      	ldr	r2, [r3, #4]
  401a5c:	687b      	ldr	r3, [r7, #4]
  401a5e:	605a      	str	r2, [r3, #4]
  401a60:	687b      	ldr	r3, [r7, #4]
  401a62:	685b      	ldr	r3, [r3, #4]
  401a64:	68db      	ldr	r3, [r3, #12]
  401a66:	4a08      	ldr	r2, [pc, #32]	; (401a88 <vTaskSwitchContext+0xa0>)
  401a68:	6013      	str	r3, [r2, #0]
}
  401a6a:	bf00      	nop
  401a6c:	3708      	adds	r7, #8
  401a6e:	46bd      	mov	sp, r7
  401a70:	bd80      	pop	{r7, pc}
  401a72:	bf00      	nop
  401a74:	2000a5d8 	.word	0x2000a5d8
  401a78:	2000a5e0 	.word	0x2000a5e0
  401a7c:	2000a5d0 	.word	0x2000a5d0
  401a80:	00400949 	.word	0x00400949
  401a84:	2000a4f0 	.word	0x2000a4f0
  401a88:	2000a4ec 	.word	0x2000a4ec

00401a8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  401a8c:	b580      	push	{r7, lr}
  401a8e:	b084      	sub	sp, #16
  401a90:	af00      	add	r7, sp, #0
  401a92:	6078      	str	r0, [r7, #4]
  401a94:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  401a96:	687b      	ldr	r3, [r7, #4]
  401a98:	2b00      	cmp	r3, #0
  401a9a:	d103      	bne.n	401aa4 <vTaskPlaceOnEventList+0x18>
  401a9c:	4b14      	ldr	r3, [pc, #80]	; (401af0 <vTaskPlaceOnEventList+0x64>)
  401a9e:	4798      	blx	r3
  401aa0:	bf00      	nop
  401aa2:	e7fd      	b.n	401aa0 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  401aa4:	4b13      	ldr	r3, [pc, #76]	; (401af4 <vTaskPlaceOnEventList+0x68>)
  401aa6:	681b      	ldr	r3, [r3, #0]
  401aa8:	3318      	adds	r3, #24
  401aaa:	4619      	mov	r1, r3
  401aac:	6878      	ldr	r0, [r7, #4]
  401aae:	4b12      	ldr	r3, [pc, #72]	; (401af8 <vTaskPlaceOnEventList+0x6c>)
  401ab0:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401ab2:	4b10      	ldr	r3, [pc, #64]	; (401af4 <vTaskPlaceOnEventList+0x68>)
  401ab4:	681b      	ldr	r3, [r3, #0]
  401ab6:	3304      	adds	r3, #4
  401ab8:	4618      	mov	r0, r3
  401aba:	4b10      	ldr	r3, [pc, #64]	; (401afc <vTaskPlaceOnEventList+0x70>)
  401abc:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401abe:	683b      	ldr	r3, [r7, #0]
  401ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ac4:	d107      	bne.n	401ad6 <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401ac6:	4b0b      	ldr	r3, [pc, #44]	; (401af4 <vTaskPlaceOnEventList+0x68>)
  401ac8:	681b      	ldr	r3, [r3, #0]
  401aca:	3304      	adds	r3, #4
  401acc:	4619      	mov	r1, r3
  401ace:	480c      	ldr	r0, [pc, #48]	; (401b00 <vTaskPlaceOnEventList+0x74>)
  401ad0:	4b0c      	ldr	r3, [pc, #48]	; (401b04 <vTaskPlaceOnEventList+0x78>)
  401ad2:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  401ad4:	e007      	b.n	401ae6 <vTaskPlaceOnEventList+0x5a>
			xTimeToWake = xTickCount + xTicksToWait;
  401ad6:	4b0c      	ldr	r3, [pc, #48]	; (401b08 <vTaskPlaceOnEventList+0x7c>)
  401ad8:	681a      	ldr	r2, [r3, #0]
  401ada:	683b      	ldr	r3, [r7, #0]
  401adc:	4413      	add	r3, r2
  401ade:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401ae0:	68f8      	ldr	r0, [r7, #12]
  401ae2:	4b0a      	ldr	r3, [pc, #40]	; (401b0c <vTaskPlaceOnEventList+0x80>)
  401ae4:	4798      	blx	r3
}
  401ae6:	bf00      	nop
  401ae8:	3710      	adds	r7, #16
  401aea:	46bd      	mov	sp, r7
  401aec:	bd80      	pop	{r7, pc}
  401aee:	bf00      	nop
  401af0:	00400949 	.word	0x00400949
  401af4:	2000a4ec 	.word	0x2000a4ec
  401af8:	00400683 	.word	0x00400683
  401afc:	004006f5 	.word	0x004006f5
  401b00:	2000a5b0 	.word	0x2000a5b0
  401b04:	00400633 	.word	0x00400633
  401b08:	2000a5c8 	.word	0x2000a5c8
  401b0c:	00401ee9 	.word	0x00401ee9

00401b10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  401b10:	b580      	push	{r7, lr}
  401b12:	b084      	sub	sp, #16
  401b14:	af00      	add	r7, sp, #0
  401b16:	6078      	str	r0, [r7, #4]
  401b18:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  401b1a:	687b      	ldr	r3, [r7, #4]
  401b1c:	2b00      	cmp	r3, #0
  401b1e:	d103      	bne.n	401b28 <vTaskPlaceOnEventListRestricted+0x18>
  401b20:	4b0e      	ldr	r3, [pc, #56]	; (401b5c <vTaskPlaceOnEventListRestricted+0x4c>)
  401b22:	4798      	blx	r3
  401b24:	bf00      	nop
  401b26:	e7fd      	b.n	401b24 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  401b28:	4b0d      	ldr	r3, [pc, #52]	; (401b60 <vTaskPlaceOnEventListRestricted+0x50>)
  401b2a:	681b      	ldr	r3, [r3, #0]
  401b2c:	3318      	adds	r3, #24
  401b2e:	4619      	mov	r1, r3
  401b30:	6878      	ldr	r0, [r7, #4]
  401b32:	4b0c      	ldr	r3, [pc, #48]	; (401b64 <vTaskPlaceOnEventListRestricted+0x54>)
  401b34:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401b36:	4b0a      	ldr	r3, [pc, #40]	; (401b60 <vTaskPlaceOnEventListRestricted+0x50>)
  401b38:	681b      	ldr	r3, [r3, #0]
  401b3a:	3304      	adds	r3, #4
  401b3c:	4618      	mov	r0, r3
  401b3e:	4b0a      	ldr	r3, [pc, #40]	; (401b68 <vTaskPlaceOnEventListRestricted+0x58>)
  401b40:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  401b42:	4b0a      	ldr	r3, [pc, #40]	; (401b6c <vTaskPlaceOnEventListRestricted+0x5c>)
  401b44:	681a      	ldr	r2, [r3, #0]
  401b46:	683b      	ldr	r3, [r7, #0]
  401b48:	4413      	add	r3, r2
  401b4a:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  401b4c:	68f8      	ldr	r0, [r7, #12]
  401b4e:	4b08      	ldr	r3, [pc, #32]	; (401b70 <vTaskPlaceOnEventListRestricted+0x60>)
  401b50:	4798      	blx	r3
	}
  401b52:	bf00      	nop
  401b54:	3710      	adds	r7, #16
  401b56:	46bd      	mov	sp, r7
  401b58:	bd80      	pop	{r7, pc}
  401b5a:	bf00      	nop
  401b5c:	00400949 	.word	0x00400949
  401b60:	2000a4ec 	.word	0x2000a4ec
  401b64:	00400633 	.word	0x00400633
  401b68:	004006f5 	.word	0x004006f5
  401b6c:	2000a5c8 	.word	0x2000a5c8
  401b70:	00401ee9 	.word	0x00401ee9

00401b74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  401b74:	b580      	push	{r7, lr}
  401b76:	b084      	sub	sp, #16
  401b78:	af00      	add	r7, sp, #0
  401b7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401b7c:	687b      	ldr	r3, [r7, #4]
  401b7e:	68db      	ldr	r3, [r3, #12]
  401b80:	68db      	ldr	r3, [r3, #12]
  401b82:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  401b84:	68bb      	ldr	r3, [r7, #8]
  401b86:	2b00      	cmp	r3, #0
  401b88:	d103      	bne.n	401b92 <xTaskRemoveFromEventList+0x1e>
  401b8a:	4b21      	ldr	r3, [pc, #132]	; (401c10 <xTaskRemoveFromEventList+0x9c>)
  401b8c:	4798      	blx	r3
  401b8e:	bf00      	nop
  401b90:	e7fd      	b.n	401b8e <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401b92:	68bb      	ldr	r3, [r7, #8]
  401b94:	3318      	adds	r3, #24
  401b96:	4618      	mov	r0, r3
  401b98:	4b1e      	ldr	r3, [pc, #120]	; (401c14 <xTaskRemoveFromEventList+0xa0>)
  401b9a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401b9c:	4b1e      	ldr	r3, [pc, #120]	; (401c18 <xTaskRemoveFromEventList+0xa4>)
  401b9e:	681b      	ldr	r3, [r3, #0]
  401ba0:	2b00      	cmp	r3, #0
  401ba2:	d11d      	bne.n	401be0 <xTaskRemoveFromEventList+0x6c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401ba4:	68bb      	ldr	r3, [r7, #8]
  401ba6:	3304      	adds	r3, #4
  401ba8:	4618      	mov	r0, r3
  401baa:	4b1a      	ldr	r3, [pc, #104]	; (401c14 <xTaskRemoveFromEventList+0xa0>)
  401bac:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  401bae:	68bb      	ldr	r3, [r7, #8]
  401bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401bb2:	4b1a      	ldr	r3, [pc, #104]	; (401c1c <xTaskRemoveFromEventList+0xa8>)
  401bb4:	681b      	ldr	r3, [r3, #0]
  401bb6:	429a      	cmp	r2, r3
  401bb8:	d903      	bls.n	401bc2 <xTaskRemoveFromEventList+0x4e>
  401bba:	68bb      	ldr	r3, [r7, #8]
  401bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401bbe:	4a17      	ldr	r2, [pc, #92]	; (401c1c <xTaskRemoveFromEventList+0xa8>)
  401bc0:	6013      	str	r3, [r2, #0]
  401bc2:	68bb      	ldr	r3, [r7, #8]
  401bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401bc6:	4613      	mov	r3, r2
  401bc8:	009b      	lsls	r3, r3, #2
  401bca:	4413      	add	r3, r2
  401bcc:	009b      	lsls	r3, r3, #2
  401bce:	4a14      	ldr	r2, [pc, #80]	; (401c20 <xTaskRemoveFromEventList+0xac>)
  401bd0:	441a      	add	r2, r3
  401bd2:	68bb      	ldr	r3, [r7, #8]
  401bd4:	3304      	adds	r3, #4
  401bd6:	4619      	mov	r1, r3
  401bd8:	4610      	mov	r0, r2
  401bda:	4b12      	ldr	r3, [pc, #72]	; (401c24 <xTaskRemoveFromEventList+0xb0>)
  401bdc:	4798      	blx	r3
  401bde:	e005      	b.n	401bec <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401be0:	68bb      	ldr	r3, [r7, #8]
  401be2:	3318      	adds	r3, #24
  401be4:	4619      	mov	r1, r3
  401be6:	4810      	ldr	r0, [pc, #64]	; (401c28 <xTaskRemoveFromEventList+0xb4>)
  401be8:	4b0e      	ldr	r3, [pc, #56]	; (401c24 <xTaskRemoveFromEventList+0xb0>)
  401bea:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401bec:	68bb      	ldr	r3, [r7, #8]
  401bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401bf0:	4b0e      	ldr	r3, [pc, #56]	; (401c2c <xTaskRemoveFromEventList+0xb8>)
  401bf2:	681b      	ldr	r3, [r3, #0]
  401bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401bf6:	429a      	cmp	r2, r3
  401bf8:	d302      	bcc.n	401c00 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  401bfa:	2301      	movs	r3, #1
  401bfc:	60fb      	str	r3, [r7, #12]
  401bfe:	e001      	b.n	401c04 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
  401c00:	2300      	movs	r3, #0
  401c02:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  401c04:	68fb      	ldr	r3, [r7, #12]
}
  401c06:	4618      	mov	r0, r3
  401c08:	3710      	adds	r7, #16
  401c0a:	46bd      	mov	sp, r7
  401c0c:	bd80      	pop	{r7, pc}
  401c0e:	bf00      	nop
  401c10:	00400949 	.word	0x00400949
  401c14:	004006f5 	.word	0x004006f5
  401c18:	2000a5d8 	.word	0x2000a5d8
  401c1c:	2000a5d0 	.word	0x2000a5d0
  401c20:	2000a4f0 	.word	0x2000a4f0
  401c24:	00400633 	.word	0x00400633
  401c28:	2000a584 	.word	0x2000a584
  401c2c:	2000a4ec 	.word	0x2000a4ec

00401c30 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  401c30:	b580      	push	{r7, lr}
  401c32:	b082      	sub	sp, #8
  401c34:	af00      	add	r7, sp, #0
  401c36:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  401c38:	687b      	ldr	r3, [r7, #4]
  401c3a:	2b00      	cmp	r3, #0
  401c3c:	d103      	bne.n	401c46 <vTaskSetTimeOutState+0x16>
  401c3e:	4b08      	ldr	r3, [pc, #32]	; (401c60 <vTaskSetTimeOutState+0x30>)
  401c40:	4798      	blx	r3
  401c42:	bf00      	nop
  401c44:	e7fd      	b.n	401c42 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401c46:	4b07      	ldr	r3, [pc, #28]	; (401c64 <vTaskSetTimeOutState+0x34>)
  401c48:	681a      	ldr	r2, [r3, #0]
  401c4a:	687b      	ldr	r3, [r7, #4]
  401c4c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401c4e:	4b06      	ldr	r3, [pc, #24]	; (401c68 <vTaskSetTimeOutState+0x38>)
  401c50:	681a      	ldr	r2, [r3, #0]
  401c52:	687b      	ldr	r3, [r7, #4]
  401c54:	605a      	str	r2, [r3, #4]
}
  401c56:	bf00      	nop
  401c58:	3708      	adds	r7, #8
  401c5a:	46bd      	mov	sp, r7
  401c5c:	bd80      	pop	{r7, pc}
  401c5e:	bf00      	nop
  401c60:	00400949 	.word	0x00400949
  401c64:	2000a5e4 	.word	0x2000a5e4
  401c68:	2000a5c8 	.word	0x2000a5c8

00401c6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  401c6c:	b580      	push	{r7, lr}
  401c6e:	b084      	sub	sp, #16
  401c70:	af00      	add	r7, sp, #0
  401c72:	6078      	str	r0, [r7, #4]
  401c74:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  401c76:	687b      	ldr	r3, [r7, #4]
  401c78:	2b00      	cmp	r3, #0
  401c7a:	d103      	bne.n	401c84 <xTaskCheckForTimeOut+0x18>
  401c7c:	4b22      	ldr	r3, [pc, #136]	; (401d08 <xTaskCheckForTimeOut+0x9c>)
  401c7e:	4798      	blx	r3
  401c80:	bf00      	nop
  401c82:	e7fd      	b.n	401c80 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
  401c84:	683b      	ldr	r3, [r7, #0]
  401c86:	2b00      	cmp	r3, #0
  401c88:	d103      	bne.n	401c92 <xTaskCheckForTimeOut+0x26>
  401c8a:	4b1f      	ldr	r3, [pc, #124]	; (401d08 <xTaskCheckForTimeOut+0x9c>)
  401c8c:	4798      	blx	r3
  401c8e:	bf00      	nop
  401c90:	e7fd      	b.n	401c8e <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
  401c92:	4b1e      	ldr	r3, [pc, #120]	; (401d0c <xTaskCheckForTimeOut+0xa0>)
  401c94:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  401c96:	683b      	ldr	r3, [r7, #0]
  401c98:	681b      	ldr	r3, [r3, #0]
  401c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c9e:	d102      	bne.n	401ca6 <xTaskCheckForTimeOut+0x3a>
			{
				xReturn = pdFALSE;
  401ca0:	2300      	movs	r3, #0
  401ca2:	60fb      	str	r3, [r7, #12]
  401ca4:	e029      	b.n	401cfa <xTaskCheckForTimeOut+0x8e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  401ca6:	687b      	ldr	r3, [r7, #4]
  401ca8:	681a      	ldr	r2, [r3, #0]
  401caa:	4b19      	ldr	r3, [pc, #100]	; (401d10 <xTaskCheckForTimeOut+0xa4>)
  401cac:	681b      	ldr	r3, [r3, #0]
  401cae:	429a      	cmp	r2, r3
  401cb0:	d008      	beq.n	401cc4 <xTaskCheckForTimeOut+0x58>
  401cb2:	687b      	ldr	r3, [r7, #4]
  401cb4:	685a      	ldr	r2, [r3, #4]
  401cb6:	4b17      	ldr	r3, [pc, #92]	; (401d14 <xTaskCheckForTimeOut+0xa8>)
  401cb8:	681b      	ldr	r3, [r3, #0]
  401cba:	429a      	cmp	r2, r3
  401cbc:	d802      	bhi.n	401cc4 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  401cbe:	2301      	movs	r3, #1
  401cc0:	60fb      	str	r3, [r7, #12]
  401cc2:	e01a      	b.n	401cfa <xTaskCheckForTimeOut+0x8e>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  401cc4:	4b13      	ldr	r3, [pc, #76]	; (401d14 <xTaskCheckForTimeOut+0xa8>)
  401cc6:	681a      	ldr	r2, [r3, #0]
  401cc8:	687b      	ldr	r3, [r7, #4]
  401cca:	685b      	ldr	r3, [r3, #4]
  401ccc:	1ad2      	subs	r2, r2, r3
  401cce:	683b      	ldr	r3, [r7, #0]
  401cd0:	681b      	ldr	r3, [r3, #0]
  401cd2:	429a      	cmp	r2, r3
  401cd4:	d20f      	bcs.n	401cf6 <xTaskCheckForTimeOut+0x8a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  401cd6:	4b0f      	ldr	r3, [pc, #60]	; (401d14 <xTaskCheckForTimeOut+0xa8>)
  401cd8:	681a      	ldr	r2, [r3, #0]
  401cda:	687b      	ldr	r3, [r7, #4]
  401cdc:	685b      	ldr	r3, [r3, #4]
  401cde:	1ad3      	subs	r3, r2, r3
  401ce0:	683a      	ldr	r2, [r7, #0]
  401ce2:	6812      	ldr	r2, [r2, #0]
  401ce4:	1ad2      	subs	r2, r2, r3
  401ce6:	683b      	ldr	r3, [r7, #0]
  401ce8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401cea:	6878      	ldr	r0, [r7, #4]
  401cec:	4b0a      	ldr	r3, [pc, #40]	; (401d18 <xTaskCheckForTimeOut+0xac>)
  401cee:	4798      	blx	r3
			xReturn = pdFALSE;
  401cf0:	2300      	movs	r3, #0
  401cf2:	60fb      	str	r3, [r7, #12]
  401cf4:	e001      	b.n	401cfa <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			xReturn = pdTRUE;
  401cf6:	2301      	movs	r3, #1
  401cf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  401cfa:	4b08      	ldr	r3, [pc, #32]	; (401d1c <xTaskCheckForTimeOut+0xb0>)
  401cfc:	4798      	blx	r3

	return xReturn;
  401cfe:	68fb      	ldr	r3, [r7, #12]
}
  401d00:	4618      	mov	r0, r3
  401d02:	3710      	adds	r7, #16
  401d04:	46bd      	mov	sp, r7
  401d06:	bd80      	pop	{r7, pc}
  401d08:	00400949 	.word	0x00400949
  401d0c:	00400901 	.word	0x00400901
  401d10:	2000a5e4 	.word	0x2000a5e4
  401d14:	2000a5c8 	.word	0x2000a5c8
  401d18:	00401c31 	.word	0x00401c31
  401d1c:	00400921 	.word	0x00400921

00401d20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  401d20:	b480      	push	{r7}
  401d22:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  401d24:	4b03      	ldr	r3, [pc, #12]	; (401d34 <vTaskMissedYield+0x14>)
  401d26:	2201      	movs	r2, #1
  401d28:	601a      	str	r2, [r3, #0]
}
  401d2a:	bf00      	nop
  401d2c:	46bd      	mov	sp, r7
  401d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d32:	4770      	bx	lr
  401d34:	2000a5e0 	.word	0x2000a5e0

00401d38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401d38:	b580      	push	{r7, lr}
  401d3a:	b082      	sub	sp, #8
  401d3c:	af00      	add	r7, sp, #0
  401d3e:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  401d40:	4b04      	ldr	r3, [pc, #16]	; (401d54 <prvIdleTask+0x1c>)
  401d42:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  401d44:	4b04      	ldr	r3, [pc, #16]	; (401d58 <prvIdleTask+0x20>)
  401d46:	681b      	ldr	r3, [r3, #0]
  401d48:	2b01      	cmp	r3, #1
  401d4a:	d9f9      	bls.n	401d40 <prvIdleTask+0x8>
			{
				taskYIELD();
  401d4c:	4b03      	ldr	r3, [pc, #12]	; (401d5c <prvIdleTask+0x24>)
  401d4e:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
  401d50:	e7f6      	b.n	401d40 <prvIdleTask+0x8>
  401d52:	bf00      	nop
  401d54:	00401e59 	.word	0x00401e59
  401d58:	2000a4f0 	.word	0x2000a4f0
  401d5c:	004008e5 	.word	0x004008e5

00401d60 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  401d60:	b580      	push	{r7, lr}
  401d62:	b084      	sub	sp, #16
  401d64:	af00      	add	r7, sp, #0
  401d66:	60f8      	str	r0, [r7, #12]
  401d68:	60b9      	str	r1, [r7, #8]
  401d6a:	607a      	str	r2, [r7, #4]
  401d6c:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  401d6e:	68fb      	ldr	r3, [r7, #12]
  401d70:	3334      	adds	r3, #52	; 0x34
  401d72:	220a      	movs	r2, #10
  401d74:	68b9      	ldr	r1, [r7, #8]
  401d76:	4618      	mov	r0, r3
  401d78:	4b14      	ldr	r3, [pc, #80]	; (401dcc <prvInitialiseTCBVariables+0x6c>)
  401d7a:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  401d7c:	68fb      	ldr	r3, [r7, #12]
  401d7e:	2200      	movs	r2, #0
  401d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  401d84:	687b      	ldr	r3, [r7, #4]
  401d86:	2b04      	cmp	r3, #4
  401d88:	d901      	bls.n	401d8e <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  401d8a:	2304      	movs	r3, #4
  401d8c:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  401d8e:	68fb      	ldr	r3, [r7, #12]
  401d90:	687a      	ldr	r2, [r7, #4]
  401d92:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  401d94:	68fb      	ldr	r3, [r7, #12]
  401d96:	687a      	ldr	r2, [r7, #4]
  401d98:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401d9a:	68fb      	ldr	r3, [r7, #12]
  401d9c:	3304      	adds	r3, #4
  401d9e:	4618      	mov	r0, r3
  401da0:	4b0b      	ldr	r3, [pc, #44]	; (401dd0 <prvInitialiseTCBVariables+0x70>)
  401da2:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401da4:	68fb      	ldr	r3, [r7, #12]
  401da6:	3318      	adds	r3, #24
  401da8:	4618      	mov	r0, r3
  401daa:	4b09      	ldr	r3, [pc, #36]	; (401dd0 <prvInitialiseTCBVariables+0x70>)
  401dac:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401dae:	68fb      	ldr	r3, [r7, #12]
  401db0:	68fa      	ldr	r2, [r7, #12]
  401db2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  401db4:	687b      	ldr	r3, [r7, #4]
  401db6:	f1c3 0205 	rsb	r2, r3, #5
  401dba:	68fb      	ldr	r3, [r7, #12]
  401dbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401dbe:	68fb      	ldr	r3, [r7, #12]
  401dc0:	68fa      	ldr	r2, [r7, #12]
  401dc2:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  401dc4:	bf00      	nop
  401dc6:	3710      	adds	r7, #16
  401dc8:	46bd      	mov	sp, r7
  401dca:	bd80      	pop	{r7, pc}
  401dcc:	00404781 	.word	0x00404781
  401dd0:	00400619 	.word	0x00400619

00401dd4 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  401dd4:	b580      	push	{r7, lr}
  401dd6:	b082      	sub	sp, #8
  401dd8:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  401dda:	2300      	movs	r3, #0
  401ddc:	607b      	str	r3, [r7, #4]
  401dde:	e00c      	b.n	401dfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  401de0:	687a      	ldr	r2, [r7, #4]
  401de2:	4613      	mov	r3, r2
  401de4:	009b      	lsls	r3, r3, #2
  401de6:	4413      	add	r3, r2
  401de8:	009b      	lsls	r3, r3, #2
  401dea:	4a12      	ldr	r2, [pc, #72]	; (401e34 <prvInitialiseTaskLists+0x60>)
  401dec:	4413      	add	r3, r2
  401dee:	4618      	mov	r0, r3
  401df0:	4b11      	ldr	r3, [pc, #68]	; (401e38 <prvInitialiseTaskLists+0x64>)
  401df2:	4798      	blx	r3
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  401df4:	687b      	ldr	r3, [r7, #4]
  401df6:	3301      	adds	r3, #1
  401df8:	607b      	str	r3, [r7, #4]
  401dfa:	687b      	ldr	r3, [r7, #4]
  401dfc:	2b04      	cmp	r3, #4
  401dfe:	d9ef      	bls.n	401de0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  401e00:	480e      	ldr	r0, [pc, #56]	; (401e3c <prvInitialiseTaskLists+0x68>)
  401e02:	4b0d      	ldr	r3, [pc, #52]	; (401e38 <prvInitialiseTaskLists+0x64>)
  401e04:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  401e06:	480e      	ldr	r0, [pc, #56]	; (401e40 <prvInitialiseTaskLists+0x6c>)
  401e08:	4b0b      	ldr	r3, [pc, #44]	; (401e38 <prvInitialiseTaskLists+0x64>)
  401e0a:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  401e0c:	480d      	ldr	r0, [pc, #52]	; (401e44 <prvInitialiseTaskLists+0x70>)
  401e0e:	4b0a      	ldr	r3, [pc, #40]	; (401e38 <prvInitialiseTaskLists+0x64>)
  401e10:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  401e12:	480d      	ldr	r0, [pc, #52]	; (401e48 <prvInitialiseTaskLists+0x74>)
  401e14:	4b08      	ldr	r3, [pc, #32]	; (401e38 <prvInitialiseTaskLists+0x64>)
  401e16:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  401e18:	480c      	ldr	r0, [pc, #48]	; (401e4c <prvInitialiseTaskLists+0x78>)
  401e1a:	4b07      	ldr	r3, [pc, #28]	; (401e38 <prvInitialiseTaskLists+0x64>)
  401e1c:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401e1e:	4b0c      	ldr	r3, [pc, #48]	; (401e50 <prvInitialiseTaskLists+0x7c>)
  401e20:	4a06      	ldr	r2, [pc, #24]	; (401e3c <prvInitialiseTaskLists+0x68>)
  401e22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401e24:	4b0b      	ldr	r3, [pc, #44]	; (401e54 <prvInitialiseTaskLists+0x80>)
  401e26:	4a06      	ldr	r2, [pc, #24]	; (401e40 <prvInitialiseTaskLists+0x6c>)
  401e28:	601a      	str	r2, [r3, #0]
}
  401e2a:	bf00      	nop
  401e2c:	3708      	adds	r7, #8
  401e2e:	46bd      	mov	sp, r7
  401e30:	bd80      	pop	{r7, pc}
  401e32:	bf00      	nop
  401e34:	2000a4f0 	.word	0x2000a4f0
  401e38:	004005d9 	.word	0x004005d9
  401e3c:	2000a554 	.word	0x2000a554
  401e40:	2000a568 	.word	0x2000a568
  401e44:	2000a584 	.word	0x2000a584
  401e48:	2000a598 	.word	0x2000a598
  401e4c:	2000a5b0 	.word	0x2000a5b0
  401e50:	2000a57c 	.word	0x2000a57c
  401e54:	2000a580 	.word	0x2000a580

00401e58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  401e58:	b580      	push	{r7, lr}
  401e5a:	b082      	sub	sp, #8
  401e5c:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401e5e:	e028      	b.n	401eb2 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  401e60:	4b18      	ldr	r3, [pc, #96]	; (401ec4 <prvCheckTasksWaitingTermination+0x6c>)
  401e62:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401e64:	4b18      	ldr	r3, [pc, #96]	; (401ec8 <prvCheckTasksWaitingTermination+0x70>)
  401e66:	681b      	ldr	r3, [r3, #0]
  401e68:	2b00      	cmp	r3, #0
  401e6a:	bf0c      	ite	eq
  401e6c:	2301      	moveq	r3, #1
  401e6e:	2300      	movne	r3, #0
  401e70:	b2db      	uxtb	r3, r3
  401e72:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  401e74:	4b15      	ldr	r3, [pc, #84]	; (401ecc <prvCheckTasksWaitingTermination+0x74>)
  401e76:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  401e78:	687b      	ldr	r3, [r7, #4]
  401e7a:	2b00      	cmp	r3, #0
  401e7c:	d119      	bne.n	401eb2 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  401e7e:	4b14      	ldr	r3, [pc, #80]	; (401ed0 <prvCheckTasksWaitingTermination+0x78>)
  401e80:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  401e82:	4b11      	ldr	r3, [pc, #68]	; (401ec8 <prvCheckTasksWaitingTermination+0x70>)
  401e84:	68db      	ldr	r3, [r3, #12]
  401e86:	68db      	ldr	r3, [r3, #12]
  401e88:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401e8a:	683b      	ldr	r3, [r7, #0]
  401e8c:	3304      	adds	r3, #4
  401e8e:	4618      	mov	r0, r3
  401e90:	4b10      	ldr	r3, [pc, #64]	; (401ed4 <prvCheckTasksWaitingTermination+0x7c>)
  401e92:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401e94:	4b10      	ldr	r3, [pc, #64]	; (401ed8 <prvCheckTasksWaitingTermination+0x80>)
  401e96:	681b      	ldr	r3, [r3, #0]
  401e98:	3b01      	subs	r3, #1
  401e9a:	4a0f      	ldr	r2, [pc, #60]	; (401ed8 <prvCheckTasksWaitingTermination+0x80>)
  401e9c:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401e9e:	4b0f      	ldr	r3, [pc, #60]	; (401edc <prvCheckTasksWaitingTermination+0x84>)
  401ea0:	681b      	ldr	r3, [r3, #0]
  401ea2:	3b01      	subs	r3, #1
  401ea4:	4a0d      	ldr	r2, [pc, #52]	; (401edc <prvCheckTasksWaitingTermination+0x84>)
  401ea6:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
  401ea8:	4b0d      	ldr	r3, [pc, #52]	; (401ee0 <prvCheckTasksWaitingTermination+0x88>)
  401eaa:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  401eac:	6838      	ldr	r0, [r7, #0]
  401eae:	4b0d      	ldr	r3, [pc, #52]	; (401ee4 <prvCheckTasksWaitingTermination+0x8c>)
  401eb0:	4798      	blx	r3
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401eb2:	4b0a      	ldr	r3, [pc, #40]	; (401edc <prvCheckTasksWaitingTermination+0x84>)
  401eb4:	681b      	ldr	r3, [r3, #0]
  401eb6:	2b00      	cmp	r3, #0
  401eb8:	d1d2      	bne.n	401e60 <prvCheckTasksWaitingTermination+0x8>
			}
		}
	}
	#endif
}
  401eba:	bf00      	nop
  401ebc:	3708      	adds	r7, #8
  401ebe:	46bd      	mov	sp, r7
  401ec0:	bd80      	pop	{r7, pc}
  401ec2:	bf00      	nop
  401ec4:	00401735 	.word	0x00401735
  401ec8:	2000a598 	.word	0x2000a598
  401ecc:	00401751 	.word	0x00401751
  401ed0:	00400901 	.word	0x00400901
  401ed4:	004006f5 	.word	0x004006f5
  401ed8:	2000a5c4 	.word	0x2000a5c4
  401edc:	2000a5ac 	.word	0x2000a5ac
  401ee0:	00400921 	.word	0x00400921
  401ee4:	00401fc9 	.word	0x00401fc9

00401ee8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  401ee8:	b580      	push	{r7, lr}
  401eea:	b082      	sub	sp, #8
  401eec:	af00      	add	r7, sp, #0
  401eee:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401ef0:	4b13      	ldr	r3, [pc, #76]	; (401f40 <prvAddCurrentTaskToDelayedList+0x58>)
  401ef2:	681b      	ldr	r3, [r3, #0]
  401ef4:	687a      	ldr	r2, [r7, #4]
  401ef6:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  401ef8:	4b12      	ldr	r3, [pc, #72]	; (401f44 <prvAddCurrentTaskToDelayedList+0x5c>)
  401efa:	681b      	ldr	r3, [r3, #0]
  401efc:	687a      	ldr	r2, [r7, #4]
  401efe:	429a      	cmp	r2, r3
  401f00:	d209      	bcs.n	401f16 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401f02:	4b11      	ldr	r3, [pc, #68]	; (401f48 <prvAddCurrentTaskToDelayedList+0x60>)
  401f04:	681a      	ldr	r2, [r3, #0]
  401f06:	4b0e      	ldr	r3, [pc, #56]	; (401f40 <prvAddCurrentTaskToDelayedList+0x58>)
  401f08:	681b      	ldr	r3, [r3, #0]
  401f0a:	3304      	adds	r3, #4
  401f0c:	4619      	mov	r1, r3
  401f0e:	4610      	mov	r0, r2
  401f10:	4b0e      	ldr	r3, [pc, #56]	; (401f4c <prvAddCurrentTaskToDelayedList+0x64>)
  401f12:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
  401f14:	e010      	b.n	401f38 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401f16:	4b0e      	ldr	r3, [pc, #56]	; (401f50 <prvAddCurrentTaskToDelayedList+0x68>)
  401f18:	681a      	ldr	r2, [r3, #0]
  401f1a:	4b09      	ldr	r3, [pc, #36]	; (401f40 <prvAddCurrentTaskToDelayedList+0x58>)
  401f1c:	681b      	ldr	r3, [r3, #0]
  401f1e:	3304      	adds	r3, #4
  401f20:	4619      	mov	r1, r3
  401f22:	4610      	mov	r0, r2
  401f24:	4b09      	ldr	r3, [pc, #36]	; (401f4c <prvAddCurrentTaskToDelayedList+0x64>)
  401f26:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401f28:	4b0a      	ldr	r3, [pc, #40]	; (401f54 <prvAddCurrentTaskToDelayedList+0x6c>)
  401f2a:	681b      	ldr	r3, [r3, #0]
  401f2c:	687a      	ldr	r2, [r7, #4]
  401f2e:	429a      	cmp	r2, r3
  401f30:	d202      	bcs.n	401f38 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
  401f32:	4a08      	ldr	r2, [pc, #32]	; (401f54 <prvAddCurrentTaskToDelayedList+0x6c>)
  401f34:	687b      	ldr	r3, [r7, #4]
  401f36:	6013      	str	r3, [r2, #0]
}
  401f38:	bf00      	nop
  401f3a:	3708      	adds	r7, #8
  401f3c:	46bd      	mov	sp, r7
  401f3e:	bd80      	pop	{r7, pc}
  401f40:	2000a4ec 	.word	0x2000a4ec
  401f44:	2000a5c8 	.word	0x2000a5c8
  401f48:	2000a580 	.word	0x2000a580
  401f4c:	00400683 	.word	0x00400683
  401f50:	2000a57c 	.word	0x2000a57c
  401f54:	20000018 	.word	0x20000018

00401f58 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  401f58:	b580      	push	{r7, lr}
  401f5a:	b084      	sub	sp, #16
  401f5c:	af00      	add	r7, sp, #0
  401f5e:	4603      	mov	r3, r0
  401f60:	6039      	str	r1, [r7, #0]
  401f62:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  401f64:	204c      	movs	r0, #76	; 0x4c
  401f66:	4b15      	ldr	r3, [pc, #84]	; (401fbc <prvAllocateTCBAndStack+0x64>)
  401f68:	4798      	blx	r3
  401f6a:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  401f6c:	68fb      	ldr	r3, [r7, #12]
  401f6e:	2b00      	cmp	r3, #0
  401f70:	d01e      	beq.n	401fb0 <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  401f72:	683b      	ldr	r3, [r7, #0]
  401f74:	2b00      	cmp	r3, #0
  401f76:	d106      	bne.n	401f86 <prvAllocateTCBAndStack+0x2e>
  401f78:	88fb      	ldrh	r3, [r7, #6]
  401f7a:	009b      	lsls	r3, r3, #2
  401f7c:	4618      	mov	r0, r3
  401f7e:	4b0f      	ldr	r3, [pc, #60]	; (401fbc <prvAllocateTCBAndStack+0x64>)
  401f80:	4798      	blx	r3
  401f82:	4603      	mov	r3, r0
  401f84:	e000      	b.n	401f88 <prvAllocateTCBAndStack+0x30>
  401f86:	683b      	ldr	r3, [r7, #0]
  401f88:	68fa      	ldr	r2, [r7, #12]
  401f8a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  401f8c:	68fb      	ldr	r3, [r7, #12]
  401f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f90:	2b00      	cmp	r3, #0
  401f92:	d105      	bne.n	401fa0 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  401f94:	68f8      	ldr	r0, [r7, #12]
  401f96:	4b0a      	ldr	r3, [pc, #40]	; (401fc0 <prvAllocateTCBAndStack+0x68>)
  401f98:	4798      	blx	r3
			pxNewTCB = NULL;
  401f9a:	2300      	movs	r3, #0
  401f9c:	60fb      	str	r3, [r7, #12]
  401f9e:	e007      	b.n	401fb0 <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  401fa0:	68fb      	ldr	r3, [r7, #12]
  401fa2:	6b18      	ldr	r0, [r3, #48]	; 0x30
  401fa4:	88fb      	ldrh	r3, [r7, #6]
  401fa6:	009b      	lsls	r3, r3, #2
  401fa8:	461a      	mov	r2, r3
  401faa:	21a5      	movs	r1, #165	; 0xa5
  401fac:	4b05      	ldr	r3, [pc, #20]	; (401fc4 <prvAllocateTCBAndStack+0x6c>)
  401fae:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  401fb0:	68fb      	ldr	r3, [r7, #12]
}
  401fb2:	4618      	mov	r0, r3
  401fb4:	3710      	adds	r7, #16
  401fb6:	46bd      	mov	sp, r7
  401fb8:	bd80      	pop	{r7, pc}
  401fba:	bf00      	nop
  401fbc:	00400a31 	.word	0x00400a31
  401fc0:	00400b2d 	.word	0x00400b2d
  401fc4:	004046e5 	.word	0x004046e5

00401fc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  401fc8:	b580      	push	{r7, lr}
  401fca:	b082      	sub	sp, #8
  401fcc:	af00      	add	r7, sp, #0
  401fce:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  401fd0:	687b      	ldr	r3, [r7, #4]
  401fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401fd4:	4618      	mov	r0, r3
  401fd6:	4b04      	ldr	r3, [pc, #16]	; (401fe8 <prvDeleteTCB+0x20>)
  401fd8:	4798      	blx	r3
		vPortFree( pxTCB );
  401fda:	6878      	ldr	r0, [r7, #4]
  401fdc:	4b02      	ldr	r3, [pc, #8]	; (401fe8 <prvDeleteTCB+0x20>)
  401fde:	4798      	blx	r3
	}
  401fe0:	bf00      	nop
  401fe2:	3708      	adds	r7, #8
  401fe4:	46bd      	mov	sp, r7
  401fe6:	bd80      	pop	{r7, pc}
  401fe8:	00400b2d 	.word	0x00400b2d

00401fec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  401fec:	b480      	push	{r7}
  401fee:	b083      	sub	sp, #12
  401ff0:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  401ff2:	4b05      	ldr	r3, [pc, #20]	; (402008 <xTaskGetCurrentTaskHandle+0x1c>)
  401ff4:	681b      	ldr	r3, [r3, #0]
  401ff6:	607b      	str	r3, [r7, #4]

		return xReturn;
  401ff8:	687b      	ldr	r3, [r7, #4]
	}
  401ffa:	4618      	mov	r0, r3
  401ffc:	370c      	adds	r7, #12
  401ffe:	46bd      	mov	sp, r7
  402000:	f85d 7b04 	ldr.w	r7, [sp], #4
  402004:	4770      	bx	lr
  402006:	bf00      	nop
  402008:	2000a4ec 	.word	0x2000a4ec

0040200c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  40200c:	b480      	push	{r7}
  40200e:	b083      	sub	sp, #12
  402010:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  402012:	4b0b      	ldr	r3, [pc, #44]	; (402040 <xTaskGetSchedulerState+0x34>)
  402014:	681b      	ldr	r3, [r3, #0]
  402016:	2b00      	cmp	r3, #0
  402018:	d102      	bne.n	402020 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  40201a:	2300      	movs	r3, #0
  40201c:	607b      	str	r3, [r7, #4]
  40201e:	e008      	b.n	402032 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  402020:	4b08      	ldr	r3, [pc, #32]	; (402044 <xTaskGetSchedulerState+0x38>)
  402022:	681b      	ldr	r3, [r3, #0]
  402024:	2b00      	cmp	r3, #0
  402026:	d102      	bne.n	40202e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  402028:	2301      	movs	r3, #1
  40202a:	607b      	str	r3, [r7, #4]
  40202c:	e001      	b.n	402032 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40202e:	2302      	movs	r3, #2
  402030:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  402032:	687b      	ldr	r3, [r7, #4]
	}
  402034:	4618      	mov	r0, r3
  402036:	370c      	adds	r7, #12
  402038:	46bd      	mov	sp, r7
  40203a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40203e:	4770      	bx	lr
  402040:	2000a5d4 	.word	0x2000a5d4
  402044:	2000a5d8 	.word	0x2000a5d8

00402048 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  402048:	b580      	push	{r7, lr}
  40204a:	b084      	sub	sp, #16
  40204c:	af00      	add	r7, sp, #0
  40204e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  402050:	687b      	ldr	r3, [r7, #4]
  402052:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402054:	687b      	ldr	r3, [r7, #4]
  402056:	2b00      	cmp	r3, #0
  402058:	d041      	beq.n	4020de <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  40205a:	68fb      	ldr	r3, [r7, #12]
  40205c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40205e:	4b22      	ldr	r3, [pc, #136]	; (4020e8 <vTaskPriorityInherit+0xa0>)
  402060:	681b      	ldr	r3, [r3, #0]
  402062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402064:	429a      	cmp	r2, r3
  402066:	d23a      	bcs.n	4020de <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  402068:	4b1f      	ldr	r3, [pc, #124]	; (4020e8 <vTaskPriorityInherit+0xa0>)
  40206a:	681b      	ldr	r3, [r3, #0]
  40206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40206e:	f1c3 0205 	rsb	r2, r3, #5
  402072:	68fb      	ldr	r3, [r7, #12]
  402074:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402076:	68fb      	ldr	r3, [r7, #12]
  402078:	6959      	ldr	r1, [r3, #20]
  40207a:	68fb      	ldr	r3, [r7, #12]
  40207c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40207e:	4613      	mov	r3, r2
  402080:	009b      	lsls	r3, r3, #2
  402082:	4413      	add	r3, r2
  402084:	009b      	lsls	r3, r3, #2
  402086:	4a19      	ldr	r2, [pc, #100]	; (4020ec <vTaskPriorityInherit+0xa4>)
  402088:	4413      	add	r3, r2
  40208a:	4299      	cmp	r1, r3
  40208c:	d122      	bne.n	4020d4 <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  40208e:	68fb      	ldr	r3, [r7, #12]
  402090:	3304      	adds	r3, #4
  402092:	4618      	mov	r0, r3
  402094:	4b16      	ldr	r3, [pc, #88]	; (4020f0 <vTaskPriorityInherit+0xa8>)
  402096:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402098:	4b13      	ldr	r3, [pc, #76]	; (4020e8 <vTaskPriorityInherit+0xa0>)
  40209a:	681b      	ldr	r3, [r3, #0]
  40209c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40209e:	68fb      	ldr	r3, [r7, #12]
  4020a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  4020a2:	68fb      	ldr	r3, [r7, #12]
  4020a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4020a6:	4b13      	ldr	r3, [pc, #76]	; (4020f4 <vTaskPriorityInherit+0xac>)
  4020a8:	681b      	ldr	r3, [r3, #0]
  4020aa:	429a      	cmp	r2, r3
  4020ac:	d903      	bls.n	4020b6 <vTaskPriorityInherit+0x6e>
  4020ae:	68fb      	ldr	r3, [r7, #12]
  4020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4020b2:	4a10      	ldr	r2, [pc, #64]	; (4020f4 <vTaskPriorityInherit+0xac>)
  4020b4:	6013      	str	r3, [r2, #0]
  4020b6:	68fb      	ldr	r3, [r7, #12]
  4020b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4020ba:	4613      	mov	r3, r2
  4020bc:	009b      	lsls	r3, r3, #2
  4020be:	4413      	add	r3, r2
  4020c0:	009b      	lsls	r3, r3, #2
  4020c2:	4a0a      	ldr	r2, [pc, #40]	; (4020ec <vTaskPriorityInherit+0xa4>)
  4020c4:	441a      	add	r2, r3
  4020c6:	68fb      	ldr	r3, [r7, #12]
  4020c8:	3304      	adds	r3, #4
  4020ca:	4619      	mov	r1, r3
  4020cc:	4610      	mov	r0, r2
  4020ce:	4b0a      	ldr	r3, [pc, #40]	; (4020f8 <vTaskPriorityInherit+0xb0>)
  4020d0:	4798      	blx	r3
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  4020d2:	e004      	b.n	4020de <vTaskPriorityInherit+0x96>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4020d4:	4b04      	ldr	r3, [pc, #16]	; (4020e8 <vTaskPriorityInherit+0xa0>)
  4020d6:	681b      	ldr	r3, [r3, #0]
  4020d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4020da:	68fb      	ldr	r3, [r7, #12]
  4020dc:	62da      	str	r2, [r3, #44]	; 0x2c
	}
  4020de:	bf00      	nop
  4020e0:	3710      	adds	r7, #16
  4020e2:	46bd      	mov	sp, r7
  4020e4:	bd80      	pop	{r7, pc}
  4020e6:	bf00      	nop
  4020e8:	2000a4ec 	.word	0x2000a4ec
  4020ec:	2000a4f0 	.word	0x2000a4f0
  4020f0:	004006f5 	.word	0x004006f5
  4020f4:	2000a5d0 	.word	0x2000a5d0
  4020f8:	00400633 	.word	0x00400633

004020fc <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  4020fc:	b580      	push	{r7, lr}
  4020fe:	b084      	sub	sp, #16
  402100:	af00      	add	r7, sp, #0
  402102:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  402104:	687b      	ldr	r3, [r7, #4]
  402106:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  402108:	687b      	ldr	r3, [r7, #4]
  40210a:	2b00      	cmp	r3, #0
  40210c:	d02c      	beq.n	402168 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  40210e:	68fb      	ldr	r3, [r7, #12]
  402110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402112:	68fb      	ldr	r3, [r7, #12]
  402114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  402116:	429a      	cmp	r2, r3
  402118:	d026      	beq.n	402168 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  40211a:	68fb      	ldr	r3, [r7, #12]
  40211c:	3304      	adds	r3, #4
  40211e:	4618      	mov	r0, r3
  402120:	4b13      	ldr	r3, [pc, #76]	; (402170 <vTaskPriorityDisinherit+0x74>)
  402122:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  402124:	68fb      	ldr	r3, [r7, #12]
  402126:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  402128:	68fb      	ldr	r3, [r7, #12]
  40212a:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  40212c:	68fb      	ldr	r3, [r7, #12]
  40212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402130:	f1c3 0205 	rsb	r2, r3, #5
  402134:	68fb      	ldr	r3, [r7, #12]
  402136:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  402138:	68fb      	ldr	r3, [r7, #12]
  40213a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40213c:	4b0d      	ldr	r3, [pc, #52]	; (402174 <vTaskPriorityDisinherit+0x78>)
  40213e:	681b      	ldr	r3, [r3, #0]
  402140:	429a      	cmp	r2, r3
  402142:	d903      	bls.n	40214c <vTaskPriorityDisinherit+0x50>
  402144:	68fb      	ldr	r3, [r7, #12]
  402146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402148:	4a0a      	ldr	r2, [pc, #40]	; (402174 <vTaskPriorityDisinherit+0x78>)
  40214a:	6013      	str	r3, [r2, #0]
  40214c:	68fb      	ldr	r3, [r7, #12]
  40214e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402150:	4613      	mov	r3, r2
  402152:	009b      	lsls	r3, r3, #2
  402154:	4413      	add	r3, r2
  402156:	009b      	lsls	r3, r3, #2
  402158:	4a07      	ldr	r2, [pc, #28]	; (402178 <vTaskPriorityDisinherit+0x7c>)
  40215a:	441a      	add	r2, r3
  40215c:	68fb      	ldr	r3, [r7, #12]
  40215e:	3304      	adds	r3, #4
  402160:	4619      	mov	r1, r3
  402162:	4610      	mov	r0, r2
  402164:	4b05      	ldr	r3, [pc, #20]	; (40217c <vTaskPriorityDisinherit+0x80>)
  402166:	4798      	blx	r3
			}
		}
	}
  402168:	bf00      	nop
  40216a:	3710      	adds	r7, #16
  40216c:	46bd      	mov	sp, r7
  40216e:	bd80      	pop	{r7, pc}
  402170:	004006f5 	.word	0x004006f5
  402174:	2000a5d0 	.word	0x2000a5d0
  402178:	2000a4f0 	.word	0x2000a4f0
  40217c:	00400633 	.word	0x00400633

00402180 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  402180:	b590      	push	{r4, r7, lr}
  402182:	b087      	sub	sp, #28
  402184:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  402186:	2300      	movs	r3, #0
  402188:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  40218a:	4b11      	ldr	r3, [pc, #68]	; (4021d0 <xTimerCreateTimerTask+0x50>)
  40218c:	4798      	blx	r3

	if( xTimerQueue != NULL )
  40218e:	4b11      	ldr	r3, [pc, #68]	; (4021d4 <xTimerCreateTimerTask+0x54>)
  402190:	681b      	ldr	r3, [r3, #0]
  402192:	2b00      	cmp	r3, #0
  402194:	d00f      	beq.n	4021b6 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402196:	2300      	movs	r3, #0
  402198:	9303      	str	r3, [sp, #12]
  40219a:	2300      	movs	r3, #0
  40219c:	9302      	str	r3, [sp, #8]
  40219e:	2300      	movs	r3, #0
  4021a0:	9301      	str	r3, [sp, #4]
  4021a2:	2304      	movs	r3, #4
  4021a4:	9300      	str	r3, [sp, #0]
  4021a6:	2300      	movs	r3, #0
  4021a8:	f44f 7282 	mov.w	r2, #260	; 0x104
  4021ac:	490a      	ldr	r1, [pc, #40]	; (4021d8 <xTimerCreateTimerTask+0x58>)
  4021ae:	480b      	ldr	r0, [pc, #44]	; (4021dc <xTimerCreateTimerTask+0x5c>)
  4021b0:	4c0b      	ldr	r4, [pc, #44]	; (4021e0 <xTimerCreateTimerTask+0x60>)
  4021b2:	47a0      	blx	r4
  4021b4:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  4021b6:	687b      	ldr	r3, [r7, #4]
  4021b8:	2b00      	cmp	r3, #0
  4021ba:	d103      	bne.n	4021c4 <xTimerCreateTimerTask+0x44>
  4021bc:	4b09      	ldr	r3, [pc, #36]	; (4021e4 <xTimerCreateTimerTask+0x64>)
  4021be:	4798      	blx	r3
  4021c0:	bf00      	nop
  4021c2:	e7fd      	b.n	4021c0 <xTimerCreateTimerTask+0x40>
	return xReturn;
  4021c4:	687b      	ldr	r3, [r7, #4]
}
  4021c6:	4618      	mov	r0, r3
  4021c8:	370c      	adds	r7, #12
  4021ca:	46bd      	mov	sp, r7
  4021cc:	bd90      	pop	{r4, r7, pc}
  4021ce:	bf00      	nop
  4021d0:	0040269d 	.word	0x0040269d
  4021d4:	2000a61c 	.word	0x2000a61c
  4021d8:	00404924 	.word	0x00404924
  4021dc:	004022f9 	.word	0x004022f9
  4021e0:	004014a5 	.word	0x004014a5
  4021e4:	00400949 	.word	0x00400949

004021e8 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  4021e8:	b590      	push	{r4, r7, lr}
  4021ea:	b089      	sub	sp, #36	; 0x24
  4021ec:	af00      	add	r7, sp, #0
  4021ee:	60f8      	str	r0, [r7, #12]
  4021f0:	60b9      	str	r1, [r7, #8]
  4021f2:	607a      	str	r2, [r7, #4]
  4021f4:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  4021f6:	2300      	movs	r3, #0
  4021f8:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  4021fa:	4b1a      	ldr	r3, [pc, #104]	; (402264 <xTimerGenericCommand+0x7c>)
  4021fc:	681b      	ldr	r3, [r3, #0]
  4021fe:	2b00      	cmp	r3, #0
  402200:	d02a      	beq.n	402258 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  402202:	68bb      	ldr	r3, [r7, #8]
  402204:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  402206:	687b      	ldr	r3, [r7, #4]
  402208:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  40220a:	68fb      	ldr	r3, [r7, #12]
  40220c:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  40220e:	683b      	ldr	r3, [r7, #0]
  402210:	2b00      	cmp	r3, #0
  402212:	d118      	bne.n	402246 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402214:	4b14      	ldr	r3, [pc, #80]	; (402268 <xTimerGenericCommand+0x80>)
  402216:	4798      	blx	r3
  402218:	4603      	mov	r3, r0
  40221a:	2b01      	cmp	r3, #1
  40221c:	d109      	bne.n	402232 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  40221e:	4b11      	ldr	r3, [pc, #68]	; (402264 <xTimerGenericCommand+0x7c>)
  402220:	6818      	ldr	r0, [r3, #0]
  402222:	f107 0110 	add.w	r1, r7, #16
  402226:	2300      	movs	r3, #0
  402228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40222a:	4c10      	ldr	r4, [pc, #64]	; (40226c <xTimerGenericCommand+0x84>)
  40222c:	47a0      	blx	r4
  40222e:	61f8      	str	r0, [r7, #28]
  402230:	e012      	b.n	402258 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402232:	4b0c      	ldr	r3, [pc, #48]	; (402264 <xTimerGenericCommand+0x7c>)
  402234:	6818      	ldr	r0, [r3, #0]
  402236:	f107 0110 	add.w	r1, r7, #16
  40223a:	2300      	movs	r3, #0
  40223c:	2200      	movs	r2, #0
  40223e:	4c0b      	ldr	r4, [pc, #44]	; (40226c <xTimerGenericCommand+0x84>)
  402240:	47a0      	blx	r4
  402242:	61f8      	str	r0, [r7, #28]
  402244:	e008      	b.n	402258 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402246:	4b07      	ldr	r3, [pc, #28]	; (402264 <xTimerGenericCommand+0x7c>)
  402248:	6818      	ldr	r0, [r3, #0]
  40224a:	f107 0110 	add.w	r1, r7, #16
  40224e:	2300      	movs	r3, #0
  402250:	683a      	ldr	r2, [r7, #0]
  402252:	4c07      	ldr	r4, [pc, #28]	; (402270 <xTimerGenericCommand+0x88>)
  402254:	47a0      	blx	r4
  402256:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  402258:	69fb      	ldr	r3, [r7, #28]
}
  40225a:	4618      	mov	r0, r3
  40225c:	3724      	adds	r7, #36	; 0x24
  40225e:	46bd      	mov	sp, r7
  402260:	bd90      	pop	{r4, r7, pc}
  402262:	bf00      	nop
  402264:	2000a61c 	.word	0x2000a61c
  402268:	0040200d 	.word	0x0040200d
  40226c:	00400e25 	.word	0x00400e25
  402270:	00400f8d 	.word	0x00400f8d

00402274 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  402274:	b590      	push	{r4, r7, lr}
  402276:	b087      	sub	sp, #28
  402278:	af02      	add	r7, sp, #8
  40227a:	6078      	str	r0, [r7, #4]
  40227c:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40227e:	4b19      	ldr	r3, [pc, #100]	; (4022e4 <prvProcessExpiredTimer+0x70>)
  402280:	681b      	ldr	r3, [r3, #0]
  402282:	68db      	ldr	r3, [r3, #12]
  402284:	68db      	ldr	r3, [r3, #12]
  402286:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  402288:	68fb      	ldr	r3, [r7, #12]
  40228a:	3304      	adds	r3, #4
  40228c:	4618      	mov	r0, r3
  40228e:	4b16      	ldr	r3, [pc, #88]	; (4022e8 <prvProcessExpiredTimer+0x74>)
  402290:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402292:	68fb      	ldr	r3, [r7, #12]
  402294:	69db      	ldr	r3, [r3, #28]
  402296:	2b01      	cmp	r3, #1
  402298:	d11b      	bne.n	4022d2 <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  40229a:	68fb      	ldr	r3, [r7, #12]
  40229c:	699a      	ldr	r2, [r3, #24]
  40229e:	687b      	ldr	r3, [r7, #4]
  4022a0:	18d1      	adds	r1, r2, r3
  4022a2:	687b      	ldr	r3, [r7, #4]
  4022a4:	683a      	ldr	r2, [r7, #0]
  4022a6:	68f8      	ldr	r0, [r7, #12]
  4022a8:	4c10      	ldr	r4, [pc, #64]	; (4022ec <prvProcessExpiredTimer+0x78>)
  4022aa:	47a0      	blx	r4
  4022ac:	4603      	mov	r3, r0
  4022ae:	2b01      	cmp	r3, #1
  4022b0:	d10f      	bne.n	4022d2 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  4022b2:	2300      	movs	r3, #0
  4022b4:	9300      	str	r3, [sp, #0]
  4022b6:	2300      	movs	r3, #0
  4022b8:	687a      	ldr	r2, [r7, #4]
  4022ba:	2100      	movs	r1, #0
  4022bc:	68f8      	ldr	r0, [r7, #12]
  4022be:	4c0c      	ldr	r4, [pc, #48]	; (4022f0 <prvProcessExpiredTimer+0x7c>)
  4022c0:	47a0      	blx	r4
  4022c2:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  4022c4:	68bb      	ldr	r3, [r7, #8]
  4022c6:	2b00      	cmp	r3, #0
  4022c8:	d103      	bne.n	4022d2 <prvProcessExpiredTimer+0x5e>
  4022ca:	4b0a      	ldr	r3, [pc, #40]	; (4022f4 <prvProcessExpiredTimer+0x80>)
  4022cc:	4798      	blx	r3
  4022ce:	bf00      	nop
  4022d0:	e7fd      	b.n	4022ce <prvProcessExpiredTimer+0x5a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4022d2:	68fb      	ldr	r3, [r7, #12]
  4022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4022d6:	68f8      	ldr	r0, [r7, #12]
  4022d8:	4798      	blx	r3
}
  4022da:	bf00      	nop
  4022dc:	3714      	adds	r7, #20
  4022de:	46bd      	mov	sp, r7
  4022e0:	bd90      	pop	{r4, r7, pc}
  4022e2:	bf00      	nop
  4022e4:	2000a614 	.word	0x2000a614
  4022e8:	004006f5 	.word	0x004006f5
  4022ec:	00402441 	.word	0x00402441
  4022f0:	004021e9 	.word	0x004021e9
  4022f4:	00400949 	.word	0x00400949

004022f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  4022f8:	b580      	push	{r7, lr}
  4022fa:	b084      	sub	sp, #16
  4022fc:	af00      	add	r7, sp, #0
  4022fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  402300:	f107 0308 	add.w	r3, r7, #8
  402304:	4618      	mov	r0, r3
  402306:	4b05      	ldr	r3, [pc, #20]	; (40231c <prvTimerTask+0x24>)
  402308:	4798      	blx	r3
  40230a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  40230c:	68bb      	ldr	r3, [r7, #8]
  40230e:	4619      	mov	r1, r3
  402310:	68f8      	ldr	r0, [r7, #12]
  402312:	4b03      	ldr	r3, [pc, #12]	; (402320 <prvTimerTask+0x28>)
  402314:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  402316:	4b03      	ldr	r3, [pc, #12]	; (402324 <prvTimerTask+0x2c>)
  402318:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  40231a:	e7f1      	b.n	402300 <prvTimerTask+0x8>
  40231c:	004023ad 	.word	0x004023ad
  402320:	00402329 	.word	0x00402329
  402324:	004024c9 	.word	0x004024c9

00402328 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  402328:	b580      	push	{r7, lr}
  40232a:	b084      	sub	sp, #16
  40232c:	af00      	add	r7, sp, #0
  40232e:	6078      	str	r0, [r7, #4]
  402330:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  402332:	4b17      	ldr	r3, [pc, #92]	; (402390 <prvProcessTimerOrBlockTask+0x68>)
  402334:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402336:	f107 0308 	add.w	r3, r7, #8
  40233a:	4618      	mov	r0, r3
  40233c:	4b15      	ldr	r3, [pc, #84]	; (402394 <prvProcessTimerOrBlockTask+0x6c>)
  40233e:	4798      	blx	r3
  402340:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  402342:	68bb      	ldr	r3, [r7, #8]
  402344:	2b00      	cmp	r3, #0
  402346:	d11d      	bne.n	402384 <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402348:	683b      	ldr	r3, [r7, #0]
  40234a:	2b00      	cmp	r3, #0
  40234c:	d10a      	bne.n	402364 <prvProcessTimerOrBlockTask+0x3c>
  40234e:	687a      	ldr	r2, [r7, #4]
  402350:	68fb      	ldr	r3, [r7, #12]
  402352:	429a      	cmp	r2, r3
  402354:	d806      	bhi.n	402364 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  402356:	4b10      	ldr	r3, [pc, #64]	; (402398 <prvProcessTimerOrBlockTask+0x70>)
  402358:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  40235a:	68f9      	ldr	r1, [r7, #12]
  40235c:	6878      	ldr	r0, [r7, #4]
  40235e:	4b0f      	ldr	r3, [pc, #60]	; (40239c <prvProcessTimerOrBlockTask+0x74>)
  402360:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
  402362:	e011      	b.n	402388 <prvProcessTimerOrBlockTask+0x60>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  402364:	4b0e      	ldr	r3, [pc, #56]	; (4023a0 <prvProcessTimerOrBlockTask+0x78>)
  402366:	6818      	ldr	r0, [r3, #0]
  402368:	687a      	ldr	r2, [r7, #4]
  40236a:	68fb      	ldr	r3, [r7, #12]
  40236c:	1ad3      	subs	r3, r2, r3
  40236e:	4619      	mov	r1, r3
  402370:	4b0c      	ldr	r3, [pc, #48]	; (4023a4 <prvProcessTimerOrBlockTask+0x7c>)
  402372:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402374:	4b08      	ldr	r3, [pc, #32]	; (402398 <prvProcessTimerOrBlockTask+0x70>)
  402376:	4798      	blx	r3
  402378:	4603      	mov	r3, r0
  40237a:	2b00      	cmp	r3, #0
  40237c:	d104      	bne.n	402388 <prvProcessTimerOrBlockTask+0x60>
					portYIELD_WITHIN_API();
  40237e:	4b0a      	ldr	r3, [pc, #40]	; (4023a8 <prvProcessTimerOrBlockTask+0x80>)
  402380:	4798      	blx	r3
}
  402382:	e001      	b.n	402388 <prvProcessTimerOrBlockTask+0x60>
			xTaskResumeAll();
  402384:	4b04      	ldr	r3, [pc, #16]	; (402398 <prvProcessTimerOrBlockTask+0x70>)
  402386:	4798      	blx	r3
}
  402388:	bf00      	nop
  40238a:	3710      	adds	r7, #16
  40238c:	46bd      	mov	sp, r7
  40238e:	bd80      	pop	{r7, pc}
  402390:	00401735 	.word	0x00401735
  402394:	004023f5 	.word	0x004023f5
  402398:	00401751 	.word	0x00401751
  40239c:	00402275 	.word	0x00402275
  4023a0:	2000a61c 	.word	0x2000a61c
  4023a4:	00401441 	.word	0x00401441
  4023a8:	004008e5 	.word	0x004008e5

004023ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  4023ac:	b480      	push	{r7}
  4023ae:	b085      	sub	sp, #20
  4023b0:	af00      	add	r7, sp, #0
  4023b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4023b4:	4b0e      	ldr	r3, [pc, #56]	; (4023f0 <prvGetNextExpireTime+0x44>)
  4023b6:	681b      	ldr	r3, [r3, #0]
  4023b8:	681b      	ldr	r3, [r3, #0]
  4023ba:	2b00      	cmp	r3, #0
  4023bc:	bf0c      	ite	eq
  4023be:	2301      	moveq	r3, #1
  4023c0:	2300      	movne	r3, #0
  4023c2:	b2db      	uxtb	r3, r3
  4023c4:	461a      	mov	r2, r3
  4023c6:	687b      	ldr	r3, [r7, #4]
  4023c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  4023ca:	687b      	ldr	r3, [r7, #4]
  4023cc:	681b      	ldr	r3, [r3, #0]
  4023ce:	2b00      	cmp	r3, #0
  4023d0:	d105      	bne.n	4023de <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4023d2:	4b07      	ldr	r3, [pc, #28]	; (4023f0 <prvGetNextExpireTime+0x44>)
  4023d4:	681b      	ldr	r3, [r3, #0]
  4023d6:	68db      	ldr	r3, [r3, #12]
  4023d8:	681b      	ldr	r3, [r3, #0]
  4023da:	60fb      	str	r3, [r7, #12]
  4023dc:	e001      	b.n	4023e2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  4023de:	2300      	movs	r3, #0
  4023e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  4023e2:	68fb      	ldr	r3, [r7, #12]
}
  4023e4:	4618      	mov	r0, r3
  4023e6:	3714      	adds	r7, #20
  4023e8:	46bd      	mov	sp, r7
  4023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023ee:	4770      	bx	lr
  4023f0:	2000a614 	.word	0x2000a614

004023f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  4023f4:	b580      	push	{r7, lr}
  4023f6:	b084      	sub	sp, #16
  4023f8:	af00      	add	r7, sp, #0
  4023fa:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  4023fc:	4b0d      	ldr	r3, [pc, #52]	; (402434 <prvSampleTimeNow+0x40>)
  4023fe:	4798      	blx	r3
  402400:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  402402:	4b0d      	ldr	r3, [pc, #52]	; (402438 <prvSampleTimeNow+0x44>)
  402404:	681b      	ldr	r3, [r3, #0]
  402406:	68fa      	ldr	r2, [r7, #12]
  402408:	429a      	cmp	r2, r3
  40240a:	d208      	bcs.n	40241e <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  40240c:	4b0a      	ldr	r3, [pc, #40]	; (402438 <prvSampleTimeNow+0x44>)
  40240e:	681b      	ldr	r3, [r3, #0]
  402410:	4618      	mov	r0, r3
  402412:	4b0a      	ldr	r3, [pc, #40]	; (40243c <prvSampleTimeNow+0x48>)
  402414:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  402416:	687b      	ldr	r3, [r7, #4]
  402418:	2201      	movs	r2, #1
  40241a:	601a      	str	r2, [r3, #0]
  40241c:	e002      	b.n	402424 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  40241e:	687b      	ldr	r3, [r7, #4]
  402420:	2200      	movs	r2, #0
  402422:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  402424:	4a04      	ldr	r2, [pc, #16]	; (402438 <prvSampleTimeNow+0x44>)
  402426:	68fb      	ldr	r3, [r7, #12]
  402428:	6013      	str	r3, [r2, #0]

	return xTimeNow;
  40242a:	68fb      	ldr	r3, [r7, #12]
}
  40242c:	4618      	mov	r0, r3
  40242e:	3710      	adds	r7, #16
  402430:	46bd      	mov	sp, r7
  402432:	bd80      	pop	{r7, pc}
  402434:	00401871 	.word	0x00401871
  402438:	2000a620 	.word	0x2000a620
  40243c:	004025d5 	.word	0x004025d5

00402440 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  402440:	b580      	push	{r7, lr}
  402442:	b086      	sub	sp, #24
  402444:	af00      	add	r7, sp, #0
  402446:	60f8      	str	r0, [r7, #12]
  402448:	60b9      	str	r1, [r7, #8]
  40244a:	607a      	str	r2, [r7, #4]
  40244c:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  40244e:	2300      	movs	r3, #0
  402450:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402452:	68fb      	ldr	r3, [r7, #12]
  402454:	68ba      	ldr	r2, [r7, #8]
  402456:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402458:	68fb      	ldr	r3, [r7, #12]
  40245a:	68fa      	ldr	r2, [r7, #12]
  40245c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  40245e:	68ba      	ldr	r2, [r7, #8]
  402460:	687b      	ldr	r3, [r7, #4]
  402462:	429a      	cmp	r2, r3
  402464:	d812      	bhi.n	40248c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  402466:	687a      	ldr	r2, [r7, #4]
  402468:	683b      	ldr	r3, [r7, #0]
  40246a:	1ad2      	subs	r2, r2, r3
  40246c:	68fb      	ldr	r3, [r7, #12]
  40246e:	699b      	ldr	r3, [r3, #24]
  402470:	429a      	cmp	r2, r3
  402472:	d302      	bcc.n	40247a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402474:	2301      	movs	r3, #1
  402476:	617b      	str	r3, [r7, #20]
  402478:	e01b      	b.n	4024b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40247a:	4b10      	ldr	r3, [pc, #64]	; (4024bc <prvInsertTimerInActiveList+0x7c>)
  40247c:	681a      	ldr	r2, [r3, #0]
  40247e:	68fb      	ldr	r3, [r7, #12]
  402480:	3304      	adds	r3, #4
  402482:	4619      	mov	r1, r3
  402484:	4610      	mov	r0, r2
  402486:	4b0e      	ldr	r3, [pc, #56]	; (4024c0 <prvInsertTimerInActiveList+0x80>)
  402488:	4798      	blx	r3
  40248a:	e012      	b.n	4024b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  40248c:	687a      	ldr	r2, [r7, #4]
  40248e:	683b      	ldr	r3, [r7, #0]
  402490:	429a      	cmp	r2, r3
  402492:	d206      	bcs.n	4024a2 <prvInsertTimerInActiveList+0x62>
  402494:	68ba      	ldr	r2, [r7, #8]
  402496:	683b      	ldr	r3, [r7, #0]
  402498:	429a      	cmp	r2, r3
  40249a:	d302      	bcc.n	4024a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  40249c:	2301      	movs	r3, #1
  40249e:	617b      	str	r3, [r7, #20]
  4024a0:	e007      	b.n	4024b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4024a2:	4b08      	ldr	r3, [pc, #32]	; (4024c4 <prvInsertTimerInActiveList+0x84>)
  4024a4:	681a      	ldr	r2, [r3, #0]
  4024a6:	68fb      	ldr	r3, [r7, #12]
  4024a8:	3304      	adds	r3, #4
  4024aa:	4619      	mov	r1, r3
  4024ac:	4610      	mov	r0, r2
  4024ae:	4b04      	ldr	r3, [pc, #16]	; (4024c0 <prvInsertTimerInActiveList+0x80>)
  4024b0:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  4024b2:	697b      	ldr	r3, [r7, #20]
}
  4024b4:	4618      	mov	r0, r3
  4024b6:	3718      	adds	r7, #24
  4024b8:	46bd      	mov	sp, r7
  4024ba:	bd80      	pop	{r7, pc}
  4024bc:	2000a618 	.word	0x2000a618
  4024c0:	00400683 	.word	0x00400683
  4024c4:	2000a614 	.word	0x2000a614

004024c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  4024c8:	b590      	push	{r4, r7, lr}
  4024ca:	b08b      	sub	sp, #44	; 0x2c
  4024cc:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4024ce:	1d3b      	adds	r3, r7, #4
  4024d0:	4618      	mov	r0, r3
  4024d2:	4b38      	ldr	r3, [pc, #224]	; (4025b4 <prvProcessReceivedCommands+0xec>)
  4024d4:	4798      	blx	r3
  4024d6:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  4024d8:	e05d      	b.n	402596 <prvProcessReceivedCommands+0xce>
	{
		pxTimer = xMessage.pxTimer;
  4024da:	693b      	ldr	r3, [r7, #16]
  4024dc:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  4024de:	69bb      	ldr	r3, [r7, #24]
  4024e0:	2b00      	cmp	r3, #0
  4024e2:	d008      	beq.n	4024f6 <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4024e4:	69bb      	ldr	r3, [r7, #24]
  4024e6:	695b      	ldr	r3, [r3, #20]
  4024e8:	2b00      	cmp	r3, #0
  4024ea:	d004      	beq.n	4024f6 <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  4024ec:	69bb      	ldr	r3, [r7, #24]
  4024ee:	3304      	adds	r3, #4
  4024f0:	4618      	mov	r0, r3
  4024f2:	4b31      	ldr	r3, [pc, #196]	; (4025b8 <prvProcessReceivedCommands+0xf0>)
  4024f4:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  4024f6:	68bb      	ldr	r3, [r7, #8]
  4024f8:	2b03      	cmp	r3, #3
  4024fa:	d84b      	bhi.n	402594 <prvProcessReceivedCommands+0xcc>
  4024fc:	a201      	add	r2, pc, #4	; (adr r2, 402504 <prvProcessReceivedCommands+0x3c>)
  4024fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402502:	bf00      	nop
  402504:	00402515 	.word	0x00402515
  402508:	00402597 	.word	0x00402597
  40250c:	00402563 	.word	0x00402563
  402510:	0040258d 	.word	0x0040258d
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  402514:	68fa      	ldr	r2, [r7, #12]
  402516:	69bb      	ldr	r3, [r7, #24]
  402518:	699b      	ldr	r3, [r3, #24]
  40251a:	18d1      	adds	r1, r2, r3
  40251c:	68fb      	ldr	r3, [r7, #12]
  40251e:	69fa      	ldr	r2, [r7, #28]
  402520:	69b8      	ldr	r0, [r7, #24]
  402522:	4c26      	ldr	r4, [pc, #152]	; (4025bc <prvProcessReceivedCommands+0xf4>)
  402524:	47a0      	blx	r4
  402526:	4603      	mov	r3, r0
  402528:	2b01      	cmp	r3, #1
  40252a:	d134      	bne.n	402596 <prvProcessReceivedCommands+0xce>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  40252c:	69bb      	ldr	r3, [r7, #24]
  40252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402530:	69b8      	ldr	r0, [r7, #24]
  402532:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402534:	69bb      	ldr	r3, [r7, #24]
  402536:	69db      	ldr	r3, [r3, #28]
  402538:	2b01      	cmp	r3, #1
  40253a:	d12c      	bne.n	402596 <prvProcessReceivedCommands+0xce>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40253c:	68fa      	ldr	r2, [r7, #12]
  40253e:	69bb      	ldr	r3, [r7, #24]
  402540:	699b      	ldr	r3, [r3, #24]
  402542:	441a      	add	r2, r3
  402544:	2300      	movs	r3, #0
  402546:	9300      	str	r3, [sp, #0]
  402548:	2300      	movs	r3, #0
  40254a:	2100      	movs	r1, #0
  40254c:	69b8      	ldr	r0, [r7, #24]
  40254e:	4c1c      	ldr	r4, [pc, #112]	; (4025c0 <prvProcessReceivedCommands+0xf8>)
  402550:	47a0      	blx	r4
  402552:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  402554:	697b      	ldr	r3, [r7, #20]
  402556:	2b00      	cmp	r3, #0
  402558:	d11d      	bne.n	402596 <prvProcessReceivedCommands+0xce>
  40255a:	4b1a      	ldr	r3, [pc, #104]	; (4025c4 <prvProcessReceivedCommands+0xfc>)
  40255c:	4798      	blx	r3
  40255e:	bf00      	nop
  402560:	e7fd      	b.n	40255e <prvProcessReceivedCommands+0x96>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  402562:	68fa      	ldr	r2, [r7, #12]
  402564:	69bb      	ldr	r3, [r7, #24]
  402566:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402568:	69bb      	ldr	r3, [r7, #24]
  40256a:	699b      	ldr	r3, [r3, #24]
  40256c:	2b00      	cmp	r3, #0
  40256e:	d103      	bne.n	402578 <prvProcessReceivedCommands+0xb0>
  402570:	4b14      	ldr	r3, [pc, #80]	; (4025c4 <prvProcessReceivedCommands+0xfc>)
  402572:	4798      	blx	r3
  402574:	bf00      	nop
  402576:	e7fd      	b.n	402574 <prvProcessReceivedCommands+0xac>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402578:	69bb      	ldr	r3, [r7, #24]
  40257a:	699a      	ldr	r2, [r3, #24]
  40257c:	69fb      	ldr	r3, [r7, #28]
  40257e:	18d1      	adds	r1, r2, r3
  402580:	69fb      	ldr	r3, [r7, #28]
  402582:	69fa      	ldr	r2, [r7, #28]
  402584:	69b8      	ldr	r0, [r7, #24]
  402586:	4c0d      	ldr	r4, [pc, #52]	; (4025bc <prvProcessReceivedCommands+0xf4>)
  402588:	47a0      	blx	r4
				break;
  40258a:	e004      	b.n	402596 <prvProcessReceivedCommands+0xce>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  40258c:	69b8      	ldr	r0, [r7, #24]
  40258e:	4b0e      	ldr	r3, [pc, #56]	; (4025c8 <prvProcessReceivedCommands+0x100>)
  402590:	4798      	blx	r3
				break;
  402592:	e000      	b.n	402596 <prvProcessReceivedCommands+0xce>

			default	:
				/* Don't expect to get here. */
				break;
  402594:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  402596:	4b0d      	ldr	r3, [pc, #52]	; (4025cc <prvProcessReceivedCommands+0x104>)
  402598:	6818      	ldr	r0, [r3, #0]
  40259a:	f107 0108 	add.w	r1, r7, #8
  40259e:	2300      	movs	r3, #0
  4025a0:	2200      	movs	r2, #0
  4025a2:	4c0b      	ldr	r4, [pc, #44]	; (4025d0 <prvProcessReceivedCommands+0x108>)
  4025a4:	47a0      	blx	r4
  4025a6:	4603      	mov	r3, r0
  4025a8:	2b00      	cmp	r3, #0
  4025aa:	d196      	bne.n	4024da <prvProcessReceivedCommands+0x12>
		}
	}
}
  4025ac:	bf00      	nop
  4025ae:	3724      	adds	r7, #36	; 0x24
  4025b0:	46bd      	mov	sp, r7
  4025b2:	bd90      	pop	{r4, r7, pc}
  4025b4:	004023f5 	.word	0x004023f5
  4025b8:	004006f5 	.word	0x004006f5
  4025bc:	00402441 	.word	0x00402441
  4025c0:	004021e9 	.word	0x004021e9
  4025c4:	00400949 	.word	0x00400949
  4025c8:	00400b2d 	.word	0x00400b2d
  4025cc:	2000a61c 	.word	0x2000a61c
  4025d0:	00401049 	.word	0x00401049

004025d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  4025d4:	b590      	push	{r4, r7, lr}
  4025d6:	b08b      	sub	sp, #44	; 0x2c
  4025d8:	af02      	add	r7, sp, #8
  4025da:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4025dc:	e03e      	b.n	40265c <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4025de:	4b29      	ldr	r3, [pc, #164]	; (402684 <prvSwitchTimerLists+0xb0>)
  4025e0:	681b      	ldr	r3, [r3, #0]
  4025e2:	68db      	ldr	r3, [r3, #12]
  4025e4:	681b      	ldr	r3, [r3, #0]
  4025e6:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4025e8:	4b26      	ldr	r3, [pc, #152]	; (402684 <prvSwitchTimerLists+0xb0>)
  4025ea:	681b      	ldr	r3, [r3, #0]
  4025ec:	68db      	ldr	r3, [r3, #12]
  4025ee:	68db      	ldr	r3, [r3, #12]
  4025f0:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  4025f2:	69bb      	ldr	r3, [r7, #24]
  4025f4:	3304      	adds	r3, #4
  4025f6:	4618      	mov	r0, r3
  4025f8:	4b23      	ldr	r3, [pc, #140]	; (402688 <prvSwitchTimerLists+0xb4>)
  4025fa:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4025fc:	69bb      	ldr	r3, [r7, #24]
  4025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402600:	69b8      	ldr	r0, [r7, #24]
  402602:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402604:	69bb      	ldr	r3, [r7, #24]
  402606:	69db      	ldr	r3, [r3, #28]
  402608:	2b01      	cmp	r3, #1
  40260a:	d127      	bne.n	40265c <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  40260c:	69bb      	ldr	r3, [r7, #24]
  40260e:	699a      	ldr	r2, [r3, #24]
  402610:	69fb      	ldr	r3, [r7, #28]
  402612:	4413      	add	r3, r2
  402614:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  402616:	697a      	ldr	r2, [r7, #20]
  402618:	69fb      	ldr	r3, [r7, #28]
  40261a:	429a      	cmp	r2, r3
  40261c:	d90e      	bls.n	40263c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40261e:	69bb      	ldr	r3, [r7, #24]
  402620:	697a      	ldr	r2, [r7, #20]
  402622:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402624:	69bb      	ldr	r3, [r7, #24]
  402626:	69ba      	ldr	r2, [r7, #24]
  402628:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40262a:	4b16      	ldr	r3, [pc, #88]	; (402684 <prvSwitchTimerLists+0xb0>)
  40262c:	681a      	ldr	r2, [r3, #0]
  40262e:	69bb      	ldr	r3, [r7, #24]
  402630:	3304      	adds	r3, #4
  402632:	4619      	mov	r1, r3
  402634:	4610      	mov	r0, r2
  402636:	4b15      	ldr	r3, [pc, #84]	; (40268c <prvSwitchTimerLists+0xb8>)
  402638:	4798      	blx	r3
  40263a:	e00f      	b.n	40265c <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  40263c:	2300      	movs	r3, #0
  40263e:	9300      	str	r3, [sp, #0]
  402640:	2300      	movs	r3, #0
  402642:	69fa      	ldr	r2, [r7, #28]
  402644:	2100      	movs	r1, #0
  402646:	69b8      	ldr	r0, [r7, #24]
  402648:	4c11      	ldr	r4, [pc, #68]	; (402690 <prvSwitchTimerLists+0xbc>)
  40264a:	47a0      	blx	r4
  40264c:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  40264e:	693b      	ldr	r3, [r7, #16]
  402650:	2b00      	cmp	r3, #0
  402652:	d103      	bne.n	40265c <prvSwitchTimerLists+0x88>
  402654:	4b0f      	ldr	r3, [pc, #60]	; (402694 <prvSwitchTimerLists+0xc0>)
  402656:	4798      	blx	r3
  402658:	bf00      	nop
  40265a:	e7fd      	b.n	402658 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40265c:	4b09      	ldr	r3, [pc, #36]	; (402684 <prvSwitchTimerLists+0xb0>)
  40265e:	681b      	ldr	r3, [r3, #0]
  402660:	681b      	ldr	r3, [r3, #0]
  402662:	2b00      	cmp	r3, #0
  402664:	d1bb      	bne.n	4025de <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  402666:	4b07      	ldr	r3, [pc, #28]	; (402684 <prvSwitchTimerLists+0xb0>)
  402668:	681b      	ldr	r3, [r3, #0]
  40266a:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  40266c:	4b0a      	ldr	r3, [pc, #40]	; (402698 <prvSwitchTimerLists+0xc4>)
  40266e:	681b      	ldr	r3, [r3, #0]
  402670:	4a04      	ldr	r2, [pc, #16]	; (402684 <prvSwitchTimerLists+0xb0>)
  402672:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
  402674:	4a08      	ldr	r2, [pc, #32]	; (402698 <prvSwitchTimerLists+0xc4>)
  402676:	68fb      	ldr	r3, [r7, #12]
  402678:	6013      	str	r3, [r2, #0]
}
  40267a:	bf00      	nop
  40267c:	3724      	adds	r7, #36	; 0x24
  40267e:	46bd      	mov	sp, r7
  402680:	bd90      	pop	{r4, r7, pc}
  402682:	bf00      	nop
  402684:	2000a614 	.word	0x2000a614
  402688:	004006f5 	.word	0x004006f5
  40268c:	00400683 	.word	0x00400683
  402690:	004021e9 	.word	0x004021e9
  402694:	00400949 	.word	0x00400949
  402698:	2000a618 	.word	0x2000a618

0040269c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  40269c:	b580      	push	{r7, lr}
  40269e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4026a0:	4b0e      	ldr	r3, [pc, #56]	; (4026dc <prvCheckForValidListAndQueue+0x40>)
  4026a2:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4026a4:	4b0e      	ldr	r3, [pc, #56]	; (4026e0 <prvCheckForValidListAndQueue+0x44>)
  4026a6:	681b      	ldr	r3, [r3, #0]
  4026a8:	2b00      	cmp	r3, #0
  4026aa:	d113      	bne.n	4026d4 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  4026ac:	480d      	ldr	r0, [pc, #52]	; (4026e4 <prvCheckForValidListAndQueue+0x48>)
  4026ae:	4b0e      	ldr	r3, [pc, #56]	; (4026e8 <prvCheckForValidListAndQueue+0x4c>)
  4026b0:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  4026b2:	480e      	ldr	r0, [pc, #56]	; (4026ec <prvCheckForValidListAndQueue+0x50>)
  4026b4:	4b0c      	ldr	r3, [pc, #48]	; (4026e8 <prvCheckForValidListAndQueue+0x4c>)
  4026b6:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  4026b8:	4b0d      	ldr	r3, [pc, #52]	; (4026f0 <prvCheckForValidListAndQueue+0x54>)
  4026ba:	4a0a      	ldr	r2, [pc, #40]	; (4026e4 <prvCheckForValidListAndQueue+0x48>)
  4026bc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4026be:	4b0d      	ldr	r3, [pc, #52]	; (4026f4 <prvCheckForValidListAndQueue+0x58>)
  4026c0:	4a0a      	ldr	r2, [pc, #40]	; (4026ec <prvCheckForValidListAndQueue+0x50>)
  4026c2:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  4026c4:	2200      	movs	r2, #0
  4026c6:	210c      	movs	r1, #12
  4026c8:	2005      	movs	r0, #5
  4026ca:	4b0b      	ldr	r3, [pc, #44]	; (4026f8 <prvCheckForValidListAndQueue+0x5c>)
  4026cc:	4798      	blx	r3
  4026ce:	4602      	mov	r2, r0
  4026d0:	4b03      	ldr	r3, [pc, #12]	; (4026e0 <prvCheckForValidListAndQueue+0x44>)
  4026d2:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  4026d4:	4b09      	ldr	r3, [pc, #36]	; (4026fc <prvCheckForValidListAndQueue+0x60>)
  4026d6:	4798      	blx	r3
}
  4026d8:	bf00      	nop
  4026da:	bd80      	pop	{r7, pc}
  4026dc:	00400901 	.word	0x00400901
  4026e0:	2000a61c 	.word	0x2000a61c
  4026e4:	2000a5ec 	.word	0x2000a5ec
  4026e8:	004005d9 	.word	0x004005d9
  4026ec:	2000a600 	.word	0x2000a600
  4026f0:	2000a614 	.word	0x2000a614
  4026f4:	2000a618 	.word	0x2000a618
  4026f8:	00400d8d 	.word	0x00400d8d
  4026fc:	00400921 	.word	0x00400921

00402700 <osc_get_rate>:
{
  402700:	b480      	push	{r7}
  402702:	b083      	sub	sp, #12
  402704:	af00      	add	r7, sp, #0
  402706:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402708:	687b      	ldr	r3, [r7, #4]
  40270a:	2b07      	cmp	r3, #7
  40270c:	d825      	bhi.n	40275a <osc_get_rate+0x5a>
  40270e:	a201      	add	r2, pc, #4	; (adr r2, 402714 <osc_get_rate+0x14>)
  402710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402714:	00402735 	.word	0x00402735
  402718:	0040273b 	.word	0x0040273b
  40271c:	00402741 	.word	0x00402741
  402720:	00402747 	.word	0x00402747
  402724:	0040274b 	.word	0x0040274b
  402728:	0040274f 	.word	0x0040274f
  40272c:	00402753 	.word	0x00402753
  402730:	00402757 	.word	0x00402757
		return OSC_SLCK_32K_RC_HZ;
  402734:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  402738:	e010      	b.n	40275c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40273a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40273e:	e00d      	b.n	40275c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402744:	e00a      	b.n	40275c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  402746:	4b08      	ldr	r3, [pc, #32]	; (402768 <osc_get_rate+0x68>)
  402748:	e008      	b.n	40275c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40274a:	4b08      	ldr	r3, [pc, #32]	; (40276c <osc_get_rate+0x6c>)
  40274c:	e006      	b.n	40275c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40274e:	4b08      	ldr	r3, [pc, #32]	; (402770 <osc_get_rate+0x70>)
  402750:	e004      	b.n	40275c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402752:	4b08      	ldr	r3, [pc, #32]	; (402774 <osc_get_rate+0x74>)
  402754:	e002      	b.n	40275c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402756:	4b06      	ldr	r3, [pc, #24]	; (402770 <osc_get_rate+0x70>)
  402758:	e000      	b.n	40275c <osc_get_rate+0x5c>
	return 0;
  40275a:	2300      	movs	r3, #0
}
  40275c:	4618      	mov	r0, r3
  40275e:	370c      	adds	r7, #12
  402760:	46bd      	mov	sp, r7
  402762:	f85d 7b04 	ldr.w	r7, [sp], #4
  402766:	4770      	bx	lr
  402768:	003d0900 	.word	0x003d0900
  40276c:	007a1200 	.word	0x007a1200
  402770:	00b71b00 	.word	0x00b71b00
  402774:	00f42400 	.word	0x00f42400

00402778 <sysclk_get_main_hz>:
{
  402778:	b580      	push	{r7, lr}
  40277a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40277c:	2006      	movs	r0, #6
  40277e:	4b05      	ldr	r3, [pc, #20]	; (402794 <sysclk_get_main_hz+0x1c>)
  402780:	4798      	blx	r3
  402782:	4602      	mov	r2, r0
  402784:	4613      	mov	r3, r2
  402786:	005b      	lsls	r3, r3, #1
  402788:	4413      	add	r3, r2
  40278a:	009b      	lsls	r3, r3, #2
  40278c:	085b      	lsrs	r3, r3, #1
}
  40278e:	4618      	mov	r0, r3
  402790:	bd80      	pop	{r7, pc}
  402792:	bf00      	nop
  402794:	00402701 	.word	0x00402701

00402798 <sysclk_get_cpu_hz>:
{
  402798:	b580      	push	{r7, lr}
  40279a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40279c:	4b02      	ldr	r3, [pc, #8]	; (4027a8 <sysclk_get_cpu_hz+0x10>)
  40279e:	4798      	blx	r3
  4027a0:	4603      	mov	r3, r0
}
  4027a2:	4618      	mov	r0, r3
  4027a4:	bd80      	pop	{r7, pc}
  4027a6:	bf00      	nop
  4027a8:	00402779 	.word	0x00402779

004027ac <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4027ac:	b580      	push	{r7, lr}
  4027ae:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4027b0:	4b02      	ldr	r3, [pc, #8]	; (4027bc <sysclk_get_peripheral_hz+0x10>)
  4027b2:	4798      	blx	r3
  4027b4:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4027b6:	4618      	mov	r0, r3
  4027b8:	bd80      	pop	{r7, pc}
  4027ba:	bf00      	nop
  4027bc:	00402779 	.word	0x00402779

004027c0 <can0_configure_pins_local>:
#ifndef pdMS_TO_TICKS
#define pdMS_TO_TICKS(ms) ((TickType_t)((ms) / portTICK_RATE_MS)) // Convert ms to OS ticks
#endif

static void can0_configure_pins_local(void)
{
  4027c0:	b598      	push	{r3, r4, r7, lr}
  4027c2:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_PIOB); // Enable PIOB clock for CAN0 pins
  4027c4:	200a      	movs	r0, #10
  4027c6:	4b09      	ldr	r3, [pc, #36]	; (4027ec <can0_configure_pins_local+0x2c>)
  4027c8:	4798      	blx	r3
	pio_configure(PIOB, PIO_PERIPH_A, PIO_PB2A_CANTX0, 0); // PB2 as CANTX0
  4027ca:	2300      	movs	r3, #0
  4027cc:	2204      	movs	r2, #4
  4027ce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4027d2:	4807      	ldr	r0, [pc, #28]	; (4027f0 <can0_configure_pins_local+0x30>)
  4027d4:	4c07      	ldr	r4, [pc, #28]	; (4027f4 <can0_configure_pins_local+0x34>)
  4027d6:	47a0      	blx	r4
	pio_configure(PIOB, PIO_PERIPH_A, PIO_PB3A_CANRX0, 0); // PB3 as CANRX0
  4027d8:	2300      	movs	r3, #0
  4027da:	2208      	movs	r2, #8
  4027dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4027e0:	4803      	ldr	r0, [pc, #12]	; (4027f0 <can0_configure_pins_local+0x30>)
  4027e2:	4c04      	ldr	r4, [pc, #16]	; (4027f4 <can0_configure_pins_local+0x34>)
  4027e4:	47a0      	blx	r4
}
  4027e6:	bf00      	nop
  4027e8:	bd98      	pop	{r3, r4, r7, pc}
  4027ea:	bf00      	nop
  4027ec:	004041cd 	.word	0x004041cd
  4027f0:	400e1000 	.word	0x400e1000
  4027f4:	004040b5 	.word	0x004040b5

004027f8 <can_app_init>:
CAN_BR_SMP_ONCE; // single sampling
can_enable(p_can);
}

bool can_app_init(void)
{
  4027f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4027fa:	b0ad      	sub	sp, #180	; 0xb4
  4027fc:	af00      	add	r7, sp, #0
	uint32_t mck = sysclk_get_peripheral_hz(); // Peripheral clock frequency
  4027fe:	4b82      	ldr	r3, [pc, #520]	; (402a08 <can_app_init+0x210>)
  402800:	4798      	blx	r3
  402802:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
	if (mck == 0) return false; // Invalid clock frequency
  402806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
  40280a:	2b00      	cmp	r3, #0
  40280c:	d101      	bne.n	402812 <can_app_init+0x1a>
  40280e:	2300      	movs	r3, #0
  402810:	e0f6      	b.n	402a00 <can_app_init+0x208>
	
	// DIAGNOSTIC: Store actual clock frequencies for debugging
	volatile uint32_t debug_peripheral_hz = mck;
  402812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
  402816:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	volatile uint32_t debug_system_core_hz = SystemCoreClock;
  40281a:	4b7c      	ldr	r3, [pc, #496]	; (402a0c <can_app_init+0x214>)
  40281c:	681b      	ldr	r3, [r3, #0]
  40281e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	// Expected: mck = 96,000,000 Hz for proper 500kbps CAN timing
	// If these values are different, CAN bit rate will be incorrect
	
	pmc_enable_periph_clk(ID_CAN0); // Enable CAN0 peripheral clock
  402822:	2025      	movs	r0, #37	; 0x25
  402824:	4b7a      	ldr	r3, [pc, #488]	; (402a10 <can_app_init+0x218>)
  402826:	4798      	blx	r3
	can0_configure_pins_local(); // Route pins to CAN peripheral
  402828:	4b7a      	ldr	r3, [pc, #488]	; (402a14 <can_app_init+0x21c>)
  40282a:	4798      	blx	r3
	
	// Add delay after pin configuration to ensure stability
	delay_ms(10);
  40282c:	4b7a      	ldr	r3, [pc, #488]	; (402a18 <can_app_init+0x220>)
  40282e:	4798      	blx	r3
  402830:	4603      	mov	r3, r0
  402832:	4619      	mov	r1, r3
  402834:	f04f 0200 	mov.w	r2, #0
  402838:	460b      	mov	r3, r1
  40283a:	4614      	mov	r4, r2
  40283c:	00a6      	lsls	r6, r4, #2
  40283e:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  402842:	009d      	lsls	r5, r3, #2
  402844:	462b      	mov	r3, r5
  402846:	4634      	mov	r4, r6
  402848:	185b      	adds	r3, r3, r1
  40284a:	eb44 0402 	adc.w	r4, r4, r2
  40284e:	18db      	adds	r3, r3, r3
  402850:	eb44 0404 	adc.w	r4, r4, r4
  402854:	4619      	mov	r1, r3
  402856:	4622      	mov	r2, r4
  402858:	f243 63af 	movw	r3, #13999	; 0x36af
  40285c:	f04f 0400 	mov.w	r4, #0
  402860:	18cd      	adds	r5, r1, r3
  402862:	eb42 0604 	adc.w	r6, r2, r4
  402866:	4628      	mov	r0, r5
  402868:	4631      	mov	r1, r6
  40286a:	4c6c      	ldr	r4, [pc, #432]	; (402a1c <can_app_init+0x224>)
  40286c:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402870:	f04f 0300 	mov.w	r3, #0
  402874:	47a0      	blx	r4
  402876:	4603      	mov	r3, r0
  402878:	460c      	mov	r4, r1
  40287a:	4618      	mov	r0, r3
  40287c:	4b68      	ldr	r3, [pc, #416]	; (402a20 <can_app_init+0x228>)
  40287e:	4798      	blx	r3
	
	// Initialize CAN controller with proper baudrate constant
	// Try 500kbps first (desired rate), then fall back to lower rates if needed
	volatile uint32_t debug_bitrate_used = 0;
  402880:	2300      	movs	r3, #0
  402882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	if (can_init(CAN0, mck, CAN_BPS_500K));
  402886:	f640 32b8 	movw	r2, #3000	; 0xbb8
  40288a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
  40288e:	4865      	ldr	r0, [pc, #404]	; (402a24 <can_app_init+0x22c>)
  402890:	4b65      	ldr	r3, [pc, #404]	; (402a28 <can_app_init+0x230>)
  402892:	4798      	blx	r3
// 		volatile uint32_t debug_can_sr_after_fail = CAN0->CAN_SR;
// 		return false; // CAN baudrate configuration failed
// 	}
	
	// DIAGNOSTIC: Check CAN status immediately after init
	volatile uint32_t debug_can_sr_after_init = CAN0->CAN_SR;
  402894:	4b63      	ldr	r3, [pc, #396]	; (402a24 <can_app_init+0x22c>)
  402896:	691b      	ldr	r3, [r3, #16]
  402898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	volatile uint32_t debug_can_mr_after_init = CAN0->CAN_MR;
  40289c:	4b61      	ldr	r3, [pc, #388]	; (402a24 <can_app_init+0x22c>)
  40289e:	681b      	ldr	r3, [r3, #0]
  4028a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	
	// DIAGNOSTIC: Read back CAN baudrate register to verify configuration
	volatile uint32_t debug_can_br = CAN0->CAN_BR;
  4028a4:	4b5f      	ldr	r3, [pc, #380]	; (402a24 <can_app_init+0x22c>)
  4028a6:	695b      	ldr	r3, [r3, #20]
  4028a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	// Decode the CAN_BR register fields for analysis
	volatile uint32_t debug_phase2 = (debug_can_br & CAN_BR_PHASE2_Msk) >> CAN_BR_PHASE2_Pos;
  4028ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
  4028b0:	f003 0307 	and.w	r3, r3, #7
  4028b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	volatile uint32_t debug_phase1 = (debug_can_br & CAN_BR_PHASE1_Msk) >> CAN_BR_PHASE1_Pos;
  4028b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
  4028bc:	091b      	lsrs	r3, r3, #4
  4028be:	f003 0307 	and.w	r3, r3, #7
  4028c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	volatile uint32_t debug_propag = (debug_can_br & CAN_BR_PROPAG_Msk) >> CAN_BR_PROPAG_Pos;
  4028c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
  4028ca:	0a1b      	lsrs	r3, r3, #8
  4028cc:	f003 0307 	and.w	r3, r3, #7
  4028d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	volatile uint32_t debug_sjw = (debug_can_br & CAN_BR_SJW_Msk) >> CAN_BR_SJW_Pos;
  4028d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
  4028d8:	0b1b      	lsrs	r3, r3, #12
  4028da:	f003 0303 	and.w	r3, r3, #3
  4028de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	volatile uint32_t debug_brp = (debug_can_br & CAN_BR_BRP_Msk) >> CAN_BR_BRP_Pos;
  4028e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
  4028e6:	0c1b      	lsrs	r3, r3, #16
  4028e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4028ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	// Calculate actual bit rate: mck / ((brp + 1) * (1 + (propag + 1) + (phase1 + 1) + (phase2 + 1)))
	volatile uint32_t debug_total_tq = 1 + (debug_propag + 1) + (debug_phase1 + 1) + (debug_phase2 + 1);
  4028f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
  4028f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
  4028f8:	441a      	add	r2, r3
  4028fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
  4028fe:	4413      	add	r3, r2
  402900:	3304      	adds	r3, #4
  402902:	67fb      	str	r3, [r7, #124]	; 0x7c
	volatile uint32_t debug_actual_bitrate = mck / ((debug_brp + 1) * debug_total_tq);
  402904:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
  402908:	3301      	adds	r3, #1
  40290a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
  40290c:	fb02 f303 	mul.w	r3, r2, r3
  402910:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
  402914:	fbb2 f3f3 	udiv	r3, r2, r3
  402918:	67bb      	str	r3, [r7, #120]	; 0x78
	// Expected: debug_actual_bitrate should be 500000 for 500kbps
	// Additional debugging: Store intermediate calculation values
	volatile uint32_t debug_brp_plus_1 = debug_brp + 1;
  40291a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
  40291e:	3301      	adds	r3, #1
  402920:	677b      	str	r3, [r7, #116]	; 0x74
	volatile uint32_t debug_divisor = debug_brp_plus_1 * debug_total_tq;
  402922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  402924:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
  402926:	fb02 f303 	mul.w	r3, r2, r3
  40292a:	673b      	str	r3, [r7, #112]	; 0x70
	volatile uint32_t debug_expected_bitrate = debug_bitrate_used * 1000; // Convert kbps to bps
  40292c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  402930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402934:	fb02 f303 	mul.w	r3, r2, r3
  402938:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	// DEBUG: Calculate what 500kbps should look like with current MCK
	volatile uint32_t debug_target_500k = 500000; // 500kbps in bps
  40293a:	4b3c      	ldr	r3, [pc, #240]	; (402a2c <can_app_init+0x234>)
  40293c:	66bb      	str	r3, [r7, #104]	; 0x68
	volatile uint32_t debug_optimal_divisor = mck / debug_target_500k;
  40293e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  402940:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
  402944:	fbb2 f3f3 	udiv	r3, r2, r3
  402948:	667b      	str	r3, [r7, #100]	; 0x64
	volatile uint32_t debug_optimal_brp = debug_optimal_divisor / 16 - 1; // Assuming 16 TQ
  40294a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  40294c:	091b      	lsrs	r3, r3, #4
  40294e:	3b01      	subs	r3, #1
  402950:	663b      	str	r3, [r7, #96]	; 0x60
	volatile uint32_t debug_optimal_tq = debug_optimal_divisor / (debug_optimal_brp + 1);
  402952:	6e7a      	ldr	r2, [r7, #100]	; 0x64
  402954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  402956:	3301      	adds	r3, #1
  402958:	fbb2 f3f3 	udiv	r3, r2, r3
  40295c:	65fb      	str	r3, [r7, #92]	; 0x5c
	
	can_reset_all_mailbox(CAN0); // Reset all mailboxes to known state
  40295e:	4831      	ldr	r0, [pc, #196]	; (402a24 <can_app_init+0x22c>)
  402960:	4b33      	ldr	r3, [pc, #204]	; (402a30 <can_app_init+0x238>)
  402962:	4798      	blx	r3
	
	/* Configure a generic RX mailbox 0 - ACCEPT ALL MESSAGES for testing */
	can_mb_conf_t mb;
	mb.ul_mb_idx = 0; // Mailbox index 0 for RX
  402964:	2300      	movs	r3, #0
  402966:	63fb      	str	r3, [r7, #60]	; 0x3c
	mb.uc_obj_type = CAN_MB_RX_MODE; // Receive mode
  402968:	2301      	movs	r3, #1
  40296a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	mb.uc_id_ver = 0; // Standard ID (11-bit)
  40296e:	2300      	movs	r3, #0
  402970:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	mb.ul_id_msk = 0; // NO MASK - Accept all messages (for loopback test compatibility)
  402974:	2300      	movs	r3, #0
  402976:	64bb      	str	r3, [r7, #72]	; 0x48
	mb.ul_id = 0; // Don't filter on specific ID
  402978:	2300      	movs	r3, #0
  40297a:	64fb      	str	r3, [r7, #76]	; 0x4c
	mb.uc_length = 8; // Set MDLC before arming to avoid undefined length
  40297c:	2308      	movs	r3, #8
  40297e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	
	// DIAGNOSTIC: Store mailbox configuration for debugging
	volatile uint32_t debug_mb_idx = mb.ul_mb_idx;
  402982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402984:	63bb      	str	r3, [r7, #56]	; 0x38
	volatile uint32_t debug_mb_type = mb.uc_obj_type;
  402986:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
  40298a:	637b      	str	r3, [r7, #52]	; 0x34
	volatile uint32_t debug_mb_id_mask = mb.ul_id_msk;
  40298c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40298e:	633b      	str	r3, [r7, #48]	; 0x30
	volatile uint32_t debug_mb_id = mb.ul_id;
  402990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  402992:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	can_mailbox_init(CAN0, &mb); // Apply configuration
  402994:	f107 033c 	add.w	r3, r7, #60	; 0x3c
  402998:	4619      	mov	r1, r3
  40299a:	4822      	ldr	r0, [pc, #136]	; (402a24 <can_app_init+0x22c>)
  40299c:	4b25      	ldr	r3, [pc, #148]	; (402a34 <can_app_init+0x23c>)
  40299e:	4798      	blx	r3
	// Arm RX mailbox 0 to start receiving
	can_mailbox_send_transfer_cmd(CAN0, &mb);
  4029a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
  4029a4:	4619      	mov	r1, r3
  4029a6:	481f      	ldr	r0, [pc, #124]	; (402a24 <can_app_init+0x22c>)
  4029a8:	4b23      	ldr	r3, [pc, #140]	; (402a38 <can_app_init+0x240>)
  4029aa:	4798      	blx	r3
	
	// DIAGNOSTIC: Verify mailbox was configured
	volatile uint32_t debug_mb_status_after_init = can_mailbox_get_status(CAN0, 0);
  4029ac:	2100      	movs	r1, #0
  4029ae:	481d      	ldr	r0, [pc, #116]	; (402a24 <can_app_init+0x22c>)
  4029b0:	4b22      	ldr	r3, [pc, #136]	; (402a3c <can_app_init+0x244>)
  4029b2:	4798      	blx	r3
  4029b4:	4603      	mov	r3, r0
  4029b6:	62bb      	str	r3, [r7, #40]	; 0x28
	
	// Initialize TX mailbox 1 for future use
	can_mb_conf_t tx_init;
	tx_init.ul_mb_idx = 1; // Use mailbox 1 for TX
  4029b8:	2301      	movs	r3, #1
  4029ba:	60bb      	str	r3, [r7, #8]
	tx_init.uc_obj_type = CAN_MB_TX_MODE; // Transmit mode
  4029bc:	2303      	movs	r3, #3
  4029be:	733b      	strb	r3, [r7, #12]
	tx_init.uc_tx_prio = 15; // High priority
  4029c0:	230f      	movs	r3, #15
  4029c2:	73fb      	strb	r3, [r7, #15]
	tx_init.uc_id_ver = 0; // Standard ID
  4029c4:	2300      	movs	r3, #0
  4029c6:	737b      	strb	r3, [r7, #13]
	tx_init.ul_id_msk = 0; // Not used for TX
  4029c8:	2300      	movs	r3, #0
  4029ca:	617b      	str	r3, [r7, #20]
	can_mailbox_init(CAN0, &tx_init); // Configure TX mailbox
  4029cc:	f107 0308 	add.w	r3, r7, #8
  4029d0:	4619      	mov	r1, r3
  4029d2:	4814      	ldr	r0, [pc, #80]	; (402a24 <can_app_init+0x22c>)
  4029d4:	4b17      	ldr	r3, [pc, #92]	; (402a34 <can_app_init+0x23c>)
  4029d6:	4798      	blx	r3
	
	// DIAGNOSTIC: Verify TX mailbox was configured
	volatile uint32_t debug_tx_mb_status_after_init = can_mailbox_get_status(CAN0, 1);
  4029d8:	2101      	movs	r1, #1
  4029da:	4812      	ldr	r0, [pc, #72]	; (402a24 <can_app_init+0x22c>)
  4029dc:	4b17      	ldr	r3, [pc, #92]	; (402a3c <can_app_init+0x244>)
  4029de:	4798      	blx	r3
  4029e0:	4603      	mov	r3, r0
  4029e2:	607b      	str	r3, [r7, #4]
	
	// Verify the bit rate is correct
	if (!can_verify_bitrate(debug_bitrate_used)) {
  4029e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  4029e8:	4618      	mov	r0, r3
  4029ea:	4b15      	ldr	r3, [pc, #84]	; (402a40 <can_app_init+0x248>)
  4029ec:	4798      	blx	r3
  4029ee:	4603      	mov	r3, r0
  4029f0:	f083 0301 	eor.w	r3, r3, #1
  4029f4:	b2db      	uxtb	r3, r3
  4029f6:	2b00      	cmp	r3, #0
  4029f8:	d001      	beq.n	4029fe <can_app_init+0x206>
		volatile uint32_t debug_bitrate_verification_failed = 1;
  4029fa:	2301      	movs	r3, #1
  4029fc:	603b      	str	r3, [r7, #0]
		// Continue anyway, but flag the issue
	}
	
	return true;
  4029fe:	2301      	movs	r3, #1
}
  402a00:	4618      	mov	r0, r3
  402a02:	37b4      	adds	r7, #180	; 0xb4
  402a04:	46bd      	mov	sp, r7
  402a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402a08:	004027ad 	.word	0x004027ad
  402a0c:	2000000c 	.word	0x2000000c
  402a10:	004041cd 	.word	0x004041cd
  402a14:	004027c1 	.word	0x004027c1
  402a18:	00402799 	.word	0x00402799
  402a1c:	00404251 	.word	0x00404251
  402a20:	20000001 	.word	0x20000001
  402a24:	40010000 	.word	0x40010000
  402a28:	004039ad 	.word	0x004039ad
  402a2c:	0007a120 	.word	0x0007a120
  402a30:	00403ded 	.word	0x00403ded
  402a34:	00403b4d 	.word	0x00403b4d
  402a38:	00403b15 	.word	0x00403b15
  402a3c:	00403aef 	.word	0x00403aef
  402a40:	00402a45 	.word	0x00402a45

00402a44 <can_verify_bitrate>:

// Function to verify CAN bit rate configuration
bool can_verify_bitrate(uint32_t expected_kbps)
{
  402a44:	b580      	push	{r7, lr}
  402a46:	b08c      	sub	sp, #48	; 0x30
  402a48:	af00      	add	r7, sp, #0
  402a4a:	6078      	str	r0, [r7, #4]
	uint32_t mck = sysclk_get_peripheral_hz();
  402a4c:	4b25      	ldr	r3, [pc, #148]	; (402ae4 <can_verify_bitrate+0xa0>)
  402a4e:	4798      	blx	r3
  402a50:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t can_br = CAN0->CAN_BR;
  402a52:	4b25      	ldr	r3, [pc, #148]	; (402ae8 <can_verify_bitrate+0xa4>)
  402a54:	695b      	ldr	r3, [r3, #20]
  402a56:	62bb      	str	r3, [r7, #40]	; 0x28
	
	// Decode CAN_BR register
	uint32_t phase2 = (can_br & CAN_BR_PHASE2_Msk) >> CAN_BR_PHASE2_Pos;
  402a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402a5a:	f003 0307 	and.w	r3, r3, #7
  402a5e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t phase1 = (can_br & CAN_BR_PHASE1_Msk) >> CAN_BR_PHASE1_Pos;
  402a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402a62:	091b      	lsrs	r3, r3, #4
  402a64:	f003 0307 	and.w	r3, r3, #7
  402a68:	623b      	str	r3, [r7, #32]
	uint32_t propag = (can_br & CAN_BR_PROPAG_Msk) >> CAN_BR_PROPAG_Pos;
  402a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402a6c:	0a1b      	lsrs	r3, r3, #8
  402a6e:	f003 0307 	and.w	r3, r3, #7
  402a72:	61fb      	str	r3, [r7, #28]
	uint32_t brp = (can_br & CAN_BR_BRP_Msk) >> CAN_BR_BRP_Pos;
  402a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402a76:	0c1b      	lsrs	r3, r3, #16
  402a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  402a7c:	61bb      	str	r3, [r7, #24]
	
	// Calculate actual bit rate
	uint32_t total_tq = 1 + (propag + 1) + (phase1 + 1) + (phase2 + 1);
  402a7e:	69fa      	ldr	r2, [r7, #28]
  402a80:	6a3b      	ldr	r3, [r7, #32]
  402a82:	441a      	add	r2, r3
  402a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402a86:	4413      	add	r3, r2
  402a88:	3304      	adds	r3, #4
  402a8a:	617b      	str	r3, [r7, #20]
	uint32_t actual_bitrate = mck / ((brp + 1) * total_tq);
  402a8c:	69bb      	ldr	r3, [r7, #24]
  402a8e:	3301      	adds	r3, #1
  402a90:	697a      	ldr	r2, [r7, #20]
  402a92:	fb02 f303 	mul.w	r3, r2, r3
  402a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  402a98:	fbb2 f3f3 	udiv	r3, r2, r3
  402a9c:	613b      	str	r3, [r7, #16]
	uint32_t expected_bitrate = expected_kbps * 1000;
  402a9e:	687b      	ldr	r3, [r7, #4]
  402aa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402aa4:	fb02 f303 	mul.w	r3, r2, r3
  402aa8:	60fb      	str	r3, [r7, #12]
	
	// Allow 1% tolerance
	uint32_t tolerance = expected_bitrate / 100;
  402aaa:	68fb      	ldr	r3, [r7, #12]
  402aac:	4a0f      	ldr	r2, [pc, #60]	; (402aec <can_verify_bitrate+0xa8>)
  402aae:	fba2 2303 	umull	r2, r3, r2, r3
  402ab2:	095b      	lsrs	r3, r3, #5
  402ab4:	60bb      	str	r3, [r7, #8]
	return (actual_bitrate >= (expected_bitrate - tolerance)) && 
  402ab6:	68fa      	ldr	r2, [r7, #12]
  402ab8:	68bb      	ldr	r3, [r7, #8]
  402aba:	1ad2      	subs	r2, r2, r3
  402abc:	693b      	ldr	r3, [r7, #16]
  402abe:	429a      	cmp	r2, r3
  402ac0:	d807      	bhi.n	402ad2 <can_verify_bitrate+0x8e>
	       (actual_bitrate <= (expected_bitrate + tolerance));
  402ac2:	68fa      	ldr	r2, [r7, #12]
  402ac4:	68bb      	ldr	r3, [r7, #8]
  402ac6:	441a      	add	r2, r3
	return (actual_bitrate >= (expected_bitrate - tolerance)) && 
  402ac8:	693b      	ldr	r3, [r7, #16]
  402aca:	429a      	cmp	r2, r3
  402acc:	d301      	bcc.n	402ad2 <can_verify_bitrate+0x8e>
  402ace:	2301      	movs	r3, #1
  402ad0:	e000      	b.n	402ad4 <can_verify_bitrate+0x90>
  402ad2:	2300      	movs	r3, #0
  402ad4:	f003 0301 	and.w	r3, r3, #1
  402ad8:	b2db      	uxtb	r3, r3
}
  402ada:	4618      	mov	r0, r3
  402adc:	3730      	adds	r7, #48	; 0x30
  402ade:	46bd      	mov	sp, r7
  402ae0:	bd80      	pop	{r7, pc}
  402ae2:	bf00      	nop
  402ae4:	004027ad 	.word	0x004027ad
  402ae8:	40010000 	.word	0x40010000
  402aec:	51eb851f 	.word	0x51eb851f

00402af0 <can_app_tx>:

bool can_app_tx(uint32_t id, const uint8_t *data, uint8_t len)
{
  402af0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
  402af4:	b09a      	sub	sp, #104	; 0x68
  402af6:	af00      	add	r7, sp, #0
  402af8:	60f8      	str	r0, [r7, #12]
  402afa:	60b9      	str	r1, [r7, #8]
  402afc:	4613      	mov	r3, r2
  402afe:	71fb      	strb	r3, [r7, #7]
	// First, reset the TX mailbox to ensure it's in a clean state
	can_mb_conf_t reset_mb;
	reset_mb.ul_mb_idx = 1;
  402b00:	2301      	movs	r3, #1
  402b02:	63fb      	str	r3, [r7, #60]	; 0x3c
	reset_mb.uc_obj_type = CAN_MB_DISABLE_MODE; // Disable first
  402b04:	2300      	movs	r3, #0
  402b06:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	can_mailbox_init(CAN0, &reset_mb);
  402b0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
  402b0e:	4619      	mov	r1, r3
  402b10:	4863      	ldr	r0, [pc, #396]	; (402ca0 <can_app_tx+0x1b0>)
  402b12:	4b64      	ldr	r3, [pc, #400]	; (402ca4 <can_app_tx+0x1b4>)
  402b14:	4798      	blx	r3
	
	// Small delay to ensure reset takes effect
	delay_ms(1);
  402b16:	4b64      	ldr	r3, [pc, #400]	; (402ca8 <can_app_tx+0x1b8>)
  402b18:	4798      	blx	r3
  402b1a:	4603      	mov	r3, r0
  402b1c:	f04f 0400 	mov.w	r4, #0
  402b20:	f243 61af 	movw	r1, #13999	; 0x36af
  402b24:	f04f 0200 	mov.w	r2, #0
  402b28:	eb13 0b01 	adds.w	fp, r3, r1
  402b2c:	eb44 0c02 	adc.w	ip, r4, r2
  402b30:	4658      	mov	r0, fp
  402b32:	4661      	mov	r1, ip
  402b34:	4c5d      	ldr	r4, [pc, #372]	; (402cac <can_app_tx+0x1bc>)
  402b36:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402b3a:	f04f 0300 	mov.w	r3, #0
  402b3e:	47a0      	blx	r4
  402b40:	4603      	mov	r3, r0
  402b42:	460c      	mov	r4, r1
  402b44:	4618      	mov	r0, r3
  402b46:	4b5a      	ldr	r3, [pc, #360]	; (402cb0 <can_app_tx+0x1c0>)
  402b48:	4798      	blx	r3
	
	// Now configure the TX mailbox properly. IMPORTANT: set ul_id before mailbox init
	can_mb_conf_t tx;
	tx.ul_mb_idx = 1; // Use mailbox 1 for TX
  402b4a:	2301      	movs	r3, #1
  402b4c:	61fb      	str	r3, [r7, #28]
	tx.uc_obj_type = CAN_MB_TX_MODE; // Transmit mode
  402b4e:	2303      	movs	r3, #3
  402b50:	f887 3020 	strb.w	r3, [r7, #32]
	tx.uc_tx_prio = 15; // High priority
  402b54:	230f      	movs	r3, #15
  402b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	tx.uc_id_ver = 0; // Standard ID
  402b5a:	2300      	movs	r3, #0
  402b5c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	tx.ul_id_msk = 0; // Not used for TX
  402b60:	2300      	movs	r3, #0
  402b62:	62bb      	str	r3, [r7, #40]	; 0x28
	tx.ul_id = CAN_MID_MIDvA(id); // Set CAN identifier BEFORE init (driver may snapshot)
  402b64:	68fb      	ldr	r3, [r7, #12]
  402b66:	049a      	lsls	r2, r3, #18
  402b68:	4b52      	ldr	r3, [pc, #328]	; (402cb4 <can_app_tx+0x1c4>)
  402b6a:	4013      	ands	r3, r2
  402b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	can_mailbox_init(CAN0, &tx); // Configure mailbox
  402b6e:	f107 031c 	add.w	r3, r7, #28
  402b72:	4619      	mov	r1, r3
  402b74:	484a      	ldr	r0, [pc, #296]	; (402ca0 <can_app_tx+0x1b0>)
  402b76:	4b4b      	ldr	r3, [pc, #300]	; (402ca4 <can_app_tx+0x1b4>)
  402b78:	4798      	blx	r3
	uint32_t dl = 0, dh = 0; // Data low/high 32-bit words
  402b7a:	2300      	movs	r3, #0
  402b7c:	667b      	str	r3, [r7, #100]	; 0x64
  402b7e:	2300      	movs	r3, #0
  402b80:	663b      	str	r3, [r7, #96]	; 0x60
	for (uint8_t i=0;i<4 && i<len;i++) dl |= ((uint32_t)data[i]) << (i*8); // Pack first 4 bytes
  402b82:	2300      	movs	r3, #0
  402b84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  402b88:	e012      	b.n	402bb0 <can_app_tx+0xc0>
  402b8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  402b8e:	68ba      	ldr	r2, [r7, #8]
  402b90:	4413      	add	r3, r2
  402b92:	781b      	ldrb	r3, [r3, #0]
  402b94:	461a      	mov	r2, r3
  402b96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  402b9a:	00db      	lsls	r3, r3, #3
  402b9c:	fa02 f303 	lsl.w	r3, r2, r3
  402ba0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
  402ba2:	4313      	orrs	r3, r2
  402ba4:	667b      	str	r3, [r7, #100]	; 0x64
  402ba6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  402baa:	3301      	adds	r3, #1
  402bac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  402bb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  402bb4:	2b03      	cmp	r3, #3
  402bb6:	d804      	bhi.n	402bc2 <can_app_tx+0xd2>
  402bb8:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
  402bbc:	79fb      	ldrb	r3, [r7, #7]
  402bbe:	429a      	cmp	r2, r3
  402bc0:	d3e3      	bcc.n	402b8a <can_app_tx+0x9a>
	for (uint8_t i=4;i<8 && i<len;i++) dh |= ((uint32_t)data[i]) << ((i-4)*8); // Pack next 4 bytes
  402bc2:	2304      	movs	r3, #4
  402bc4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  402bc8:	e013      	b.n	402bf2 <can_app_tx+0x102>
  402bca:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
  402bce:	68ba      	ldr	r2, [r7, #8]
  402bd0:	4413      	add	r3, r2
  402bd2:	781b      	ldrb	r3, [r3, #0]
  402bd4:	461a      	mov	r2, r3
  402bd6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
  402bda:	3b04      	subs	r3, #4
  402bdc:	00db      	lsls	r3, r3, #3
  402bde:	fa02 f303 	lsl.w	r3, r2, r3
  402be2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
  402be4:	4313      	orrs	r3, r2
  402be6:	663b      	str	r3, [r7, #96]	; 0x60
  402be8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
  402bec:	3301      	adds	r3, #1
  402bee:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  402bf2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
  402bf6:	2b07      	cmp	r3, #7
  402bf8:	d804      	bhi.n	402c04 <can_app_tx+0x114>
  402bfa:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
  402bfe:	79fb      	ldrb	r3, [r7, #7]
  402c00:	429a      	cmp	r2, r3
  402c02:	d3e2      	bcc.n	402bca <can_app_tx+0xda>
	tx.ul_datal = dl;
  402c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
  402c06:	637b      	str	r3, [r7, #52]	; 0x34
	tx.ul_datah = dh;
  402c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  402c0a:	63bb      	str	r3, [r7, #56]	; 0x38
	tx.uc_length = len; // DLC
  402c0c:	79fb      	ldrb	r3, [r7, #7]
  402c0e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	
	if (can_mailbox_write(CAN0, &tx) != CAN_MAILBOX_TRANSFER_OK) {
  402c12:	f107 031c 	add.w	r3, r7, #28
  402c16:	4619      	mov	r1, r3
  402c18:	4821      	ldr	r0, [pc, #132]	; (402ca0 <can_app_tx+0x1b0>)
  402c1a:	4b27      	ldr	r3, [pc, #156]	; (402cb8 <can_app_tx+0x1c8>)
  402c1c:	4798      	blx	r3
  402c1e:	4603      	mov	r3, r0
  402c20:	2b00      	cmp	r3, #0
  402c22:	d009      	beq.n	402c38 <can_app_tx+0x148>
		// DIAGNOSTIC: TX write failed
		volatile uint32_t debug_tx_write_failed = 1;
  402c24:	2301      	movs	r3, #1
  402c26:	61bb      	str	r3, [r7, #24]
		volatile uint32_t debug_mb_status_after_write = can_mailbox_get_status(CAN0, 1);
  402c28:	2101      	movs	r1, #1
  402c2a:	481d      	ldr	r0, [pc, #116]	; (402ca0 <can_app_tx+0x1b0>)
  402c2c:	4b23      	ldr	r3, [pc, #140]	; (402cbc <can_app_tx+0x1cc>)
  402c2e:	4798      	blx	r3
  402c30:	4603      	mov	r3, r0
  402c32:	617b      	str	r3, [r7, #20]
		return false; // Load MB failed
  402c34:	2300      	movs	r3, #0
  402c36:	e02e      	b.n	402c96 <can_app_tx+0x1a6>
	}
	
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB1); // Trigger transmission
  402c38:	2102      	movs	r1, #2
  402c3a:	4819      	ldr	r0, [pc, #100]	; (402ca0 <can_app_tx+0x1b0>)
  402c3c:	4b20      	ldr	r3, [pc, #128]	; (402cc0 <can_app_tx+0x1d0>)
  402c3e:	4798      	blx	r3
	
	// Wait for transmission to complete
	delay_ms(10);
  402c40:	4b19      	ldr	r3, [pc, #100]	; (402ca8 <can_app_tx+0x1b8>)
  402c42:	4798      	blx	r3
  402c44:	4603      	mov	r3, r0
  402c46:	4619      	mov	r1, r3
  402c48:	f04f 0200 	mov.w	r2, #0
  402c4c:	460b      	mov	r3, r1
  402c4e:	4614      	mov	r4, r2
  402c50:	00a6      	lsls	r6, r4, #2
  402c52:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  402c56:	009d      	lsls	r5, r3, #2
  402c58:	462b      	mov	r3, r5
  402c5a:	4634      	mov	r4, r6
  402c5c:	185b      	adds	r3, r3, r1
  402c5e:	eb44 0402 	adc.w	r4, r4, r2
  402c62:	18db      	adds	r3, r3, r3
  402c64:	eb44 0404 	adc.w	r4, r4, r4
  402c68:	4619      	mov	r1, r3
  402c6a:	4622      	mov	r2, r4
  402c6c:	f243 63af 	movw	r3, #13999	; 0x36af
  402c70:	f04f 0400 	mov.w	r4, #0
  402c74:	18cd      	adds	r5, r1, r3
  402c76:	eb42 0604 	adc.w	r6, r2, r4
  402c7a:	4628      	mov	r0, r5
  402c7c:	4631      	mov	r1, r6
  402c7e:	4c0b      	ldr	r4, [pc, #44]	; (402cac <can_app_tx+0x1bc>)
  402c80:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402c84:	f04f 0300 	mov.w	r3, #0
  402c88:	47a0      	blx	r4
  402c8a:	4603      	mov	r3, r0
  402c8c:	460c      	mov	r4, r1
  402c8e:	4618      	mov	r0, r3
  402c90:	4b07      	ldr	r3, [pc, #28]	; (402cb0 <can_app_tx+0x1c0>)
  402c92:	4798      	blx	r3
	
	return true;
  402c94:	2301      	movs	r3, #1
}
  402c96:	4618      	mov	r0, r3
  402c98:	3768      	adds	r7, #104	; 0x68
  402c9a:	46bd      	mov	sp, r7
  402c9c:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  402ca0:	40010000 	.word	0x40010000
  402ca4:	00403b4d 	.word	0x00403b4d
  402ca8:	00402799 	.word	0x00402799
  402cac:	00404251 	.word	0x00404251
  402cb0:	20000001 	.word	0x20000001
  402cb4:	1ffc0000 	.word	0x1ffc0000
  402cb8:	00403d35 	.word	0x00403d35
  402cbc:	00403aef 	.word	0x00403aef
  402cc0:	00403ac3 	.word	0x00403ac3

00402cc4 <can_app_reset>:


bool can_app_reset(void)
{
  402cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402cc8:	b089      	sub	sp, #36	; 0x24
  402cca:	af00      	add	r7, sp, #0
	
	can_disable(CAN0);
  402ccc:	483d      	ldr	r0, [pc, #244]	; (402dc4 <can_app_reset+0x100>)
  402cce:	4b3e      	ldr	r3, [pc, #248]	; (402dc8 <can_app_reset+0x104>)
  402cd0:	4798      	blx	r3
	delay_ms(10);
  402cd2:	4b3e      	ldr	r3, [pc, #248]	; (402dcc <can_app_reset+0x108>)
  402cd4:	4798      	blx	r3
  402cd6:	4603      	mov	r3, r0
  402cd8:	4619      	mov	r1, r3
  402cda:	f04f 0200 	mov.w	r2, #0
  402cde:	460b      	mov	r3, r1
  402ce0:	4614      	mov	r4, r2
  402ce2:	ea4f 0984 	mov.w	r9, r4, lsl #2
  402ce6:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  402cea:	ea4f 0883 	mov.w	r8, r3, lsl #2
  402cee:	4643      	mov	r3, r8
  402cf0:	464c      	mov	r4, r9
  402cf2:	185b      	adds	r3, r3, r1
  402cf4:	eb44 0402 	adc.w	r4, r4, r2
  402cf8:	18db      	adds	r3, r3, r3
  402cfa:	eb44 0404 	adc.w	r4, r4, r4
  402cfe:	4619      	mov	r1, r3
  402d00:	4622      	mov	r2, r4
  402d02:	f243 63af 	movw	r3, #13999	; 0x36af
  402d06:	f04f 0400 	mov.w	r4, #0
  402d0a:	eb11 0803 	adds.w	r8, r1, r3
  402d0e:	eb42 0904 	adc.w	r9, r2, r4
  402d12:	4640      	mov	r0, r8
  402d14:	4649      	mov	r1, r9
  402d16:	4c2e      	ldr	r4, [pc, #184]	; (402dd0 <can_app_reset+0x10c>)
  402d18:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402d1c:	f04f 0300 	mov.w	r3, #0
  402d20:	47a0      	blx	r4
  402d22:	4603      	mov	r3, r0
  402d24:	460c      	mov	r4, r1
  402d26:	4618      	mov	r0, r3
  402d28:	4b2a      	ldr	r3, [pc, #168]	; (402dd4 <can_app_reset+0x110>)
  402d2a:	4798      	blx	r3
	can_enable(CAN0);
  402d2c:	4825      	ldr	r0, [pc, #148]	; (402dc4 <can_app_reset+0x100>)
  402d2e:	4b2a      	ldr	r3, [pc, #168]	; (402dd8 <can_app_reset+0x114>)
  402d30:	4798      	blx	r3
	delay_ms(10);
  402d32:	4b26      	ldr	r3, [pc, #152]	; (402dcc <can_app_reset+0x108>)
  402d34:	4798      	blx	r3
  402d36:	4603      	mov	r3, r0
  402d38:	4619      	mov	r1, r3
  402d3a:	f04f 0200 	mov.w	r2, #0
  402d3e:	460b      	mov	r3, r1
  402d40:	4614      	mov	r4, r2
  402d42:	00a6      	lsls	r6, r4, #2
  402d44:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  402d48:	009d      	lsls	r5, r3, #2
  402d4a:	462b      	mov	r3, r5
  402d4c:	4634      	mov	r4, r6
  402d4e:	185b      	adds	r3, r3, r1
  402d50:	eb44 0402 	adc.w	r4, r4, r2
  402d54:	18db      	adds	r3, r3, r3
  402d56:	eb44 0404 	adc.w	r4, r4, r4
  402d5a:	4619      	mov	r1, r3
  402d5c:	4622      	mov	r2, r4
  402d5e:	f243 63af 	movw	r3, #13999	; 0x36af
  402d62:	f04f 0400 	mov.w	r4, #0
  402d66:	18cd      	adds	r5, r1, r3
  402d68:	eb42 0604 	adc.w	r6, r2, r4
  402d6c:	4628      	mov	r0, r5
  402d6e:	4631      	mov	r1, r6
  402d70:	4c17      	ldr	r4, [pc, #92]	; (402dd0 <can_app_reset+0x10c>)
  402d72:	f243 62b0 	movw	r2, #14000	; 0x36b0
  402d76:	f04f 0300 	mov.w	r3, #0
  402d7a:	47a0      	blx	r4
  402d7c:	4603      	mov	r3, r0
  402d7e:	460c      	mov	r4, r1
  402d80:	4618      	mov	r0, r3
  402d82:	4b14      	ldr	r3, [pc, #80]	; (402dd4 <can_app_reset+0x110>)
  402d84:	4798      	blx	r3
		can_reset_all_mailbox(CAN0);
  402d86:	480f      	ldr	r0, [pc, #60]	; (402dc4 <can_app_reset+0x100>)
  402d88:	4b14      	ldr	r3, [pc, #80]	; (402ddc <can_app_reset+0x118>)
  402d8a:	4798      	blx	r3
	can_mb_conf_t mb;
	mb.ul_mb_idx = 0; // Mailbox index 0 for RX
  402d8c:	2300      	movs	r3, #0
  402d8e:	603b      	str	r3, [r7, #0]
	mb.uc_obj_type = CAN_MB_RX_MODE; // Receive mode
  402d90:	2301      	movs	r3, #1
  402d92:	713b      	strb	r3, [r7, #4]
	mb.uc_id_ver = 0; // Standard ID (11-bit)
  402d94:	2300      	movs	r3, #0
  402d96:	717b      	strb	r3, [r7, #5]
	mb.ul_id_msk = CAN_MAM_MIDvA_Msk; // Mask for standard ID only
  402d98:	4b11      	ldr	r3, [pc, #68]	; (402de0 <can_app_reset+0x11c>)
  402d9a:	60fb      	str	r3, [r7, #12]
	mb.ul_id = CAN_MID_MIDvA(CAN_ID_POT_COMMAND); // Filter on command base ID
  402d9c:	f04f 6308 	mov.w	r3, #142606336	; 0x8800000
  402da0:	613b      	str	r3, [r7, #16]
	can_mailbox_init(CAN0, &mb); // Apply configuration
  402da2:	463b      	mov	r3, r7
  402da4:	4619      	mov	r1, r3
  402da6:	4807      	ldr	r0, [pc, #28]	; (402dc4 <can_app_reset+0x100>)
  402da8:	4b0e      	ldr	r3, [pc, #56]	; (402de4 <can_app_reset+0x120>)
  402daa:	4798      	blx	r3
	// Arm RX mailbox 0 to start receiving after reset
	can_mailbox_send_transfer_cmd(CAN0, &mb);
  402dac:	463b      	mov	r3, r7
  402dae:	4619      	mov	r1, r3
  402db0:	4804      	ldr	r0, [pc, #16]	; (402dc4 <can_app_reset+0x100>)
  402db2:	4b0d      	ldr	r3, [pc, #52]	; (402de8 <can_app_reset+0x124>)
  402db4:	4798      	blx	r3
	return true;	
  402db6:	2301      	movs	r3, #1
}
  402db8:	4618      	mov	r0, r3
  402dba:	3724      	adds	r7, #36	; 0x24
  402dbc:	46bd      	mov	sp, r7
  402dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402dc2:	bf00      	nop
  402dc4:	40010000 	.word	0x40010000
  402dc8:	00403a55 	.word	0x00403a55
  402dcc:	00402799 	.word	0x00402799
  402dd0:	00404251 	.word	0x00404251
  402dd4:	20000001 	.word	0x20000001
  402dd8:	00403a35 	.word	0x00403a35
  402ddc:	00403ded 	.word	0x00403ded
  402de0:	1ffc0000 	.word	0x1ffc0000
  402de4:	00403b4d 	.word	0x00403b4d
  402de8:	00403b15 	.word	0x00403b15

00402dec <can_rx_task>:
void can_rx_task(void *arg)
{
  402dec:	b580      	push	{r7, lr}
  402dee:	b090      	sub	sp, #64	; 0x40
  402df0:	af00      	add	r7, sp, #0
  402df2:	6078      	str	r0, [r7, #4]
	(void)arg; // Unused
	uint32_t error_count = 0;
  402df4:	2300      	movs	r3, #0
  402df6:	63fb      	str	r3, [r7, #60]	; 0x3c
	
	for (;;) {
		// Check CAN controller status first
		if (!can_app_get_status()) {
  402df8:	4b44      	ldr	r3, [pc, #272]	; (402f0c <can_rx_task+0x120>)
  402dfa:	4798      	blx	r3
  402dfc:	4603      	mov	r3, r0
  402dfe:	f083 0301 	eor.w	r3, r3, #1
  402e02:	b2db      	uxtb	r3, r3
  402e04:	2b00      	cmp	r3, #0
  402e06:	d00d      	beq.n	402e24 <can_rx_task+0x38>
			error_count++;
  402e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402e0a:	3301      	adds	r3, #1
  402e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (error_count > 100) { // After 100 consecutive errors, try to reinitialize
  402e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402e10:	2b64      	cmp	r3, #100	; 0x64
  402e12:	d903      	bls.n	402e1c <can_rx_task+0x30>
				can_app_reset();// Note: In a real system, you might want to reset the CAN controller here
  402e14:	4b3e      	ldr	r3, [pc, #248]	; (402f10 <can_rx_task+0x124>)
  402e16:	4798      	blx	r3
				error_count = 0;
  402e18:	2300      	movs	r3, #0
  402e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			vTaskDelay(pdMS_TO_TICKS(100)); // Wait longer on errors
  402e1c:	2064      	movs	r0, #100	; 0x64
  402e1e:	4b3d      	ldr	r3, [pc, #244]	; (402f14 <can_rx_task+0x128>)
  402e20:	4798      	blx	r3
			continue;
  402e22:	e072      	b.n	402f0a <can_rx_task+0x11e>
		}
		
		error_count = 0; // Reset error count on successful status check
  402e24:	2300      	movs	r3, #0
  402e26:	63fb      	str	r3, [r7, #60]	; 0x3c
		
		// Check if RX mailbox has data
		uint32_t mb_status = can_mailbox_get_status(CAN0, 0);
  402e28:	2100      	movs	r1, #0
  402e2a:	483b      	ldr	r0, [pc, #236]	; (402f18 <can_rx_task+0x12c>)
  402e2c:	4b3b      	ldr	r3, [pc, #236]	; (402f1c <can_rx_task+0x130>)
  402e2e:	4798      	blx	r3
  402e30:	6378      	str	r0, [r7, #52]	; 0x34
		if (mb_status & CAN_MSR_MRDY) { // If RX mailbox has data
  402e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  402e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
  402e38:	2b00      	cmp	r3, #0
  402e3a:	d063      	beq.n	402f04 <can_rx_task+0x118>
			can_mb_conf_t rx;
			rx.ul_mb_idx = 0;
  402e3c:	2300      	movs	r3, #0
  402e3e:	60bb      	str	r3, [r7, #8]
			
			// Read mailbox with error checking
			if (can_mailbox_read(CAN0, &rx) == CAN_MAILBOX_TRANSFER_OK) {
  402e40:	f107 0308 	add.w	r3, r7, #8
  402e44:	4619      	mov	r1, r3
  402e46:	4834      	ldr	r0, [pc, #208]	; (402f18 <can_rx_task+0x12c>)
  402e48:	4b35      	ldr	r3, [pc, #212]	; (402f20 <can_rx_task+0x134>)
  402e4a:	4798      	blx	r3
  402e4c:	4603      	mov	r3, r0
  402e4e:	2b00      	cmp	r3, #0
  402e50:	d158      	bne.n	402f04 <can_rx_task+0x118>
				uint8_t len = (uint8_t)(rx.ul_status >> CAN_MSR_MDLC_Pos) & 0xF; // Extract DLC
  402e52:	693b      	ldr	r3, [r7, #16]
  402e54:	0c1b      	lsrs	r3, r3, #16
  402e56:	b2db      	uxtb	r3, r3
  402e58:	f003 030f 	and.w	r3, r3, #15
  402e5c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				if (len > 8) len = 8; // Sanity check on length
  402e60:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
  402e64:	2b08      	cmp	r3, #8
  402e66:	d902      	bls.n	402e6e <can_rx_task+0x82>
  402e68:	2308      	movs	r3, #8
  402e6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				
				uint8_t data[8] = {0}; // Initialize to zero
  402e6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
  402e72:	2200      	movs	r2, #0
  402e74:	601a      	str	r2, [r3, #0]
  402e76:	605a      	str	r2, [r3, #4]
				// Unpack data words
				for (uint8_t i = 0; i < 4 && i < len; i++) {
  402e78:	2300      	movs	r3, #0
  402e7a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  402e7e:	e012      	b.n	402ea6 <can_rx_task+0xba>
					data[i] = (rx.ul_datal >> (i * 8)) & 0xFF;
  402e80:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
  402e84:	6a39      	ldr	r1, [r7, #32]
  402e86:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
  402e8a:	00d2      	lsls	r2, r2, #3
  402e8c:	fa21 f202 	lsr.w	r2, r1, r2
  402e90:	b2d2      	uxtb	r2, r2
  402e92:	f107 0140 	add.w	r1, r7, #64	; 0x40
  402e96:	440b      	add	r3, r1
  402e98:	f803 2c18 	strb.w	r2, [r3, #-24]
				for (uint8_t i = 0; i < 4 && i < len; i++) {
  402e9c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
  402ea0:	3301      	adds	r3, #1
  402ea2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  402ea6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
  402eaa:	2b03      	cmp	r3, #3
  402eac:	d805      	bhi.n	402eba <can_rx_task+0xce>
  402eae:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
  402eb2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
  402eb6:	429a      	cmp	r2, r3
  402eb8:	d3e2      	bcc.n	402e80 <can_rx_task+0x94>
				}
				for (uint8_t i = 0; i < 4 && (i + 4) < len; i++) {
  402eba:	2300      	movs	r3, #0
  402ebc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  402ec0:	e013      	b.n	402eea <can_rx_task+0xfe>
					data[4 + i] = (rx.ul_datah >> (i * 8)) & 0xFF;
  402ec2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
  402ec6:	3304      	adds	r3, #4
  402ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
  402eca:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
  402ece:	00d2      	lsls	r2, r2, #3
  402ed0:	fa21 f202 	lsr.w	r2, r1, r2
  402ed4:	b2d2      	uxtb	r2, r2
  402ed6:	f107 0140 	add.w	r1, r7, #64	; 0x40
  402eda:	440b      	add	r3, r1
  402edc:	f803 2c18 	strb.w	r2, [r3, #-24]
				for (uint8_t i = 0; i < 4 && (i + 4) < len; i++) {
  402ee0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
  402ee4:	3301      	adds	r3, #1
  402ee6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  402eea:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
  402eee:	2b03      	cmp	r3, #3
  402ef0:	d806      	bhi.n	402f00 <can_rx_task+0x114>
  402ef2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
  402ef6:	1d1a      	adds	r2, r3, #4
  402ef8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
  402efc:	429a      	cmp	r2, r3
  402efe:	dbe0      	blt.n	402ec2 <can_rx_task+0xd6>
				}
				
				// Extract CAN ID and process based on message type
				uint32_t can_id = rx.ul_fid;//(rx.ul_id >> CAN_MID_MIDvA_Pos) & 0x7FFu;
  402f00:	69fb      	ldr	r3, [r7, #28]
  402f02:	633b      	str	r3, [r7, #48]	; 0x30
				// Note: Other message IDs are received but not processed in this task
				// This allows loopback test (ID 0x123) to be received successfully
			}
		}
		
		vTaskDelay(pdMS_TO_TICKS(5)); // Small delay to yield CPU time
  402f04:	2005      	movs	r0, #5
  402f06:	4b03      	ldr	r3, [pc, #12]	; (402f14 <can_rx_task+0x128>)
  402f08:	4798      	blx	r3
	for (;;) {
  402f0a:	e775      	b.n	402df8 <can_rx_task+0xc>
  402f0c:	00402f25 	.word	0x00402f25
  402f10:	00402cc5 	.word	0x00402cc5
  402f14:	0040164d 	.word	0x0040164d
  402f18:	40010000 	.word	0x40010000
  402f1c:	00403aef 	.word	0x00403aef
  402f20:	00403c71 	.word	0x00403c71

00402f24 <can_app_get_status>:
	}
}
bool can_app_get_status(void){
  402f24:	b580      	push	{r7, lr}
  402f26:	b084      	sub	sp, #16
  402f28:	af00      	add	r7, sp, #0
	// Check if CAN controller is properly initialized and running
	if (CAN0->CAN_SR & CAN_SR_BOFF) {
  402f2a:	4b15      	ldr	r3, [pc, #84]	; (402f80 <can_app_get_status+0x5c>)
  402f2c:	691b      	ldr	r3, [r3, #16]
  402f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  402f32:	2b00      	cmp	r3, #0
  402f34:	d001      	beq.n	402f3a <can_app_get_status+0x16>
		return false; // CAN controller is in bus-off state (bad)
  402f36:	2300      	movs	r3, #0
  402f38:	e01e      	b.n	402f78 <can_app_get_status+0x54>
	}
	
	// Check if there are any error conditions
	uint32_t status = CAN0->CAN_SR;
  402f3a:	4b11      	ldr	r3, [pc, #68]	; (402f80 <can_app_get_status+0x5c>)
  402f3c:	691b      	ldr	r3, [r3, #16]
  402f3e:	60fb      	str	r3, [r7, #12]
	if (status & (CAN_SR_ERRA | CAN_SR_WARN | CAN_SR_BOFF)) {
  402f40:	68fb      	ldr	r3, [r7, #12]
  402f42:	f403 2330 	and.w	r3, r3, #720896	; 0xb0000
  402f46:	2b00      	cmp	r3, #0
  402f48:	d00d      	beq.n	402f66 <can_app_get_status+0x42>
		// DIAGNOSTIC: Store error status for debugging
		volatile uint32_t debug_can_status = status;
  402f4a:	68fb      	ldr	r3, [r7, #12]
  402f4c:	60bb      	str	r3, [r7, #8]
		volatile uint32_t debug_tx_errors = can_get_tx_error_cnt(CAN0);
  402f4e:	480c      	ldr	r0, [pc, #48]	; (402f80 <can_app_get_status+0x5c>)
  402f50:	4b0c      	ldr	r3, [pc, #48]	; (402f84 <can_app_get_status+0x60>)
  402f52:	4798      	blx	r3
  402f54:	4603      	mov	r3, r0
  402f56:	607b      	str	r3, [r7, #4]
		volatile uint32_t debug_rx_errors = can_get_rx_error_cnt(CAN0);
  402f58:	4809      	ldr	r0, [pc, #36]	; (402f80 <can_app_get_status+0x5c>)
  402f5a:	4b0b      	ldr	r3, [pc, #44]	; (402f88 <can_app_get_status+0x64>)
  402f5c:	4798      	blx	r3
  402f5e:	4603      	mov	r3, r0
  402f60:	603b      	str	r3, [r7, #0]
		// High error counts often indicate bit rate mismatch
		return false; // Error conditions present
  402f62:	2300      	movs	r3, #0
  402f64:	e008      	b.n	402f78 <can_app_get_status+0x54>
	}
	
	// Check if CAN controller is enabled
	if (!(CAN0->CAN_MR & CAN_MR_CANEN)) {
  402f66:	4b06      	ldr	r3, [pc, #24]	; (402f80 <can_app_get_status+0x5c>)
  402f68:	681b      	ldr	r3, [r3, #0]
  402f6a:	f003 0301 	and.w	r3, r3, #1
  402f6e:	2b00      	cmp	r3, #0
  402f70:	d101      	bne.n	402f76 <can_app_get_status+0x52>
		return false; // CAN controller not enabled
  402f72:	2300      	movs	r3, #0
  402f74:	e000      	b.n	402f78 <can_app_get_status+0x54>
	}
	
	return true; // CAN is working properly
  402f76:	2301      	movs	r3, #1
}
  402f78:	4618      	mov	r0, r3
  402f7a:	3710      	adds	r7, #16
  402f7c:	46bd      	mov	sp, r7
  402f7e:	bd80      	pop	{r7, pc}
  402f80:	40010000 	.word	0x40010000
  402f84:	00403a8d 	.word	0x00403a8d
  402f88:	00403aa9 	.word	0x00403aa9

00402f8c <can_diagnostic_info>:
	
	return false; // Test failed
}

void can_diagnostic_info(void)
{
  402f8c:	b580      	push	{r7, lr}
  402f8e:	b08c      	sub	sp, #48	; 0x30
  402f90:	af00      	add	r7, sp, #0
	// Comprehensive CAN diagnostic information
	volatile uint32_t can_sr = CAN0->CAN_SR;
  402f92:	4b38      	ldr	r3, [pc, #224]	; (403074 <can_diagnostic_info+0xe8>)
  402f94:	691b      	ldr	r3, [r3, #16]
  402f96:	62fb      	str	r3, [r7, #44]	; 0x2c
	volatile uint32_t can_mr = CAN0->CAN_MR;
  402f98:	4b36      	ldr	r3, [pc, #216]	; (403074 <can_diagnostic_info+0xe8>)
  402f9a:	681b      	ldr	r3, [r3, #0]
  402f9c:	62bb      	str	r3, [r7, #40]	; 0x28
	volatile uint32_t can_br = CAN0->CAN_BR;
  402f9e:	4b35      	ldr	r3, [pc, #212]	; (403074 <can_diagnostic_info+0xe8>)
  402fa0:	695b      	ldr	r3, [r3, #20]
  402fa2:	627b      	str	r3, [r7, #36]	; 0x24
	volatile uint32_t can_ecr = CAN0->CAN_ECR;
  402fa4:	4b33      	ldr	r3, [pc, #204]	; (403074 <can_diagnostic_info+0xe8>)
  402fa6:	6a1b      	ldr	r3, [r3, #32]
  402fa8:	623b      	str	r3, [r7, #32]
	
	// Mailbox statuses
	volatile uint32_t mb0_status = can_mailbox_get_status(CAN0, 0);
  402faa:	2100      	movs	r1, #0
  402fac:	4831      	ldr	r0, [pc, #196]	; (403074 <can_diagnostic_info+0xe8>)
  402fae:	4b32      	ldr	r3, [pc, #200]	; (403078 <can_diagnostic_info+0xec>)
  402fb0:	4798      	blx	r3
  402fb2:	4603      	mov	r3, r0
  402fb4:	61fb      	str	r3, [r7, #28]
	volatile uint32_t mb1_status = can_mailbox_get_status(CAN0, 1);
  402fb6:	2101      	movs	r1, #1
  402fb8:	482e      	ldr	r0, [pc, #184]	; (403074 <can_diagnostic_info+0xe8>)
  402fba:	4b2f      	ldr	r3, [pc, #188]	; (403078 <can_diagnostic_info+0xec>)
  402fbc:	4798      	blx	r3
  402fbe:	4603      	mov	r3, r0
  402fc0:	61bb      	str	r3, [r7, #24]
	volatile uint32_t mb2_status = can_mailbox_get_status(CAN0, 2);
  402fc2:	2102      	movs	r1, #2
  402fc4:	482b      	ldr	r0, [pc, #172]	; (403074 <can_diagnostic_info+0xe8>)
  402fc6:	4b2c      	ldr	r3, [pc, #176]	; (403078 <can_diagnostic_info+0xec>)
  402fc8:	4798      	blx	r3
  402fca:	4603      	mov	r3, r0
  402fcc:	617b      	str	r3, [r7, #20]
	
	// Error counters
	volatile uint32_t tx_errors = can_get_tx_error_cnt(CAN0);
  402fce:	4829      	ldr	r0, [pc, #164]	; (403074 <can_diagnostic_info+0xe8>)
  402fd0:	4b2a      	ldr	r3, [pc, #168]	; (40307c <can_diagnostic_info+0xf0>)
  402fd2:	4798      	blx	r3
  402fd4:	4603      	mov	r3, r0
  402fd6:	613b      	str	r3, [r7, #16]
	volatile uint32_t rx_errors = can_get_rx_error_cnt(CAN0);
  402fd8:	4826      	ldr	r0, [pc, #152]	; (403074 <can_diagnostic_info+0xe8>)
  402fda:	4b29      	ldr	r3, [pc, #164]	; (403080 <can_diagnostic_info+0xf4>)
  402fdc:	4798      	blx	r3
  402fde:	4603      	mov	r3, r0
  402fe0:	60fb      	str	r3, [r7, #12]
	
	// Mailbox ready flags
	volatile bool mb0_ready = (mb0_status & CAN_MSR_MRDY) != 0;
  402fe2:	69fb      	ldr	r3, [r7, #28]
  402fe4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
  402fe8:	2b00      	cmp	r3, #0
  402fea:	bf14      	ite	ne
  402fec:	2301      	movne	r3, #1
  402fee:	2300      	moveq	r3, #0
  402ff0:	b2db      	uxtb	r3, r3
  402ff2:	72fb      	strb	r3, [r7, #11]
	volatile bool mb1_ready = (mb1_status & CAN_MSR_MRDY) != 0;
  402ff4:	69bb      	ldr	r3, [r7, #24]
  402ff6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
  402ffa:	2b00      	cmp	r3, #0
  402ffc:	bf14      	ite	ne
  402ffe:	2301      	movne	r3, #1
  403000:	2300      	moveq	r3, #0
  403002:	b2db      	uxtb	r3, r3
  403004:	72bb      	strb	r3, [r7, #10]
	volatile bool mb2_ready = (mb2_status & CAN_MSR_MRDY) != 0;
  403006:	697b      	ldr	r3, [r7, #20]
  403008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
  40300c:	2b00      	cmp	r3, #0
  40300e:	bf14      	ite	ne
  403010:	2301      	movne	r3, #1
  403012:	2300      	moveq	r3, #0
  403014:	b2db      	uxtb	r3, r3
  403016:	727b      	strb	r3, [r7, #9]
	
	// Error conditions
	volatile bool bus_off = (can_sr & CAN_SR_BOFF) != 0;
  403018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40301a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  40301e:	2b00      	cmp	r3, #0
  403020:	bf14      	ite	ne
  403022:	2301      	movne	r3, #1
  403024:	2300      	moveq	r3, #0
  403026:	b2db      	uxtb	r3, r3
  403028:	723b      	strb	r3, [r7, #8]
	volatile bool error_active = (can_sr & CAN_SR_ERRA) != 0;
  40302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40302c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  403030:	2b00      	cmp	r3, #0
  403032:	bf14      	ite	ne
  403034:	2301      	movne	r3, #1
  403036:	2300      	moveq	r3, #0
  403038:	b2db      	uxtb	r3, r3
  40303a:	71fb      	strb	r3, [r7, #7]
	volatile bool warning = (can_sr & CAN_SR_WARN) != 0;
  40303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  403042:	2b00      	cmp	r3, #0
  403044:	bf14      	ite	ne
  403046:	2301      	movne	r3, #1
  403048:	2300      	moveq	r3, #0
  40304a:	b2db      	uxtb	r3, r3
  40304c:	71bb      	strb	r3, [r7, #6]
	
	// Store all diagnostic info in volatile variables for debugging
	(void)can_sr; (void)can_mr; (void)can_br; (void)can_ecr;
  40304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403050:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403054:	6a3b      	ldr	r3, [r7, #32]
	(void)mb0_status; (void)mb1_status; (void)mb2_status;
  403056:	69fb      	ldr	r3, [r7, #28]
  403058:	69bb      	ldr	r3, [r7, #24]
  40305a:	697b      	ldr	r3, [r7, #20]
	(void)tx_errors; (void)rx_errors;
  40305c:	693b      	ldr	r3, [r7, #16]
  40305e:	68fb      	ldr	r3, [r7, #12]
	(void)mb0_ready; (void)mb1_ready; (void)mb2_ready;
  403060:	7afb      	ldrb	r3, [r7, #11]
  403062:	7abb      	ldrb	r3, [r7, #10]
  403064:	7a7b      	ldrb	r3, [r7, #9]
	(void)bus_off; (void)error_active; (void)warning;
  403066:	7a3b      	ldrb	r3, [r7, #8]
  403068:	79fb      	ldrb	r3, [r7, #7]
  40306a:	79bb      	ldrb	r3, [r7, #6]
}
  40306c:	bf00      	nop
  40306e:	3730      	adds	r7, #48	; 0x30
  403070:	46bd      	mov	sp, r7
  403072:	bd80      	pop	{r7, pc}
  403074:	40010000 	.word	0x40010000
  403078:	00403aef 	.word	0x00403aef
  40307c:	00403a8d 	.word	0x00403a8d
  403080:	00403aa9 	.word	0x00403aa9

00403084 <can_status_task>:

void can_status_task(void *arg)
{
  403084:	b580      	push	{r7, lr}
  403086:	b084      	sub	sp, #16
  403088:	af00      	add	r7, sp, #0
  40308a:	6078      	str	r0, [r7, #4]
	(void)arg; // Unused
	uint32_t status_report_interval = 0;
  40308c:	2300      	movs	r3, #0
  40308e:	60fb      	str	r3, [r7, #12]
	
	for (;;) {
		// Check CAN status periodically
		bool can_ok = can_app_get_status();
  403090:	4b15      	ldr	r3, [pc, #84]	; (4030e8 <can_status_task+0x64>)
  403092:	4798      	blx	r3
  403094:	4603      	mov	r3, r0
  403096:	72fb      	strb	r3, [r7, #11]
		
		// Run diagnostics every 5 seconds
		if (status_report_interval % 5 == 0) {
  403098:	68f9      	ldr	r1, [r7, #12]
  40309a:	4b14      	ldr	r3, [pc, #80]	; (4030ec <can_status_task+0x68>)
  40309c:	fba3 2301 	umull	r2, r3, r3, r1
  4030a0:	089a      	lsrs	r2, r3, #2
  4030a2:	4613      	mov	r3, r2
  4030a4:	009b      	lsls	r3, r3, #2
  4030a6:	4413      	add	r3, r2
  4030a8:	1aca      	subs	r2, r1, r3
  4030aa:	2a00      	cmp	r2, #0
  4030ac:	d101      	bne.n	4030b2 <can_status_task+0x2e>
			can_diagnostic_info();
  4030ae:	4b10      	ldr	r3, [pc, #64]	; (4030f0 <can_status_task+0x6c>)
  4030b0:	4798      	blx	r3
		}
		
		// Report status every 10 seconds (10000ms / 1000ms = 10 iterations)
		status_report_interval++;
  4030b2:	68fb      	ldr	r3, [r7, #12]
  4030b4:	3301      	adds	r3, #1
  4030b6:	60fb      	str	r3, [r7, #12]
		if (status_report_interval >= 10) {
  4030b8:	68fb      	ldr	r3, [r7, #12]
  4030ba:	2b09      	cmp	r3, #9
  4030bc:	d90f      	bls.n	4030de <can_status_task+0x5a>
			status_report_interval = 0;
  4030be:	2300      	movs	r3, #0
  4030c0:	60fb      	str	r3, [r7, #12]
			
			// Send status message
			uint8_t status_data[2] = {0};
  4030c2:	2300      	movs	r3, #0
  4030c4:	813b      	strh	r3, [r7, #8]
			status_data[0] = can_ok ? 0x01 : 0x00; // Status byte
  4030c6:	7afb      	ldrb	r3, [r7, #11]
  4030c8:	723b      	strb	r3, [r7, #8]
			status_data[1] = 0x00; // Reserved
  4030ca:	2300      	movs	r3, #0
  4030cc:	727b      	strb	r3, [r7, #9]
			
			// Use the dedicated status ID
			can_app_tx(CAN_ID_STATUS, status_data, 2);
  4030ce:	f107 0308 	add.w	r3, r7, #8
  4030d2:	2202      	movs	r2, #2
  4030d4:	4619      	mov	r1, r3
  4030d6:	f44f 7000 	mov.w	r0, #512	; 0x200
  4030da:	4b06      	ldr	r3, [pc, #24]	; (4030f4 <can_status_task+0x70>)
  4030dc:	4798      	blx	r3
		}
		
		vTaskDelay(pdMS_TO_TICKS(1000)); // Check every second
  4030de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4030e2:	4b05      	ldr	r3, [pc, #20]	; (4030f8 <can_status_task+0x74>)
  4030e4:	4798      	blx	r3
	for (;;) {
  4030e6:	e7d3      	b.n	403090 <can_status_task+0xc>
  4030e8:	00402f25 	.word	0x00402f25
  4030ec:	cccccccd 	.word	0xcccccccd
  4030f0:	00402f8d 	.word	0x00402f8d
  4030f4:	00402af1 	.word	0x00402af1
  4030f8:	0040164d 	.word	0x0040164d

004030fc <encoder_init>:

#ifndef portTICK_PERIOD_MS
#define portTICK_PERIOD_MS portTICK_RATE_MS // Legacy macro mapping
#endif
bool encoder_init(void)
{
  4030fc:	b598      	push	{r3, r4, r7, lr}
  4030fe:	af00      	add	r7, sp, #0
    // Enable PIO clocks for encoder pins
    pmc_enable_periph_clk(ID_PIOA);
  403100:	2009      	movs	r0, #9
  403102:	4b44      	ldr	r3, [pc, #272]	; (403214 <encoder_init+0x118>)
  403104:	4798      	blx	r3
    pmc_enable_periph_clk(ID_PIOD);
  403106:	200c      	movs	r0, #12
  403108:	4b42      	ldr	r3, [pc, #264]	; (403214 <encoder_init+0x118>)
  40310a:	4798      	blx	r3
    
    // Configure encoder pins as inputs with pull-up
    pio_configure(PIOA, PIO_INPUT, ENC1_A_PIN, PIO_PULLUP | PIO_DEBOUNCE);
  40310c:	2309      	movs	r3, #9
  40310e:	2220      	movs	r2, #32
  403110:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403114:	4840      	ldr	r0, [pc, #256]	; (403218 <encoder_init+0x11c>)
  403116:	4c41      	ldr	r4, [pc, #260]	; (40321c <encoder_init+0x120>)
  403118:	47a0      	blx	r4
    pio_configure(PIOA, PIO_INPUT, ENC1_B_PIN, PIO_PULLUP | PIO_DEBOUNCE);
  40311a:	2309      	movs	r3, #9
  40311c:	2202      	movs	r2, #2
  40311e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403122:	483d      	ldr	r0, [pc, #244]	; (403218 <encoder_init+0x11c>)
  403124:	4c3d      	ldr	r4, [pc, #244]	; (40321c <encoder_init+0x120>)
  403126:	47a0      	blx	r4
    pio_configure(PIOA, PIO_INPUT, ENC2_A_PIN, PIO_PULLUP | PIO_DEBOUNCE);
  403128:	2309      	movs	r3, #9
  40312a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40312e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403132:	4839      	ldr	r0, [pc, #228]	; (403218 <encoder_init+0x11c>)
  403134:	4c39      	ldr	r4, [pc, #228]	; (40321c <encoder_init+0x120>)
  403136:	47a0      	blx	r4
    pio_configure(PIOA, PIO_INPUT, ENC2_B_PIN, PIO_PULLUP | PIO_DEBOUNCE);
  403138:	2309      	movs	r3, #9
  40313a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40313e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403142:	4835      	ldr	r0, [pc, #212]	; (403218 <encoder_init+0x11c>)
  403144:	4c35      	ldr	r4, [pc, #212]	; (40321c <encoder_init+0x120>)
  403146:	47a0      	blx	r4
    
    // Configure enable pins as outputs and set them high (enable encoders)
    pio_configure(PIOD, PIO_OUTPUT_0, ENC1_ENABLE_PIN, PIO_DEFAULT);
  403148:	2300      	movs	r3, #0
  40314a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40314e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403152:	4833      	ldr	r0, [pc, #204]	; (403220 <encoder_init+0x124>)
  403154:	4c31      	ldr	r4, [pc, #196]	; (40321c <encoder_init+0x120>)
  403156:	47a0      	blx	r4
    pio_clear(PIOD, ENC1_ENABLE_PIN);  // Enable encoder 1
  403158:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40315c:	4830      	ldr	r0, [pc, #192]	; (403220 <encoder_init+0x124>)
  40315e:	4b31      	ldr	r3, [pc, #196]	; (403224 <encoder_init+0x128>)
  403160:	4798      	blx	r3
    
    if (ENCODER2_AVAILABLE) {
        pio_configure(PIOD, PIO_OUTPUT_0, ENC2_ENABLE_PIN, PIO_DEFAULT);
  403162:	2300      	movs	r3, #0
  403164:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  403168:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40316c:	482c      	ldr	r0, [pc, #176]	; (403220 <encoder_init+0x124>)
  40316e:	4c2b      	ldr	r4, [pc, #172]	; (40321c <encoder_init+0x120>)
  403170:	47a0      	blx	r4
        pio_clear(PIOD, ENC2_ENABLE_PIN);  // Enable encoder 2
  403172:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403176:	482a      	ldr	r0, [pc, #168]	; (403220 <encoder_init+0x124>)
  403178:	4b2a      	ldr	r3, [pc, #168]	; (403224 <encoder_init+0x128>)
  40317a:	4798      	blx	r3
    }
    
    // Initialize encoder data structures
    encoder1_data.position = 0;
  40317c:	4b2a      	ldr	r3, [pc, #168]	; (403228 <encoder_init+0x12c>)
  40317e:	2200      	movs	r2, #0
  403180:	601a      	str	r2, [r3, #0]
    encoder1_data.velocity = 0;
  403182:	4b29      	ldr	r3, [pc, #164]	; (403228 <encoder_init+0x12c>)
  403184:	2200      	movs	r2, #0
  403186:	605a      	str	r2, [r3, #4]
    encoder1_data.smoothed_velocity = 0;
  403188:	4b27      	ldr	r3, [pc, #156]	; (403228 <encoder_init+0x12c>)
  40318a:	2200      	movs	r2, #0
  40318c:	609a      	str	r2, [r3, #8]
    encoder1_data.direction = 0;
  40318e:	4b26      	ldr	r3, [pc, #152]	; (403228 <encoder_init+0x12c>)
  403190:	2200      	movs	r2, #0
  403192:	731a      	strb	r2, [r3, #12]
    encoder1_data.state_a = 0;
  403194:	4b24      	ldr	r3, [pc, #144]	; (403228 <encoder_init+0x12c>)
  403196:	2200      	movs	r2, #0
  403198:	735a      	strb	r2, [r3, #13]
    encoder1_data.state_b = 0;
  40319a:	4b23      	ldr	r3, [pc, #140]	; (403228 <encoder_init+0x12c>)
  40319c:	2200      	movs	r2, #0
  40319e:	739a      	strb	r2, [r3, #14]
    encoder1_data.prev_state_a = 0;
  4031a0:	4b21      	ldr	r3, [pc, #132]	; (403228 <encoder_init+0x12c>)
  4031a2:	2200      	movs	r2, #0
  4031a4:	73da      	strb	r2, [r3, #15]
    encoder1_data.prev_state_b = 0;
  4031a6:	4b20      	ldr	r3, [pc, #128]	; (403228 <encoder_init+0x12c>)
  4031a8:	2200      	movs	r2, #0
  4031aa:	741a      	strb	r2, [r3, #16]
    encoder1_data.last_update_time = 0;
  4031ac:	4b1e      	ldr	r3, [pc, #120]	; (403228 <encoder_init+0x12c>)
  4031ae:	2200      	movs	r2, #0
  4031b0:	615a      	str	r2, [r3, #20]
    encoder1_data.last_direction_change = 0;
  4031b2:	4b1d      	ldr	r3, [pc, #116]	; (403228 <encoder_init+0x12c>)
  4031b4:	2200      	movs	r2, #0
  4031b6:	619a      	str	r2, [r3, #24]
    encoder1_data.pulse_count = 0;
  4031b8:	4b1b      	ldr	r3, [pc, #108]	; (403228 <encoder_init+0x12c>)
  4031ba:	2200      	movs	r2, #0
  4031bc:	61da      	str	r2, [r3, #28]
    encoder1_data.velocity_window_start = 0;
  4031be:	4b1a      	ldr	r3, [pc, #104]	; (403228 <encoder_init+0x12c>)
  4031c0:	2200      	movs	r2, #0
  4031c2:	621a      	str	r2, [r3, #32]
    
    encoder2_data.position = 0;
  4031c4:	4b19      	ldr	r3, [pc, #100]	; (40322c <encoder_init+0x130>)
  4031c6:	2200      	movs	r2, #0
  4031c8:	601a      	str	r2, [r3, #0]
    encoder2_data.velocity = 0;
  4031ca:	4b18      	ldr	r3, [pc, #96]	; (40322c <encoder_init+0x130>)
  4031cc:	2200      	movs	r2, #0
  4031ce:	605a      	str	r2, [r3, #4]
    encoder2_data.smoothed_velocity = 0;
  4031d0:	4b16      	ldr	r3, [pc, #88]	; (40322c <encoder_init+0x130>)
  4031d2:	2200      	movs	r2, #0
  4031d4:	609a      	str	r2, [r3, #8]
    encoder2_data.direction = 0;
  4031d6:	4b15      	ldr	r3, [pc, #84]	; (40322c <encoder_init+0x130>)
  4031d8:	2200      	movs	r2, #0
  4031da:	731a      	strb	r2, [r3, #12]
    encoder2_data.state_a = 0;
  4031dc:	4b13      	ldr	r3, [pc, #76]	; (40322c <encoder_init+0x130>)
  4031de:	2200      	movs	r2, #0
  4031e0:	735a      	strb	r2, [r3, #13]
    encoder2_data.state_b = 0;
  4031e2:	4b12      	ldr	r3, [pc, #72]	; (40322c <encoder_init+0x130>)
  4031e4:	2200      	movs	r2, #0
  4031e6:	739a      	strb	r2, [r3, #14]
    encoder2_data.prev_state_a = 0;
  4031e8:	4b10      	ldr	r3, [pc, #64]	; (40322c <encoder_init+0x130>)
  4031ea:	2200      	movs	r2, #0
  4031ec:	73da      	strb	r2, [r3, #15]
    encoder2_data.prev_state_b = 0;
  4031ee:	4b0f      	ldr	r3, [pc, #60]	; (40322c <encoder_init+0x130>)
  4031f0:	2200      	movs	r2, #0
  4031f2:	741a      	strb	r2, [r3, #16]
    encoder2_data.last_update_time = 0;
  4031f4:	4b0d      	ldr	r3, [pc, #52]	; (40322c <encoder_init+0x130>)
  4031f6:	2200      	movs	r2, #0
  4031f8:	615a      	str	r2, [r3, #20]
    encoder2_data.last_direction_change = 0;
  4031fa:	4b0c      	ldr	r3, [pc, #48]	; (40322c <encoder_init+0x130>)
  4031fc:	2200      	movs	r2, #0
  4031fe:	619a      	str	r2, [r3, #24]
    encoder2_data.pulse_count = 0;
  403200:	4b0a      	ldr	r3, [pc, #40]	; (40322c <encoder_init+0x130>)
  403202:	2200      	movs	r2, #0
  403204:	61da      	str	r2, [r3, #28]
    encoder2_data.velocity_window_start = 0;
  403206:	4b09      	ldr	r3, [pc, #36]	; (40322c <encoder_init+0x130>)
  403208:	2200      	movs	r2, #0
  40320a:	621a      	str	r2, [r3, #32]
    
    return true;
  40320c:	2301      	movs	r3, #1
}
  40320e:	4618      	mov	r0, r3
  403210:	bd98      	pop	{r3, r4, r7, pc}
  403212:	bf00      	nop
  403214:	004041cd 	.word	0x004041cd
  403218:	400e0e00 	.word	0x400e0e00
  40321c:	004040b5 	.word	0x004040b5
  403220:	400e1400 	.word	0x400e1400
  403224:	00403e5d 	.word	0x00403e5d
  403228:	2000a624 	.word	0x2000a624
  40322c:	2000a648 	.word	0x2000a648

00403230 <encoder_poll>:

void encoder_poll(encoder_data_t* enc_data)
{
  403230:	b580      	push	{r7, lr}
  403232:	b084      	sub	sp, #16
  403234:	af00      	add	r7, sp, #0
  403236:	6078      	str	r0, [r7, #4]
    if (enc_data == &encoder2_data && !ENCODER2_AVAILABLE) {
        return;
    }
    
    // Read current encoder states
    uint8_t current_a = (pio_get(PIOA, PIO_TYPE_PIO_INPUT, enc_data == &encoder1_data ? ENC1_A_PIN : ENC2_A_PIN)) ? 1 : 0;
  403238:	687b      	ldr	r3, [r7, #4]
  40323a:	4a94      	ldr	r2, [pc, #592]	; (40348c <encoder_poll+0x25c>)
  40323c:	4293      	cmp	r3, r2
  40323e:	d101      	bne.n	403244 <encoder_poll+0x14>
  403240:	2320      	movs	r3, #32
  403242:	e001      	b.n	403248 <encoder_poll+0x18>
  403244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403248:	461a      	mov	r2, r3
  40324a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40324e:	4890      	ldr	r0, [pc, #576]	; (403490 <encoder_poll+0x260>)
  403250:	4b90      	ldr	r3, [pc, #576]	; (403494 <encoder_poll+0x264>)
  403252:	4798      	blx	r3
  403254:	4603      	mov	r3, r0
  403256:	2b00      	cmp	r3, #0
  403258:	bf14      	ite	ne
  40325a:	2301      	movne	r3, #1
  40325c:	2300      	moveq	r3, #0
  40325e:	b2db      	uxtb	r3, r3
  403260:	737b      	strb	r3, [r7, #13]
    uint8_t current_b = (pio_get(PIOA, PIO_TYPE_PIO_INPUT, enc_data == &encoder1_data ? ENC1_B_PIN : ENC2_B_PIN)) ? 1 : 0;
  403262:	687b      	ldr	r3, [r7, #4]
  403264:	4a89      	ldr	r2, [pc, #548]	; (40348c <encoder_poll+0x25c>)
  403266:	4293      	cmp	r3, r2
  403268:	d101      	bne.n	40326e <encoder_poll+0x3e>
  40326a:	2302      	movs	r3, #2
  40326c:	e001      	b.n	403272 <encoder_poll+0x42>
  40326e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  403272:	461a      	mov	r2, r3
  403274:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403278:	4885      	ldr	r0, [pc, #532]	; (403490 <encoder_poll+0x260>)
  40327a:	4b86      	ldr	r3, [pc, #536]	; (403494 <encoder_poll+0x264>)
  40327c:	4798      	blx	r3
  40327e:	4603      	mov	r3, r0
  403280:	2b00      	cmp	r3, #0
  403282:	bf14      	ite	ne
  403284:	2301      	movne	r3, #1
  403286:	2300      	moveq	r3, #0
  403288:	b2db      	uxtb	r3, r3
  40328a:	733b      	strb	r3, [r7, #12]
    
    // Get current time (using FreeRTOS tick count)
    uint32_t current_time = xTaskGetTickCount() * portTICK_PERIOD_MS;
  40328c:	4b82      	ldr	r3, [pc, #520]	; (403498 <encoder_poll+0x268>)
  40328e:	4798      	blx	r3
  403290:	60b8      	str	r0, [r7, #8]
    
    // Check for state change (quadrature decoding)
    if (current_a != enc_data->state_a || current_b != enc_data->state_b) {
  403292:	687b      	ldr	r3, [r7, #4]
  403294:	7b5b      	ldrb	r3, [r3, #13]
  403296:	7b7a      	ldrb	r2, [r7, #13]
  403298:	429a      	cmp	r2, r3
  40329a:	d105      	bne.n	4032a8 <encoder_poll+0x78>
  40329c:	687b      	ldr	r3, [r7, #4]
  40329e:	7b9b      	ldrb	r3, [r3, #14]
  4032a0:	7b3a      	ldrb	r2, [r7, #12]
  4032a2:	429a      	cmp	r2, r3
  4032a4:	f000 8111 	beq.w	4034ca <encoder_poll+0x29a>
        // Store previous states
        enc_data->prev_state_a = enc_data->state_a;
  4032a8:	687b      	ldr	r3, [r7, #4]
  4032aa:	7b5a      	ldrb	r2, [r3, #13]
  4032ac:	687b      	ldr	r3, [r7, #4]
  4032ae:	73da      	strb	r2, [r3, #15]
        enc_data->prev_state_b = enc_data->state_b;
  4032b0:	687b      	ldr	r3, [r7, #4]
  4032b2:	7b9a      	ldrb	r2, [r3, #14]
  4032b4:	687b      	ldr	r3, [r7, #4]
  4032b6:	741a      	strb	r2, [r3, #16]
        
        // Update current states
        enc_data->state_a = current_a;
  4032b8:	687b      	ldr	r3, [r7, #4]
  4032ba:	7b7a      	ldrb	r2, [r7, #13]
  4032bc:	735a      	strb	r2, [r3, #13]
        enc_data->state_b = current_b;
  4032be:	687b      	ldr	r3, [r7, #4]
  4032c0:	7b3a      	ldrb	r2, [r7, #12]
  4032c2:	739a      	strb	r2, [r3, #14]
        
        // Quadrature decoding logic
        // Forward: A leads B (A changes first)
        // Reverse: B leads A (B changes first)
        uint8_t new_direction = 0;
  4032c4:	2300      	movs	r3, #0
  4032c6:	73fb      	strb	r3, [r7, #15]
        bool position_changed = false;
  4032c8:	2300      	movs	r3, #0
  4032ca:	73bb      	strb	r3, [r7, #14]
        
        if (enc_data->prev_state_a == 0 && enc_data->prev_state_b == 0) {
  4032cc:	687b      	ldr	r3, [r7, #4]
  4032ce:	7bdb      	ldrb	r3, [r3, #15]
  4032d0:	2b00      	cmp	r3, #0
  4032d2:	d133      	bne.n	40333c <encoder_poll+0x10c>
  4032d4:	687b      	ldr	r3, [r7, #4]
  4032d6:	7c1b      	ldrb	r3, [r3, #16]
  4032d8:	2b00      	cmp	r3, #0
  4032da:	d12f      	bne.n	40333c <encoder_poll+0x10c>
            if (enc_data->state_a == 1 && enc_data->state_b == 0) {
  4032dc:	687b      	ldr	r3, [r7, #4]
  4032de:	7b5b      	ldrb	r3, [r3, #13]
  4032e0:	2b01      	cmp	r3, #1
  4032e2:	d112      	bne.n	40330a <encoder_poll+0xda>
  4032e4:	687b      	ldr	r3, [r7, #4]
  4032e6:	7b9b      	ldrb	r3, [r3, #14]
  4032e8:	2b00      	cmp	r3, #0
  4032ea:	d10e      	bne.n	40330a <encoder_poll+0xda>
                // Forward: A leads
                enc_data->position++;
  4032ec:	687b      	ldr	r3, [r7, #4]
  4032ee:	681b      	ldr	r3, [r3, #0]
  4032f0:	1c5a      	adds	r2, r3, #1
  4032f2:	687b      	ldr	r3, [r7, #4]
  4032f4:	601a      	str	r2, [r3, #0]
                new_direction = 1;
  4032f6:	2301      	movs	r3, #1
  4032f8:	73fb      	strb	r3, [r7, #15]
                enc_data->pulse_count++;
  4032fa:	687b      	ldr	r3, [r7, #4]
  4032fc:	69db      	ldr	r3, [r3, #28]
  4032fe:	1c5a      	adds	r2, r3, #1
  403300:	687b      	ldr	r3, [r7, #4]
  403302:	61da      	str	r2, [r3, #28]
                position_changed = true;
  403304:	2301      	movs	r3, #1
  403306:	73bb      	strb	r3, [r7, #14]
            if (enc_data->state_a == 1 && enc_data->state_b == 0) {
  403308:	e0bb      	b.n	403482 <encoder_poll+0x252>
            } else if (enc_data->state_a == 0 && enc_data->state_b == 1) {
  40330a:	687b      	ldr	r3, [r7, #4]
  40330c:	7b5b      	ldrb	r3, [r3, #13]
  40330e:	2b00      	cmp	r3, #0
  403310:	f040 80b7 	bne.w	403482 <encoder_poll+0x252>
  403314:	687b      	ldr	r3, [r7, #4]
  403316:	7b9b      	ldrb	r3, [r3, #14]
  403318:	2b01      	cmp	r3, #1
  40331a:	f040 80b2 	bne.w	403482 <encoder_poll+0x252>
                // Reverse: B leads
                enc_data->position--;
  40331e:	687b      	ldr	r3, [r7, #4]
  403320:	681b      	ldr	r3, [r3, #0]
  403322:	1e5a      	subs	r2, r3, #1
  403324:	687b      	ldr	r3, [r7, #4]
  403326:	601a      	str	r2, [r3, #0]
                new_direction = 2;
  403328:	2302      	movs	r3, #2
  40332a:	73fb      	strb	r3, [r7, #15]
                enc_data->pulse_count++;
  40332c:	687b      	ldr	r3, [r7, #4]
  40332e:	69db      	ldr	r3, [r3, #28]
  403330:	1c5a      	adds	r2, r3, #1
  403332:	687b      	ldr	r3, [r7, #4]
  403334:	61da      	str	r2, [r3, #28]
                position_changed = true;
  403336:	2301      	movs	r3, #1
  403338:	73bb      	strb	r3, [r7, #14]
            if (enc_data->state_a == 1 && enc_data->state_b == 0) {
  40333a:	e0a2      	b.n	403482 <encoder_poll+0x252>
            }
        } else if (enc_data->prev_state_a == 1 && enc_data->prev_state_b == 0) {
  40333c:	687b      	ldr	r3, [r7, #4]
  40333e:	7bdb      	ldrb	r3, [r3, #15]
  403340:	2b01      	cmp	r3, #1
  403342:	d132      	bne.n	4033aa <encoder_poll+0x17a>
  403344:	687b      	ldr	r3, [r7, #4]
  403346:	7c1b      	ldrb	r3, [r3, #16]
  403348:	2b00      	cmp	r3, #0
  40334a:	d12e      	bne.n	4033aa <encoder_poll+0x17a>
            if (enc_data->state_a == 1 && enc_data->state_b == 1) {
  40334c:	687b      	ldr	r3, [r7, #4]
  40334e:	7b5b      	ldrb	r3, [r3, #13]
  403350:	2b01      	cmp	r3, #1
  403352:	d112      	bne.n	40337a <encoder_poll+0x14a>
  403354:	687b      	ldr	r3, [r7, #4]
  403356:	7b9b      	ldrb	r3, [r3, #14]
  403358:	2b01      	cmp	r3, #1
  40335a:	d10e      	bne.n	40337a <encoder_poll+0x14a>
                // Forward: A leads
                enc_data->position++;
  40335c:	687b      	ldr	r3, [r7, #4]
  40335e:	681b      	ldr	r3, [r3, #0]
  403360:	1c5a      	adds	r2, r3, #1
  403362:	687b      	ldr	r3, [r7, #4]
  403364:	601a      	str	r2, [r3, #0]
                new_direction = 1;
  403366:	2301      	movs	r3, #1
  403368:	73fb      	strb	r3, [r7, #15]
                enc_data->pulse_count++;
  40336a:	687b      	ldr	r3, [r7, #4]
  40336c:	69db      	ldr	r3, [r3, #28]
  40336e:	1c5a      	adds	r2, r3, #1
  403370:	687b      	ldr	r3, [r7, #4]
  403372:	61da      	str	r2, [r3, #28]
                position_changed = true;
  403374:	2301      	movs	r3, #1
  403376:	73bb      	strb	r3, [r7, #14]
            if (enc_data->state_a == 1 && enc_data->state_b == 1) {
  403378:	e085      	b.n	403486 <encoder_poll+0x256>
            } else if (enc_data->state_a == 0 && enc_data->state_b == 0) {
  40337a:	687b      	ldr	r3, [r7, #4]
  40337c:	7b5b      	ldrb	r3, [r3, #13]
  40337e:	2b00      	cmp	r3, #0
  403380:	f040 8081 	bne.w	403486 <encoder_poll+0x256>
  403384:	687b      	ldr	r3, [r7, #4]
  403386:	7b9b      	ldrb	r3, [r3, #14]
  403388:	2b00      	cmp	r3, #0
  40338a:	d17c      	bne.n	403486 <encoder_poll+0x256>
                // Reverse: B leads
                enc_data->position--;
  40338c:	687b      	ldr	r3, [r7, #4]
  40338e:	681b      	ldr	r3, [r3, #0]
  403390:	1e5a      	subs	r2, r3, #1
  403392:	687b      	ldr	r3, [r7, #4]
  403394:	601a      	str	r2, [r3, #0]
                new_direction = 2;
  403396:	2302      	movs	r3, #2
  403398:	73fb      	strb	r3, [r7, #15]
                enc_data->pulse_count++;
  40339a:	687b      	ldr	r3, [r7, #4]
  40339c:	69db      	ldr	r3, [r3, #28]
  40339e:	1c5a      	adds	r2, r3, #1
  4033a0:	687b      	ldr	r3, [r7, #4]
  4033a2:	61da      	str	r2, [r3, #28]
                position_changed = true;
  4033a4:	2301      	movs	r3, #1
  4033a6:	73bb      	strb	r3, [r7, #14]
            if (enc_data->state_a == 1 && enc_data->state_b == 1) {
  4033a8:	e06d      	b.n	403486 <encoder_poll+0x256>
            }
        } else if (enc_data->prev_state_a == 1 && enc_data->prev_state_b == 1) {
  4033aa:	687b      	ldr	r3, [r7, #4]
  4033ac:	7bdb      	ldrb	r3, [r3, #15]
  4033ae:	2b01      	cmp	r3, #1
  4033b0:	d131      	bne.n	403416 <encoder_poll+0x1e6>
  4033b2:	687b      	ldr	r3, [r7, #4]
  4033b4:	7c1b      	ldrb	r3, [r3, #16]
  4033b6:	2b01      	cmp	r3, #1
  4033b8:	d12d      	bne.n	403416 <encoder_poll+0x1e6>
            if (enc_data->state_a == 0 && enc_data->state_b == 1) {
  4033ba:	687b      	ldr	r3, [r7, #4]
  4033bc:	7b5b      	ldrb	r3, [r3, #13]
  4033be:	2b00      	cmp	r3, #0
  4033c0:	d112      	bne.n	4033e8 <encoder_poll+0x1b8>
  4033c2:	687b      	ldr	r3, [r7, #4]
  4033c4:	7b9b      	ldrb	r3, [r3, #14]
  4033c6:	2b01      	cmp	r3, #1
  4033c8:	d10e      	bne.n	4033e8 <encoder_poll+0x1b8>
                // Forward: A leads
                enc_data->position++;
  4033ca:	687b      	ldr	r3, [r7, #4]
  4033cc:	681b      	ldr	r3, [r3, #0]
  4033ce:	1c5a      	adds	r2, r3, #1
  4033d0:	687b      	ldr	r3, [r7, #4]
  4033d2:	601a      	str	r2, [r3, #0]
                new_direction = 1;
  4033d4:	2301      	movs	r3, #1
  4033d6:	73fb      	strb	r3, [r7, #15]
                enc_data->pulse_count++;
  4033d8:	687b      	ldr	r3, [r7, #4]
  4033da:	69db      	ldr	r3, [r3, #28]
  4033dc:	1c5a      	adds	r2, r3, #1
  4033de:	687b      	ldr	r3, [r7, #4]
  4033e0:	61da      	str	r2, [r3, #28]
                position_changed = true;
  4033e2:	2301      	movs	r3, #1
  4033e4:	73bb      	strb	r3, [r7, #14]
            if (enc_data->state_a == 0 && enc_data->state_b == 1) {
  4033e6:	e059      	b.n	40349c <encoder_poll+0x26c>
            } else if (enc_data->state_a == 1 && enc_data->state_b == 0) {
  4033e8:	687b      	ldr	r3, [r7, #4]
  4033ea:	7b5b      	ldrb	r3, [r3, #13]
  4033ec:	2b01      	cmp	r3, #1
  4033ee:	d155      	bne.n	40349c <encoder_poll+0x26c>
  4033f0:	687b      	ldr	r3, [r7, #4]
  4033f2:	7b9b      	ldrb	r3, [r3, #14]
  4033f4:	2b00      	cmp	r3, #0
  4033f6:	d151      	bne.n	40349c <encoder_poll+0x26c>
                // Reverse: B leads
                enc_data->position--;
  4033f8:	687b      	ldr	r3, [r7, #4]
  4033fa:	681b      	ldr	r3, [r3, #0]
  4033fc:	1e5a      	subs	r2, r3, #1
  4033fe:	687b      	ldr	r3, [r7, #4]
  403400:	601a      	str	r2, [r3, #0]
                new_direction = 2;
  403402:	2302      	movs	r3, #2
  403404:	73fb      	strb	r3, [r7, #15]
                enc_data->pulse_count++;
  403406:	687b      	ldr	r3, [r7, #4]
  403408:	69db      	ldr	r3, [r3, #28]
  40340a:	1c5a      	adds	r2, r3, #1
  40340c:	687b      	ldr	r3, [r7, #4]
  40340e:	61da      	str	r2, [r3, #28]
                position_changed = true;
  403410:	2301      	movs	r3, #1
  403412:	73bb      	strb	r3, [r7, #14]
            if (enc_data->state_a == 0 && enc_data->state_b == 1) {
  403414:	e042      	b.n	40349c <encoder_poll+0x26c>
            }
        } else if (enc_data->prev_state_a == 0 && enc_data->prev_state_b == 1) {
  403416:	687b      	ldr	r3, [r7, #4]
  403418:	7bdb      	ldrb	r3, [r3, #15]
  40341a:	2b00      	cmp	r3, #0
  40341c:	d13f      	bne.n	40349e <encoder_poll+0x26e>
  40341e:	687b      	ldr	r3, [r7, #4]
  403420:	7c1b      	ldrb	r3, [r3, #16]
  403422:	2b01      	cmp	r3, #1
  403424:	d13b      	bne.n	40349e <encoder_poll+0x26e>
            if (enc_data->state_a == 0 && enc_data->state_b == 0) {
  403426:	687b      	ldr	r3, [r7, #4]
  403428:	7b5b      	ldrb	r3, [r3, #13]
  40342a:	2b00      	cmp	r3, #0
  40342c:	d112      	bne.n	403454 <encoder_poll+0x224>
  40342e:	687b      	ldr	r3, [r7, #4]
  403430:	7b9b      	ldrb	r3, [r3, #14]
  403432:	2b00      	cmp	r3, #0
  403434:	d10e      	bne.n	403454 <encoder_poll+0x224>
                // Forward: A leads
                enc_data->position++;
  403436:	687b      	ldr	r3, [r7, #4]
  403438:	681b      	ldr	r3, [r3, #0]
  40343a:	1c5a      	adds	r2, r3, #1
  40343c:	687b      	ldr	r3, [r7, #4]
  40343e:	601a      	str	r2, [r3, #0]
                new_direction = 1;
  403440:	2301      	movs	r3, #1
  403442:	73fb      	strb	r3, [r7, #15]
                enc_data->pulse_count++;
  403444:	687b      	ldr	r3, [r7, #4]
  403446:	69db      	ldr	r3, [r3, #28]
  403448:	1c5a      	adds	r2, r3, #1
  40344a:	687b      	ldr	r3, [r7, #4]
  40344c:	61da      	str	r2, [r3, #28]
                position_changed = true;
  40344e:	2301      	movs	r3, #1
  403450:	73bb      	strb	r3, [r7, #14]
  403452:	e024      	b.n	40349e <encoder_poll+0x26e>
            } else if (enc_data->state_a == 1 && enc_data->state_b == 1) {
  403454:	687b      	ldr	r3, [r7, #4]
  403456:	7b5b      	ldrb	r3, [r3, #13]
  403458:	2b01      	cmp	r3, #1
  40345a:	d120      	bne.n	40349e <encoder_poll+0x26e>
  40345c:	687b      	ldr	r3, [r7, #4]
  40345e:	7b9b      	ldrb	r3, [r3, #14]
  403460:	2b01      	cmp	r3, #1
  403462:	d11c      	bne.n	40349e <encoder_poll+0x26e>
                // Reverse: B leads
                enc_data->position--;
  403464:	687b      	ldr	r3, [r7, #4]
  403466:	681b      	ldr	r3, [r3, #0]
  403468:	1e5a      	subs	r2, r3, #1
  40346a:	687b      	ldr	r3, [r7, #4]
  40346c:	601a      	str	r2, [r3, #0]
                new_direction = 2;
  40346e:	2302      	movs	r3, #2
  403470:	73fb      	strb	r3, [r7, #15]
                enc_data->pulse_count++;
  403472:	687b      	ldr	r3, [r7, #4]
  403474:	69db      	ldr	r3, [r3, #28]
  403476:	1c5a      	adds	r2, r3, #1
  403478:	687b      	ldr	r3, [r7, #4]
  40347a:	61da      	str	r2, [r3, #28]
                position_changed = true;
  40347c:	2301      	movs	r3, #1
  40347e:	73bb      	strb	r3, [r7, #14]
  403480:	e00d      	b.n	40349e <encoder_poll+0x26e>
            if (enc_data->state_a == 1 && enc_data->state_b == 0) {
  403482:	bf00      	nop
  403484:	e00b      	b.n	40349e <encoder_poll+0x26e>
            if (enc_data->state_a == 1 && enc_data->state_b == 1) {
  403486:	bf00      	nop
  403488:	e009      	b.n	40349e <encoder_poll+0x26e>
  40348a:	bf00      	nop
  40348c:	2000a624 	.word	0x2000a624
  403490:	400e0e00 	.word	0x400e0e00
  403494:	00403e79 	.word	0x00403e79
  403498:	00401871 	.word	0x00401871
            if (enc_data->state_a == 0 && enc_data->state_b == 1) {
  40349c:	bf00      	nop
            }
        }
        
        // Update direction only if change is allowed (debouncing)
        if (position_changed && is_direction_change_allowed(enc_data, current_time, new_direction)) {
  40349e:	7bbb      	ldrb	r3, [r7, #14]
  4034a0:	2b00      	cmp	r3, #0
  4034a2:	d00e      	beq.n	4034c2 <encoder_poll+0x292>
  4034a4:	7bfb      	ldrb	r3, [r7, #15]
  4034a6:	461a      	mov	r2, r3
  4034a8:	68b9      	ldr	r1, [r7, #8]
  4034aa:	6878      	ldr	r0, [r7, #4]
  4034ac:	4b18      	ldr	r3, [pc, #96]	; (403510 <encoder_poll+0x2e0>)
  4034ae:	4798      	blx	r3
  4034b0:	4603      	mov	r3, r0
  4034b2:	2b00      	cmp	r3, #0
  4034b4:	d005      	beq.n	4034c2 <encoder_poll+0x292>
            enc_data->direction = new_direction;
  4034b6:	687b      	ldr	r3, [r7, #4]
  4034b8:	7bfa      	ldrb	r2, [r7, #15]
  4034ba:	731a      	strb	r2, [r3, #12]
            enc_data->last_direction_change = current_time;
  4034bc:	687b      	ldr	r3, [r7, #4]
  4034be:	68ba      	ldr	r2, [r7, #8]
  4034c0:	619a      	str	r2, [r3, #24]
        }
        
        enc_data->last_update_time = current_time;
  4034c2:	687b      	ldr	r3, [r7, #4]
  4034c4:	68ba      	ldr	r2, [r7, #8]
  4034c6:	615a      	str	r2, [r3, #20]
    if (current_a != enc_data->state_a || current_b != enc_data->state_b) {
  4034c8:	e008      	b.n	4034dc <encoder_poll+0x2ac>
    } else {
        // No state change - check if we should reset direction to stopped
        if (current_time - enc_data->last_update_time > 50) { // 50ms timeout
  4034ca:	687b      	ldr	r3, [r7, #4]
  4034cc:	695b      	ldr	r3, [r3, #20]
  4034ce:	68ba      	ldr	r2, [r7, #8]
  4034d0:	1ad3      	subs	r3, r2, r3
  4034d2:	2b32      	cmp	r3, #50	; 0x32
  4034d4:	d902      	bls.n	4034dc <encoder_poll+0x2ac>
            enc_data->direction = 0; // Stopped
  4034d6:	687b      	ldr	r3, [r7, #4]
  4034d8:	2200      	movs	r2, #0
  4034da:	731a      	strb	r2, [r3, #12]
        }
    }
    
    // Calculate velocity periodically
    if (current_time - enc_data->velocity_window_start >= VELOCITY_CALC_WINDOW_MS) {
  4034dc:	687b      	ldr	r3, [r7, #4]
  4034de:	6a1b      	ldr	r3, [r3, #32]
  4034e0:	68ba      	ldr	r2, [r7, #8]
  4034e2:	1ad3      	subs	r3, r2, r3
  4034e4:	2b63      	cmp	r3, #99	; 0x63
  4034e6:	d90f      	bls.n	403508 <encoder_poll+0x2d8>
        enc_data->velocity = calculate_velocity(enc_data, current_time);
  4034e8:	68b9      	ldr	r1, [r7, #8]
  4034ea:	6878      	ldr	r0, [r7, #4]
  4034ec:	4b09      	ldr	r3, [pc, #36]	; (403514 <encoder_poll+0x2e4>)
  4034ee:	4798      	blx	r3
  4034f0:	4602      	mov	r2, r0
  4034f2:	687b      	ldr	r3, [r7, #4]
  4034f4:	605a      	str	r2, [r3, #4]
        apply_velocity_smoothing(enc_data);
  4034f6:	6878      	ldr	r0, [r7, #4]
  4034f8:	4b07      	ldr	r3, [pc, #28]	; (403518 <encoder_poll+0x2e8>)
  4034fa:	4798      	blx	r3
        enc_data->velocity_window_start = current_time;
  4034fc:	687b      	ldr	r3, [r7, #4]
  4034fe:	68ba      	ldr	r2, [r7, #8]
  403500:	621a      	str	r2, [r3, #32]
        enc_data->pulse_count = 0;
  403502:	687b      	ldr	r3, [r7, #4]
  403504:	2200      	movs	r2, #0
  403506:	61da      	str	r2, [r3, #28]
    }
}
  403508:	3710      	adds	r7, #16
  40350a:	46bd      	mov	sp, r7
  40350c:	bd80      	pop	{r7, pc}
  40350e:	bf00      	nop
  403510:	004035d7 	.word	0x004035d7
  403514:	0040351d 	.word	0x0040351d
  403518:	0040357d 	.word	0x0040357d

0040351c <calculate_velocity>:

int32_t calculate_velocity(encoder_data_t* enc_data, uint32_t current_time)
{
  40351c:	b480      	push	{r7}
  40351e:	b085      	sub	sp, #20
  403520:	af00      	add	r7, sp, #0
  403522:	6078      	str	r0, [r7, #4]
  403524:	6039      	str	r1, [r7, #0]
    if (enc_data->velocity_window_start == 0) {
  403526:	687b      	ldr	r3, [r7, #4]
  403528:	6a1b      	ldr	r3, [r3, #32]
  40352a:	2b00      	cmp	r3, #0
  40352c:	d104      	bne.n	403538 <calculate_velocity+0x1c>
        enc_data->velocity_window_start = current_time;
  40352e:	687b      	ldr	r3, [r7, #4]
  403530:	683a      	ldr	r2, [r7, #0]
  403532:	621a      	str	r2, [r3, #32]
        return 0;
  403534:	2300      	movs	r3, #0
  403536:	e01b      	b.n	403570 <calculate_velocity+0x54>
    }
    
    uint32_t time_diff = current_time - enc_data->velocity_window_start;
  403538:	687b      	ldr	r3, [r7, #4]
  40353a:	6a1b      	ldr	r3, [r3, #32]
  40353c:	683a      	ldr	r2, [r7, #0]
  40353e:	1ad3      	subs	r3, r2, r3
  403540:	60bb      	str	r3, [r7, #8]
    if (time_diff == 0) return 0;
  403542:	68bb      	ldr	r3, [r7, #8]
  403544:	2b00      	cmp	r3, #0
  403546:	d101      	bne.n	40354c <calculate_velocity+0x30>
  403548:	2300      	movs	r3, #0
  40354a:	e011      	b.n	403570 <calculate_velocity+0x54>
    
    // Calculate velocity in pulses per second
    int32_t velocity = (enc_data->pulse_count * 1000) / time_diff;
  40354c:	687b      	ldr	r3, [r7, #4]
  40354e:	69db      	ldr	r3, [r3, #28]
  403550:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403554:	fb02 f203 	mul.w	r2, r2, r3
  403558:	68bb      	ldr	r3, [r7, #8]
  40355a:	fbb2 f3f3 	udiv	r3, r2, r3
  40355e:	60fb      	str	r3, [r7, #12]
    
    // Apply direction sign
    if (enc_data->direction == 2) { // Reverse
  403560:	687b      	ldr	r3, [r7, #4]
  403562:	7b1b      	ldrb	r3, [r3, #12]
  403564:	2b02      	cmp	r3, #2
  403566:	d102      	bne.n	40356e <calculate_velocity+0x52>
        velocity = -velocity;
  403568:	68fb      	ldr	r3, [r7, #12]
  40356a:	425b      	negs	r3, r3
  40356c:	60fb      	str	r3, [r7, #12]
    }
    
    return velocity;
  40356e:	68fb      	ldr	r3, [r7, #12]
}
  403570:	4618      	mov	r0, r3
  403572:	3714      	adds	r7, #20
  403574:	46bd      	mov	sp, r7
  403576:	f85d 7b04 	ldr.w	r7, [sp], #4
  40357a:	4770      	bx	lr

0040357c <apply_velocity_smoothing>:

void apply_velocity_smoothing(encoder_data_t* enc_data)
{
  40357c:	b480      	push	{r7}
  40357e:	b085      	sub	sp, #20
  403580:	af00      	add	r7, sp, #0
  403582:	6078      	str	r0, [r7, #4]
    // Apply exponential smoothing to reduce jerky velocity changes
    float smoothing_factor = VELOCITY_SMOOTHING_FACTOR;
  403584:	f04f 0300 	mov.w	r3, #0
  403588:	60fb      	str	r3, [r7, #12]
    enc_data->smoothed_velocity = (int32_t)(smoothing_factor * enc_data->smoothed_velocity + 
  40358a:	687b      	ldr	r3, [r7, #4]
  40358c:	689b      	ldr	r3, [r3, #8]
  40358e:	ee07 3a90 	vmov	s15, r3
  403592:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  403596:	edd7 7a03 	vldr	s15, [r7, #12]
  40359a:	ee27 7a27 	vmul.f32	s14, s14, s15
                                           (1.0f - smoothing_factor) * enc_data->velocity);
  40359e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  4035a2:	edd7 7a03 	vldr	s15, [r7, #12]
  4035a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
  4035aa:	687b      	ldr	r3, [r7, #4]
  4035ac:	685b      	ldr	r3, [r3, #4]
  4035ae:	ee07 3a90 	vmov	s15, r3
  4035b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4035b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    enc_data->smoothed_velocity = (int32_t)(smoothing_factor * enc_data->smoothed_velocity + 
  4035ba:	ee77 7a27 	vadd.f32	s15, s14, s15
  4035be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  4035c2:	ee17 2a90 	vmov	r2, s15
  4035c6:	687b      	ldr	r3, [r7, #4]
  4035c8:	609a      	str	r2, [r3, #8]
}
  4035ca:	bf00      	nop
  4035cc:	3714      	adds	r7, #20
  4035ce:	46bd      	mov	sp, r7
  4035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4035d4:	4770      	bx	lr

004035d6 <is_direction_change_allowed>:

bool is_direction_change_allowed(encoder_data_t* enc_data, uint32_t current_time, uint8_t new_direction)
{
  4035d6:	b480      	push	{r7}
  4035d8:	b085      	sub	sp, #20
  4035da:	af00      	add	r7, sp, #0
  4035dc:	60f8      	str	r0, [r7, #12]
  4035de:	60b9      	str	r1, [r7, #8]
  4035e0:	4613      	mov	r3, r2
  4035e2:	71fb      	strb	r3, [r7, #7]
    // Don't allow direction changes if we're already in that direction
    if (enc_data->direction == new_direction) {
  4035e4:	68fb      	ldr	r3, [r7, #12]
  4035e6:	7b1b      	ldrb	r3, [r3, #12]
  4035e8:	79fa      	ldrb	r2, [r7, #7]
  4035ea:	429a      	cmp	r2, r3
  4035ec:	d101      	bne.n	4035f2 <is_direction_change_allowed+0x1c>
        return false;
  4035ee:	2300      	movs	r3, #0
  4035f0:	e013      	b.n	40361a <is_direction_change_allowed+0x44>
    }
    
    // Don't allow direction changes too frequently (debouncing)
    if (current_time - enc_data->last_direction_change < DIRECTION_DEBOUNCE_MS) {
  4035f2:	68fb      	ldr	r3, [r7, #12]
  4035f4:	699b      	ldr	r3, [r3, #24]
  4035f6:	68ba      	ldr	r2, [r7, #8]
  4035f8:	1ad3      	subs	r3, r2, r3
  4035fa:	2b63      	cmp	r3, #99	; 0x63
  4035fc:	d801      	bhi.n	403602 <is_direction_change_allowed+0x2c>
        return false;
  4035fe:	2300      	movs	r3, #0
  403600:	e00b      	b.n	40361a <is_direction_change_allowed+0x44>
    }
    
    // Only allow direction change if we have some velocity (not just noise)
    if (abs(enc_data->velocity) < 2) { // Minimum velocity threshold
  403602:	68fb      	ldr	r3, [r7, #12]
  403604:	685b      	ldr	r3, [r3, #4]
  403606:	f1b3 3fff 	cmp.w	r3, #4294967295
  40360a:	db05      	blt.n	403618 <is_direction_change_allowed+0x42>
  40360c:	68fb      	ldr	r3, [r7, #12]
  40360e:	685b      	ldr	r3, [r3, #4]
  403610:	2b01      	cmp	r3, #1
  403612:	dc01      	bgt.n	403618 <is_direction_change_allowed+0x42>
        return false;
  403614:	2300      	movs	r3, #0
  403616:	e000      	b.n	40361a <is_direction_change_allowed+0x44>
    }
    
    return true;
  403618:	2301      	movs	r3, #1
}
  40361a:	4618      	mov	r0, r3
  40361c:	3714      	adds	r7, #20
  40361e:	46bd      	mov	sp, r7
  403620:	f85d 7b04 	ldr.w	r7, [sp], #4
  403624:	4770      	bx	lr
	...

00403628 <encoder_task>:

void encoder_task(void *arg)
{
  403628:	b580      	push	{r7, lr}
  40362a:	b08a      	sub	sp, #40	; 0x28
  40362c:	af00      	add	r7, sp, #0
  40362e:	6078      	str	r0, [r7, #4]
    (void)arg; // Unused parameter
    
    // Initialize encoders
    if (!encoder_init()) {
  403630:	4b40      	ldr	r3, [pc, #256]	; (403734 <encoder_task+0x10c>)
  403632:	4798      	blx	r3
  403634:	4603      	mov	r3, r0
  403636:	f083 0301 	eor.w	r3, r3, #1
  40363a:	b2db      	uxtb	r3, r3
  40363c:	2b00      	cmp	r3, #0
  40363e:	d004      	beq.n	40364a <encoder_task+0x22>
        // Encoder initialization failed
        while(1) {
            vTaskDelay(pdMS_TO_TICKS(1000));
  403640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  403644:	4b3c      	ldr	r3, [pc, #240]	; (403738 <encoder_task+0x110>)
  403646:	4798      	blx	r3
  403648:	e7fa      	b.n	403640 <encoder_task+0x18>
        }
    }
    
    // Wait a bit for encoders to stabilize
    vTaskDelay(pdMS_TO_TICKS(100));
  40364a:	2064      	movs	r0, #100	; 0x64
  40364c:	4b3a      	ldr	r3, [pc, #232]	; (403738 <encoder_task+0x110>)
  40364e:	4798      	blx	r3
    
    for (;;) {
        // Poll both encoders
        encoder_poll(&encoder1_data);
  403650:	483a      	ldr	r0, [pc, #232]	; (40373c <encoder_task+0x114>)
  403652:	4b3b      	ldr	r3, [pc, #236]	; (403740 <encoder_task+0x118>)
  403654:	4798      	blx	r3
        if (ENCODER2_AVAILABLE) {
            encoder_poll(&encoder2_data);
  403656:	483b      	ldr	r0, [pc, #236]	; (403744 <encoder_task+0x11c>)
  403658:	4b39      	ldr	r3, [pc, #228]	; (403740 <encoder_task+0x118>)
  40365a:	4798      	blx	r3
        }
        
        // Send encoder 1 data over CAN
        uint8_t enc1_data[6];
		if (encoder1_data.smoothed_velocity <0) encoder1_data.smoothed_velocity = encoder1_data.smoothed_velocity * (-1);
  40365c:	4b37      	ldr	r3, [pc, #220]	; (40373c <encoder_task+0x114>)
  40365e:	689b      	ldr	r3, [r3, #8]
  403660:	2b00      	cmp	r3, #0
  403662:	da04      	bge.n	40366e <encoder_task+0x46>
  403664:	4b35      	ldr	r3, [pc, #212]	; (40373c <encoder_task+0x114>)
  403666:	689b      	ldr	r3, [r3, #8]
  403668:	425b      	negs	r3, r3
  40366a:	4a34      	ldr	r2, [pc, #208]	; (40373c <encoder_task+0x114>)
  40366c:	6093      	str	r3, [r2, #8]
        enc1_data[0] = (uint8_t)(encoder1_data.direction & 0xFF);
  40366e:	4b33      	ldr	r3, [pc, #204]	; (40373c <encoder_task+0x114>)
  403670:	7b1b      	ldrb	r3, [r3, #12]
  403672:	f887 3020 	strb.w	r3, [r7, #32]
        enc1_data[1] = (uint8_t)(encoder1_data.smoothed_velocity & 0xFF);
  403676:	4b31      	ldr	r3, [pc, #196]	; (40373c <encoder_task+0x114>)
  403678:	689b      	ldr	r3, [r3, #8]
  40367a:	b2db      	uxtb	r3, r3
  40367c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        enc1_data[2] = (uint8_t)((encoder1_data.smoothed_velocity >> 8) & 0xFF);
  403680:	4b2e      	ldr	r3, [pc, #184]	; (40373c <encoder_task+0x114>)
  403682:	689b      	ldr	r3, [r3, #8]
  403684:	121b      	asrs	r3, r3, #8
  403686:	b2db      	uxtb	r3, r3
  403688:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        enc1_data[3] = (uint8_t)((encoder1_data.smoothed_velocity >> 16) & 0xFF);
  40368c:	4b2b      	ldr	r3, [pc, #172]	; (40373c <encoder_task+0x114>)
  40368e:	689b      	ldr	r3, [r3, #8]
  403690:	141b      	asrs	r3, r3, #16
  403692:	b2db      	uxtb	r3, r3
  403694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        enc1_data[4] = (uint8_t)((encoder1_data.smoothed_velocity >> 24) & 0xFF);
  403698:	4b28      	ldr	r3, [pc, #160]	; (40373c <encoder_task+0x114>)
  40369a:	689b      	ldr	r3, [r3, #8]
  40369c:	161b      	asrs	r3, r3, #24
  40369e:	b2db      	uxtb	r3, r3
  4036a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        enc1_data[5] = (uint8_t)(encoder1_data.position & 0xFF);
  4036a4:	4b25      	ldr	r3, [pc, #148]	; (40373c <encoder_task+0x114>)
  4036a6:	681b      	ldr	r3, [r3, #0]
  4036a8:	b2db      	uxtb	r3, r3
  4036aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        
        can_app_tx(CAN_ID_ENCODER1_DIR_VEL, enc1_data, 6);
  4036ae:	f107 0320 	add.w	r3, r7, #32
  4036b2:	2206      	movs	r2, #6
  4036b4:	4619      	mov	r1, r3
  4036b6:	f44f 7098 	mov.w	r0, #304	; 0x130
  4036ba:	4b23      	ldr	r3, [pc, #140]	; (403748 <encoder_task+0x120>)
  4036bc:	4798      	blx	r3
        
        // Debug: Store encoder data for debugging
        volatile uint32_t debug_enc1_direction = encoder1_data.direction;
  4036be:	4b1f      	ldr	r3, [pc, #124]	; (40373c <encoder_task+0x114>)
  4036c0:	7b1b      	ldrb	r3, [r3, #12]
  4036c2:	61fb      	str	r3, [r7, #28]
        volatile uint32_t debug_enc1_velocity = encoder1_data.velocity;
  4036c4:	4b1d      	ldr	r3, [pc, #116]	; (40373c <encoder_task+0x114>)
  4036c6:	685b      	ldr	r3, [r3, #4]
  4036c8:	61bb      	str	r3, [r7, #24]
        volatile uint32_t debug_enc1_smoothed_velocity = encoder1_data.smoothed_velocity;
  4036ca:	4b1c      	ldr	r3, [pc, #112]	; (40373c <encoder_task+0x114>)
  4036cc:	689b      	ldr	r3, [r3, #8]
  4036ce:	617b      	str	r3, [r7, #20]
        volatile uint32_t debug_enc1_position = encoder1_data.position;
  4036d0:	4b1a      	ldr	r3, [pc, #104]	; (40373c <encoder_task+0x114>)
  4036d2:	681b      	ldr	r3, [r3, #0]
  4036d4:	613b      	str	r3, [r7, #16]
        
        // Send encoder 2 data over CAN (only if available)
        if (ENCODER2_AVAILABLE) {
            uint8_t enc2_data[6];
			if (encoder2_data.smoothed_velocity <0){
  4036d6:	4b1b      	ldr	r3, [pc, #108]	; (403744 <encoder_task+0x11c>)
  4036d8:	689b      	ldr	r3, [r3, #8]
  4036da:	2b00      	cmp	r3, #0
  4036dc:	da04      	bge.n	4036e8 <encoder_task+0xc0>
				 encoder2_data.smoothed_velocity = encoder2_data.smoothed_velocity * (-1);
  4036de:	4b19      	ldr	r3, [pc, #100]	; (403744 <encoder_task+0x11c>)
  4036e0:	689b      	ldr	r3, [r3, #8]
  4036e2:	425b      	negs	r3, r3
  4036e4:	4a17      	ldr	r2, [pc, #92]	; (403744 <encoder_task+0x11c>)
  4036e6:	6093      	str	r3, [r2, #8]
			}
            enc2_data[0] = (uint8_t)(encoder2_data.direction & 0xFF);
  4036e8:	4b16      	ldr	r3, [pc, #88]	; (403744 <encoder_task+0x11c>)
  4036ea:	7b1b      	ldrb	r3, [r3, #12]
  4036ec:	723b      	strb	r3, [r7, #8]
            enc2_data[1] = (uint8_t)(encoder2_data.smoothed_velocity & 0xFF);
  4036ee:	4b15      	ldr	r3, [pc, #84]	; (403744 <encoder_task+0x11c>)
  4036f0:	689b      	ldr	r3, [r3, #8]
  4036f2:	b2db      	uxtb	r3, r3
  4036f4:	727b      	strb	r3, [r7, #9]
            enc2_data[2] = (uint8_t)((encoder2_data.smoothed_velocity >> 8) & 0xFF);
  4036f6:	4b13      	ldr	r3, [pc, #76]	; (403744 <encoder_task+0x11c>)
  4036f8:	689b      	ldr	r3, [r3, #8]
  4036fa:	121b      	asrs	r3, r3, #8
  4036fc:	b2db      	uxtb	r3, r3
  4036fe:	72bb      	strb	r3, [r7, #10]
            enc2_data[3] = (uint8_t)((encoder2_data.smoothed_velocity >> 16) & 0xFF);
  403700:	4b10      	ldr	r3, [pc, #64]	; (403744 <encoder_task+0x11c>)
  403702:	689b      	ldr	r3, [r3, #8]
  403704:	141b      	asrs	r3, r3, #16
  403706:	b2db      	uxtb	r3, r3
  403708:	72fb      	strb	r3, [r7, #11]
            enc2_data[4] = (uint8_t)((encoder2_data.smoothed_velocity >> 24) & 0xFF);
  40370a:	4b0e      	ldr	r3, [pc, #56]	; (403744 <encoder_task+0x11c>)
  40370c:	689b      	ldr	r3, [r3, #8]
  40370e:	161b      	asrs	r3, r3, #24
  403710:	b2db      	uxtb	r3, r3
  403712:	733b      	strb	r3, [r7, #12]
            enc2_data[5] = (uint8_t)(encoder2_data.position & 0xFF);
  403714:	4b0b      	ldr	r3, [pc, #44]	; (403744 <encoder_task+0x11c>)
  403716:	681b      	ldr	r3, [r3, #0]
  403718:	b2db      	uxtb	r3, r3
  40371a:	737b      	strb	r3, [r7, #13]
            
            can_app_tx(CAN_ID_ENCODER2_DIR_VEL, enc2_data, 6);
  40371c:	f107 0308 	add.w	r3, r7, #8
  403720:	2206      	movs	r2, #6
  403722:	4619      	mov	r1, r3
  403724:	f240 1031 	movw	r0, #305	; 0x131
  403728:	4b07      	ldr	r3, [pc, #28]	; (403748 <encoder_task+0x120>)
  40372a:	4798      	blx	r3
        }
        
        // Wait for next polling cycle
        vTaskDelay(pdMS_TO_TICKS(ENCODER_POLLING_RATE_MS));
  40372c:	200a      	movs	r0, #10
  40372e:	4b02      	ldr	r3, [pc, #8]	; (403738 <encoder_task+0x110>)
  403730:	4798      	blx	r3
    for (;;) {
  403732:	e78d      	b.n	403650 <encoder_task+0x28>
  403734:	004030fd 	.word	0x004030fd
  403738:	0040164d 	.word	0x0040164d
  40373c:	2000a624 	.word	0x2000a624
  403740:	00403231 	.word	0x00403231
  403744:	2000a648 	.word	0x2000a648
  403748:	00402af1 	.word	0x00402af1

0040374c <task_test>:
#ifndef portTICK_PERIOD_MS
#define portTICK_PERIOD_MS portTICK_RATE_MS // Legacy macro mapping
#endif


void task_test(void *arg){
  40374c:	b580      	push	{r7, lr}
  40374e:	b084      	sub	sp, #16
  403750:	af00      	add	r7, sp, #0
  403752:	6078      	str	r0, [r7, #4]
	(void)arg; // Unused parameter
	uint8_t msb=0xAA, lsb=0x55; 
  403754:	23aa      	movs	r3, #170	; 0xaa
  403756:	73fb      	strb	r3, [r7, #15]
  403758:	2355      	movs	r3, #85	; 0x55
  40375a:	73bb      	strb	r3, [r7, #14]
	while(1) {
		uint8_t payload[2] = { msb, lsb };
  40375c:	7bfb      	ldrb	r3, [r7, #15]
  40375e:	733b      	strb	r3, [r7, #12]
  403760:	7bbb      	ldrb	r3, [r7, #14]
  403762:	737b      	strb	r3, [r7, #13]
		can_app_tx(CAN_ID_LOADCELL, payload, 2); // Publish loadcell sample over CAN
  403764:	f107 030c 	add.w	r3, r7, #12
  403768:	2202      	movs	r2, #2
  40376a:	4619      	mov	r1, r3
  40376c:	f44f 7090 	mov.w	r0, #288	; 0x120
  403770:	4b02      	ldr	r3, [pc, #8]	; (40377c <task_test+0x30>)
  403772:	4798      	blx	r3
		vTaskDelay(pdMS_TO_TICKS(100)); // Sample at ~500 Hz  == 2 milli seconds
  403774:	2064      	movs	r0, #100	; 0x64
  403776:	4b02      	ldr	r3, [pc, #8]	; (403780 <task_test+0x34>)
  403778:	4798      	blx	r3
	while(1) {
  40377a:	e7ef      	b.n	40375c <task_test+0x10>
  40377c:	00402af1 	.word	0x00402af1
  403780:	0040164d 	.word	0x0040164d

00403784 <create_application_tasks>:
		}
}
void create_application_tasks(void)
{
  403784:	b590      	push	{r4, r7, lr}
  403786:	b085      	sub	sp, #20
  403788:	af04      	add	r7, sp, #16
	
	xTaskCreate(can_rx_task, "canrx", 512, 0, tskIDLE_PRIORITY+2, 0); // CAN RX handler task
  40378a:	2300      	movs	r3, #0
  40378c:	9303      	str	r3, [sp, #12]
  40378e:	2300      	movs	r3, #0
  403790:	9302      	str	r3, [sp, #8]
  403792:	2300      	movs	r3, #0
  403794:	9301      	str	r3, [sp, #4]
  403796:	2302      	movs	r3, #2
  403798:	9300      	str	r3, [sp, #0]
  40379a:	2300      	movs	r3, #0
  40379c:	f44f 7200 	mov.w	r2, #512	; 0x200
  4037a0:	491a      	ldr	r1, [pc, #104]	; (40380c <create_application_tasks+0x88>)
  4037a2:	481b      	ldr	r0, [pc, #108]	; (403810 <create_application_tasks+0x8c>)
  4037a4:	4c1b      	ldr	r4, [pc, #108]	; (403814 <create_application_tasks+0x90>)
  4037a6:	47a0      	blx	r4
	xTaskCreate(can_status_task, "canstatus", 256, 0, tskIDLE_PRIORITY+1, 0); // CAN status monitoring task
  4037a8:	2300      	movs	r3, #0
  4037aa:	9303      	str	r3, [sp, #12]
  4037ac:	2300      	movs	r3, #0
  4037ae:	9302      	str	r3, [sp, #8]
  4037b0:	2300      	movs	r3, #0
  4037b2:	9301      	str	r3, [sp, #4]
  4037b4:	2301      	movs	r3, #1
  4037b6:	9300      	str	r3, [sp, #0]
  4037b8:	2300      	movs	r3, #0
  4037ba:	f44f 7280 	mov.w	r2, #256	; 0x100
  4037be:	4916      	ldr	r1, [pc, #88]	; (403818 <create_application_tasks+0x94>)
  4037c0:	4816      	ldr	r0, [pc, #88]	; (40381c <create_application_tasks+0x98>)
  4037c2:	4c14      	ldr	r4, [pc, #80]	; (403814 <create_application_tasks+0x90>)
  4037c4:	47a0      	blx	r4
	xTaskCreate(task_test, "testTask", 512, 0, tskIDLE_PRIORITY+2, 0); // Load cell sampling task
  4037c6:	2300      	movs	r3, #0
  4037c8:	9303      	str	r3, [sp, #12]
  4037ca:	2300      	movs	r3, #0
  4037cc:	9302      	str	r3, [sp, #8]
  4037ce:	2300      	movs	r3, #0
  4037d0:	9301      	str	r3, [sp, #4]
  4037d2:	2302      	movs	r3, #2
  4037d4:	9300      	str	r3, [sp, #0]
  4037d6:	2300      	movs	r3, #0
  4037d8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4037dc:	4910      	ldr	r1, [pc, #64]	; (403820 <create_application_tasks+0x9c>)
  4037de:	4811      	ldr	r0, [pc, #68]	; (403824 <create_application_tasks+0xa0>)
  4037e0:	4c0c      	ldr	r4, [pc, #48]	; (403814 <create_application_tasks+0x90>)
  4037e2:	47a0      	blx	r4
	xTaskCreate(encoder_task, "encoder", 512, 0, tskIDLE_PRIORITY+2, 0); // Encoder polling and CAN transmission task
  4037e4:	2300      	movs	r3, #0
  4037e6:	9303      	str	r3, [sp, #12]
  4037e8:	2300      	movs	r3, #0
  4037ea:	9302      	str	r3, [sp, #8]
  4037ec:	2300      	movs	r3, #0
  4037ee:	9301      	str	r3, [sp, #4]
  4037f0:	2302      	movs	r3, #2
  4037f2:	9300      	str	r3, [sp, #0]
  4037f4:	2300      	movs	r3, #0
  4037f6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4037fa:	490b      	ldr	r1, [pc, #44]	; (403828 <create_application_tasks+0xa4>)
  4037fc:	480b      	ldr	r0, [pc, #44]	; (40382c <create_application_tasks+0xa8>)
  4037fe:	4c05      	ldr	r4, [pc, #20]	; (403814 <create_application_tasks+0x90>)
  403800:	47a0      	blx	r4
  403802:	bf00      	nop
  403804:	3704      	adds	r7, #4
  403806:	46bd      	mov	sp, r7
  403808:	bd90      	pop	{r4, r7, pc}
  40380a:	bf00      	nop
  40380c:	0040492c 	.word	0x0040492c
  403810:	00402ded 	.word	0x00402ded
  403814:	004014a5 	.word	0x004014a5
  403818:	00404934 	.word	0x00404934
  40381c:	00403085 	.word	0x00403085
  403820:	00404940 	.word	0x00404940
  403824:	0040374d 	.word	0x0040374d
  403828:	0040494c 	.word	0x0040494c
  40382c:	00403629 	.word	0x00403629

00403830 <WIB_Init>:
 */ 
#include "WIB_Init.h"
int tool_type = 9;
unsigned char who_lis2 = 0;
int WIB_Init()
{
  403830:	b580      	push	{r7, lr}
  403832:	b082      	sub	sp, #8
  403834:	af00      	add	r7, sp, #0
	SystemInit();
  403836:	4b06      	ldr	r3, [pc, #24]	; (403850 <WIB_Init+0x20>)
  403838:	4798      	blx	r3
	board_init();
  40383a:	4b06      	ldr	r3, [pc, #24]	; (403854 <WIB_Init+0x24>)
  40383c:	4798      	blx	r3
								//initialise SPI0 interface for Load Cell ADS1120
	//toolsense_init();			//Initialise GPIOs for sensing tool type
	
	// Debug: Print SystemCoreClock value
	// You can check this value in debugger or via UART
	volatile uint32_t debug_clock = SystemCoreClock;
  40383e:	4b06      	ldr	r3, [pc, #24]	; (403858 <WIB_Init+0x28>)
  403840:	681b      	ldr	r3, [r3, #0]
  403842:	607b      	str	r3, [r7, #4]
	
	// Initialize I2C0 at 100kHz

	

	return 0;  // Success
  403844:	2300      	movs	r3, #0
}
  403846:	4618      	mov	r0, r3
  403848:	3708      	adds	r7, #8
  40384a:	46bd      	mov	sp, r7
  40384c:	bd80      	pop	{r7, pc}
  40384e:	bf00      	nop
  403850:	004001f1 	.word	0x004001f1
  403854:	0040040d 	.word	0x0040040d
  403858:	2000000c 	.word	0x2000000c

0040385c <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
  40385c:	b580      	push	{r7, lr}
  40385e:	b08a      	sub	sp, #40	; 0x28
  403860:	af00      	add	r7, sp, #0
  403862:	60f8      	str	r0, [r7, #12]
  403864:	60b9      	str	r1, [r7, #8]
  403866:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
  403868:	687b      	ldr	r3, [r7, #4]
  40386a:	f246 12a8 	movw	r2, #25000	; 0x61a8
  40386e:	fb02 f203 	mul.w	r2, r2, r3
  403872:	68bb      	ldr	r3, [r7, #8]
  403874:	4413      	add	r3, r2
  403876:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
  403878:	687b      	ldr	r3, [r7, #4]
  40387a:	f246 11a8 	movw	r1, #25000	; 0x61a8
  40387e:	fb01 f303 	mul.w	r3, r1, r3
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
  403882:	fbb2 f3f3 	udiv	r3, r2, r3
  403886:	2b80      	cmp	r3, #128	; 0x80
  403888:	d901      	bls.n	40388e <can_set_baudrate+0x32>
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
  40388a:	2300      	movs	r3, #0
  40388c:	e086      	b.n	40399c <can_set_baudrate+0x140>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
  40388e:	68bb      	ldr	r3, [r7, #8]
  403890:	085a      	lsrs	r2, r3, #1
  403892:	687b      	ldr	r3, [r7, #4]
  403894:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
  403898:	fb01 f303 	mul.w	r3, r1, r3
  40389c:	429a      	cmp	r2, r3
  40389e:	d201      	bcs.n	4038a4 <can_set_baudrate+0x48>
		return 0;
  4038a0:	2300      	movs	r3, #0
  4038a2:	e07b      	b.n	40399c <can_set_baudrate+0x140>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
  4038a4:	2308      	movs	r3, #8
  4038a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
  4038aa:	f04f 33ff 	mov.w	r3, #4294967295
  4038ae:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
  4038b0:	2308      	movs	r3, #8
  4038b2:	77fb      	strb	r3, [r7, #31]
  4038b4:	e02a      	b.n	40390c <can_set_baudrate+0xb0>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
  4038b6:	7ffb      	ldrb	r3, [r7, #31]
  4038b8:	687a      	ldr	r2, [r7, #4]
  4038ba:	fb02 f303 	mul.w	r3, r2, r3
  4038be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4038c2:	fb02 f303 	mul.w	r3, r2, r3
  4038c6:	68ba      	ldr	r2, [r7, #8]
  4038c8:	fbb2 f3f3 	udiv	r3, r2, r3
  4038cc:	2b80      	cmp	r3, #128	; 0x80
  4038ce:	d81a      	bhi.n	403906 <can_set_baudrate+0xaa>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
  4038d0:	7ffb      	ldrb	r3, [r7, #31]
  4038d2:	687a      	ldr	r2, [r7, #4]
  4038d4:	fb02 f303 	mul.w	r3, r2, r3
  4038d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4038dc:	fb02 f203 	mul.w	r2, r2, r3
  4038e0:	68bb      	ldr	r3, [r7, #8]
  4038e2:	fbb3 f1f2 	udiv	r1, r3, r2
  4038e6:	fb02 f201 	mul.w	r2, r2, r1
  4038ea:	1a9b      	subs	r3, r3, r2
  4038ec:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
  4038ee:	69ba      	ldr	r2, [r7, #24]
  4038f0:	6a3b      	ldr	r3, [r7, #32]
  4038f2:	429a      	cmp	r2, r3
  4038f4:	d207      	bcs.n	403906 <can_set_baudrate+0xaa>
				ul_mod = ul_cur_mod;
  4038f6:	69bb      	ldr	r3, [r7, #24]
  4038f8:	623b      	str	r3, [r7, #32]
				uc_tq = i;
  4038fa:	7ffb      	ldrb	r3, [r7, #31]
  4038fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
  403900:	6a3b      	ldr	r3, [r7, #32]
  403902:	2b00      	cmp	r3, #0
  403904:	d006      	beq.n	403914 <can_set_baudrate+0xb8>
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
  403906:	7ffb      	ldrb	r3, [r7, #31]
  403908:	3301      	adds	r3, #1
  40390a:	77fb      	strb	r3, [r7, #31]
  40390c:	7ffb      	ldrb	r3, [r7, #31]
  40390e:	2b19      	cmp	r3, #25
  403910:	d9d1      	bls.n	4038b6 <can_set_baudrate+0x5a>
  403912:	e000      	b.n	403916 <can_set_baudrate+0xba>
					break;
  403914:	bf00      	nop
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
  403916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40391a:	687a      	ldr	r2, [r7, #4]
  40391c:	fb02 f303 	mul.w	r3, r2, r3
  403920:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403924:	fb02 f303 	mul.w	r3, r2, r3
  403928:	68ba      	ldr	r2, [r7, #8]
  40392a:	fbb2 f3f3 	udiv	r3, r2, r3
  40392e:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
  403930:	7dfb      	ldrb	r3, [r7, #23]
  403932:	2b01      	cmp	r3, #1
  403934:	d801      	bhi.n	40393a <can_set_baudrate+0xde>
		return 0;
  403936:	2300      	movs	r3, #0
  403938:	e030      	b.n	40399c <can_set_baudrate+0x140>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
  40393a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40393e:	f1a3 0208 	sub.w	r2, r3, #8
  403942:	4613      	mov	r3, r2
  403944:	005b      	lsls	r3, r3, #1
  403946:	4413      	add	r3, r2
  403948:	005b      	lsls	r3, r3, #1
  40394a:	4a16      	ldr	r2, [pc, #88]	; (4039a4 <can_set_baudrate+0x148>)
  40394c:	4413      	add	r3, r2
  40394e:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
  403950:	68f8      	ldr	r0, [r7, #12]
  403952:	4b15      	ldr	r3, [pc, #84]	; (4039a8 <can_set_baudrate+0x14c>)
  403954:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  403956:	693b      	ldr	r3, [r7, #16]
  403958:	78db      	ldrb	r3, [r3, #3]
  40395a:	3b01      	subs	r3, #1
  40395c:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  403960:	693b      	ldr	r3, [r7, #16]
  403962:	789b      	ldrb	r3, [r3, #2]
  403964:	3b01      	subs	r3, #1
  403966:	011b      	lsls	r3, r3, #4
  403968:	f003 0370 	and.w	r3, r3, #112	; 0x70
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  40396c:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
  40396e:	693b      	ldr	r3, [r7, #16]
  403970:	785b      	ldrb	r3, [r3, #1]
  403972:	3b01      	subs	r3, #1
  403974:	021b      	lsls	r3, r3, #8
  403976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
  40397a:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
  40397c:	693b      	ldr	r3, [r7, #16]
  40397e:	791b      	ldrb	r3, [r3, #4]
  403980:	3b01      	subs	r3, #1
  403982:	031b      	lsls	r3, r3, #12
  403984:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
  403988:	431a      	orrs	r2, r3
			CAN_BR_BRP(uc_prescale - 1);
  40398a:	7dfb      	ldrb	r3, [r7, #23]
  40398c:	3b01      	subs	r3, #1
  40398e:	041b      	lsls	r3, r3, #16
  403990:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
  403994:	431a      	orrs	r2, r3
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
  403996:	68fb      	ldr	r3, [r7, #12]
  403998:	615a      	str	r2, [r3, #20]
	return 1;
  40399a:	2301      	movs	r3, #1
}
  40399c:	4618      	mov	r0, r3
  40399e:	3728      	adds	r7, #40	; 0x28
  4039a0:	46bd      	mov	sp, r7
  4039a2:	bd80      	pop	{r7, pc}
  4039a4:	00404954 	.word	0x00404954
  4039a8:	00403a55 	.word	0x00403a55

004039ac <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
  4039ac:	b580      	push	{r7, lr}
  4039ae:	b086      	sub	sp, #24
  4039b0:	af00      	add	r7, sp, #0
  4039b2:	60f8      	str	r0, [r7, #12]
  4039b4:	60b9      	str	r1, [r7, #8]
  4039b6:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
  4039b8:	687a      	ldr	r2, [r7, #4]
  4039ba:	68b9      	ldr	r1, [r7, #8]
  4039bc:	68f8      	ldr	r0, [r7, #12]
  4039be:	4b17      	ldr	r3, [pc, #92]	; (403a1c <can_init+0x70>)
  4039c0:	4798      	blx	r3
  4039c2:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
  4039c4:	697b      	ldr	r3, [r7, #20]
  4039c6:	2b00      	cmp	r3, #0
  4039c8:	d101      	bne.n	4039ce <can_init+0x22>
		return 0;
  4039ca:	2300      	movs	r3, #0
  4039cc:	e021      	b.n	403a12 <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
  4039ce:	68f8      	ldr	r0, [r7, #12]
  4039d0:	4b13      	ldr	r3, [pc, #76]	; (403a20 <can_init+0x74>)
  4039d2:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
  4039d4:	68f8      	ldr	r0, [r7, #12]
  4039d6:	4b13      	ldr	r3, [pc, #76]	; (403a24 <can_init+0x78>)
  4039d8:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
  4039da:	2300      	movs	r3, #0
  4039dc:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
  4039de:	2300      	movs	r3, #0
  4039e0:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
  4039e2:	e006      	b.n	4039f2 <can_init+0x46>
		ul_flag = can_get_status(p_can);
  4039e4:	68f8      	ldr	r0, [r7, #12]
  4039e6:	4b10      	ldr	r3, [pc, #64]	; (403a28 <can_init+0x7c>)
  4039e8:	4798      	blx	r3
  4039ea:	6178      	str	r0, [r7, #20]
		ul_tick++;
  4039ec:	693b      	ldr	r3, [r7, #16]
  4039ee:	3301      	adds	r3, #1
  4039f0:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
  4039f2:	697b      	ldr	r3, [r7, #20]
  4039f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  4039f8:	2b00      	cmp	r3, #0
  4039fa:	d103      	bne.n	403a04 <can_init+0x58>
  4039fc:	693b      	ldr	r3, [r7, #16]
  4039fe:	4a0b      	ldr	r2, [pc, #44]	; (403a2c <can_init+0x80>)
  403a00:	4293      	cmp	r3, r2
  403a02:	d9ef      	bls.n	4039e4 <can_init+0x38>
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
  403a04:	693b      	ldr	r3, [r7, #16]
  403a06:	4a0a      	ldr	r2, [pc, #40]	; (403a30 <can_init+0x84>)
  403a08:	4293      	cmp	r3, r2
  403a0a:	d101      	bne.n	403a10 <can_init+0x64>
		return 0;
  403a0c:	2300      	movs	r3, #0
  403a0e:	e000      	b.n	403a12 <can_init+0x66>
	} else {
		return 1;
  403a10:	2301      	movs	r3, #1
	}
}
  403a12:	4618      	mov	r0, r3
  403a14:	3718      	adds	r7, #24
  403a16:	46bd      	mov	sp, r7
  403a18:	bd80      	pop	{r7, pc}
  403a1a:	bf00      	nop
  403a1c:	0040385d 	.word	0x0040385d
  403a20:	00403ded 	.word	0x00403ded
  403a24:	00403a35 	.word	0x00403a35
  403a28:	00403a75 	.word	0x00403a75
  403a2c:	0001869f 	.word	0x0001869f
  403a30:	000186a0 	.word	0x000186a0

00403a34 <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
  403a34:	b480      	push	{r7}
  403a36:	b083      	sub	sp, #12
  403a38:	af00      	add	r7, sp, #0
  403a3a:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
  403a3c:	687b      	ldr	r3, [r7, #4]
  403a3e:	681b      	ldr	r3, [r3, #0]
  403a40:	f043 0201 	orr.w	r2, r3, #1
  403a44:	687b      	ldr	r3, [r7, #4]
  403a46:	601a      	str	r2, [r3, #0]
}
  403a48:	bf00      	nop
  403a4a:	370c      	adds	r7, #12
  403a4c:	46bd      	mov	sp, r7
  403a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a52:	4770      	bx	lr

00403a54 <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
  403a54:	b480      	push	{r7}
  403a56:	b083      	sub	sp, #12
  403a58:	af00      	add	r7, sp, #0
  403a5a:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
  403a5c:	687b      	ldr	r3, [r7, #4]
  403a5e:	681b      	ldr	r3, [r3, #0]
  403a60:	f023 0201 	bic.w	r2, r3, #1
  403a64:	687b      	ldr	r3, [r7, #4]
  403a66:	601a      	str	r2, [r3, #0]
}
  403a68:	bf00      	nop
  403a6a:	370c      	adds	r7, #12
  403a6c:	46bd      	mov	sp, r7
  403a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a72:	4770      	bx	lr

00403a74 <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
  403a74:	b480      	push	{r7}
  403a76:	b083      	sub	sp, #12
  403a78:	af00      	add	r7, sp, #0
  403a7a:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
  403a7c:	687b      	ldr	r3, [r7, #4]
  403a7e:	691b      	ldr	r3, [r3, #16]
}
  403a80:	4618      	mov	r0, r3
  403a82:	370c      	adds	r7, #12
  403a84:	46bd      	mov	sp, r7
  403a86:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a8a:	4770      	bx	lr

00403a8c <can_get_tx_error_cnt>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval Transmit error counter.
 */
uint8_t can_get_tx_error_cnt(Can *p_can)
{
  403a8c:	b480      	push	{r7}
  403a8e:	b083      	sub	sp, #12
  403a90:	af00      	add	r7, sp, #0
  403a92:	6078      	str	r0, [r7, #4]
	return (uint8_t)(p_can->CAN_ECR >> CAN_ECR_TEC_Pos);
  403a94:	687b      	ldr	r3, [r7, #4]
  403a96:	6a1b      	ldr	r3, [r3, #32]
  403a98:	0c1b      	lsrs	r3, r3, #16
  403a9a:	b2db      	uxtb	r3, r3
}
  403a9c:	4618      	mov	r0, r3
  403a9e:	370c      	adds	r7, #12
  403aa0:	46bd      	mov	sp, r7
  403aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
  403aa6:	4770      	bx	lr

00403aa8 <can_get_rx_error_cnt>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval Receive error counter.
 */
uint8_t can_get_rx_error_cnt(Can *p_can)
{
  403aa8:	b480      	push	{r7}
  403aaa:	b083      	sub	sp, #12
  403aac:	af00      	add	r7, sp, #0
  403aae:	6078      	str	r0, [r7, #4]
	return (uint8_t)(p_can->CAN_ECR >> CAN_ECR_REC_Pos);
  403ab0:	687b      	ldr	r3, [r7, #4]
  403ab2:	6a1b      	ldr	r3, [r3, #32]
  403ab4:	b2db      	uxtb	r3, r3
}
  403ab6:	4618      	mov	r0, r3
  403ab8:	370c      	adds	r7, #12
  403aba:	46bd      	mov	sp, r7
  403abc:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ac0:	4770      	bx	lr

00403ac2 <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
  403ac2:	b480      	push	{r7}
  403ac4:	b085      	sub	sp, #20
  403ac6:	af00      	add	r7, sp, #0
  403ac8:	6078      	str	r0, [r7, #4]
  403aca:	460b      	mov	r3, r1
  403acc:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
  403ace:	687b      	ldr	r3, [r7, #4]
  403ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  403ad2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  403ad6:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
  403ad8:	78fa      	ldrb	r2, [r7, #3]
  403ada:	68fb      	ldr	r3, [r7, #12]
  403adc:	431a      	orrs	r2, r3
  403ade:	687b      	ldr	r3, [r7, #4]
  403ae0:	625a      	str	r2, [r3, #36]	; 0x24
}
  403ae2:	bf00      	nop
  403ae4:	3714      	adds	r7, #20
  403ae6:	46bd      	mov	sp, r7
  403ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403aec:	4770      	bx	lr

00403aee <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
  403aee:	b480      	push	{r7}
  403af0:	b083      	sub	sp, #12
  403af2:	af00      	add	r7, sp, #0
  403af4:	6078      	str	r0, [r7, #4]
  403af6:	460b      	mov	r3, r1
  403af8:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
  403afa:	78fb      	ldrb	r3, [r7, #3]
  403afc:	687a      	ldr	r2, [r7, #4]
  403afe:	015b      	lsls	r3, r3, #5
  403b00:	4413      	add	r3, r2
  403b02:	f503 7304 	add.w	r3, r3, #528	; 0x210
  403b06:	681b      	ldr	r3, [r3, #0]
}
  403b08:	4618      	mov	r0, r3
  403b0a:	370c      	adds	r7, #12
  403b0c:	46bd      	mov	sp, r7
  403b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b12:	4770      	bx	lr

00403b14 <can_mailbox_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_send_transfer_cmd(Can *p_can, can_mb_conf_t *p_mailbox)
{
  403b14:	b480      	push	{r7}
  403b16:	b085      	sub	sp, #20
  403b18:	af00      	add	r7, sp, #0
  403b1a:	6078      	str	r0, [r7, #4]
  403b1c:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
  403b1e:	683b      	ldr	r3, [r7, #0]
  403b20:	681b      	ldr	r3, [r3, #0]
  403b22:	73fb      	strb	r3, [r7, #15]

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
  403b24:	7bfb      	ldrb	r3, [r7, #15]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
  403b26:	683a      	ldr	r2, [r7, #0]
  403b28:	7992      	ldrb	r2, [r2, #6]
  403b2a:	0412      	lsls	r2, r2, #16
  403b2c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
  403b30:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  403b34:	6879      	ldr	r1, [r7, #4]
  403b36:	015b      	lsls	r3, r3, #5
  403b38:	440b      	add	r3, r1
  403b3a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
  403b3e:	601a      	str	r2, [r3, #0]
}
  403b40:	bf00      	nop
  403b42:	3714      	adds	r7, #20
  403b44:	46bd      	mov	sp, r7
  403b46:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b4a:	4770      	bx	lr

00403b4c <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
  403b4c:	b480      	push	{r7}
  403b4e:	b085      	sub	sp, #20
  403b50:	af00      	add	r7, sp, #0
  403b52:	6078      	str	r0, [r7, #4]
  403b54:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
  403b56:	683b      	ldr	r3, [r7, #0]
  403b58:	681b      	ldr	r3, [r3, #0]
  403b5a:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
  403b5c:	683b      	ldr	r3, [r7, #0]
  403b5e:	791b      	ldrb	r3, [r3, #4]
  403b60:	2b00      	cmp	r3, #0
  403b62:	d12f      	bne.n	403bc4 <can_mailbox_init+0x78>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
  403b64:	7bfb      	ldrb	r3, [r7, #15]
  403b66:	687a      	ldr	r2, [r7, #4]
  403b68:	3310      	adds	r3, #16
  403b6a:	015b      	lsls	r3, r3, #5
  403b6c:	4413      	add	r3, r2
  403b6e:	2200      	movs	r2, #0
  403b70:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
  403b72:	7bfb      	ldrb	r3, [r7, #15]
  403b74:	687a      	ldr	r2, [r7, #4]
  403b76:	3310      	adds	r3, #16
  403b78:	015b      	lsls	r3, r3, #5
  403b7a:	4413      	add	r3, r2
  403b7c:	3304      	adds	r3, #4
  403b7e:	2200      	movs	r2, #0
  403b80:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
  403b82:	7bfb      	ldrb	r3, [r7, #15]
  403b84:	687a      	ldr	r2, [r7, #4]
  403b86:	015b      	lsls	r3, r3, #5
  403b88:	4413      	add	r3, r2
  403b8a:	f503 7302 	add.w	r3, r3, #520	; 0x208
  403b8e:	2200      	movs	r2, #0
  403b90:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
  403b92:	7bfb      	ldrb	r3, [r7, #15]
  403b94:	687a      	ldr	r2, [r7, #4]
  403b96:	015b      	lsls	r3, r3, #5
  403b98:	4413      	add	r3, r2
  403b9a:	f503 7305 	add.w	r3, r3, #532	; 0x214
  403b9e:	2200      	movs	r2, #0
  403ba0:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
  403ba2:	7bfb      	ldrb	r3, [r7, #15]
  403ba4:	687a      	ldr	r2, [r7, #4]
  403ba6:	015b      	lsls	r3, r3, #5
  403ba8:	4413      	add	r3, r2
  403baa:	f503 7306 	add.w	r3, r3, #536	; 0x218
  403bae:	2200      	movs	r2, #0
  403bb0:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
  403bb2:	7bfb      	ldrb	r3, [r7, #15]
  403bb4:	687a      	ldr	r2, [r7, #4]
  403bb6:	015b      	lsls	r3, r3, #5
  403bb8:	4413      	add	r3, r2
  403bba:	f503 7307 	add.w	r3, r3, #540	; 0x21c
  403bbe:	2200      	movs	r2, #0
  403bc0:	601a      	str	r2, [r3, #0]
		return;
  403bc2:	e050      	b.n	403c66 <can_mailbox_init+0x11a>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  403bc4:	7bfb      	ldrb	r3, [r7, #15]
  403bc6:	7bfa      	ldrb	r2, [r7, #15]
  403bc8:	6879      	ldr	r1, [r7, #4]
  403bca:	3210      	adds	r2, #16
  403bcc:	0152      	lsls	r2, r2, #5
  403bce:	440a      	add	r2, r1
  403bd0:	6812      	ldr	r2, [r2, #0]
  403bd2:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
  403bd6:	6839      	ldr	r1, [r7, #0]
  403bd8:	79c9      	ldrb	r1, [r1, #7]
  403bda:	0409      	lsls	r1, r1, #16
			~CAN_MMR_PRIOR_Msk) |
  403bdc:	430a      	orrs	r2, r1
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  403bde:	6879      	ldr	r1, [r7, #4]
  403be0:	3310      	adds	r3, #16
  403be2:	015b      	lsls	r3, r3, #5
  403be4:	440b      	add	r3, r1
  403be6:	601a      	str	r2, [r3, #0]

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
  403be8:	683b      	ldr	r3, [r7, #0]
  403bea:	795b      	ldrb	r3, [r3, #5]
  403bec:	2b00      	cmp	r3, #0
  403bee:	d016      	beq.n	403c1e <can_mailbox_init+0xd2>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
  403bf0:	7bfb      	ldrb	r3, [r7, #15]
  403bf2:	683a      	ldr	r2, [r7, #0]
  403bf4:	68d2      	ldr	r2, [r2, #12]
  403bf6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  403bfa:	6879      	ldr	r1, [r7, #4]
  403bfc:	3310      	adds	r3, #16
  403bfe:	015b      	lsls	r3, r3, #5
  403c00:	440b      	add	r3, r1
  403c02:	3304      	adds	r3, #4
  403c04:	601a      	str	r2, [r3, #0]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
  403c06:	7bfb      	ldrb	r3, [r7, #15]
  403c08:	683a      	ldr	r2, [r7, #0]
  403c0a:	6912      	ldr	r2, [r2, #16]
  403c0c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  403c10:	6879      	ldr	r1, [r7, #4]
  403c12:	015b      	lsls	r3, r3, #5
  403c14:	440b      	add	r3, r1
  403c16:	f503 7302 	add.w	r3, r3, #520	; 0x208
  403c1a:	601a      	str	r2, [r3, #0]
  403c1c:	e011      	b.n	403c42 <can_mailbox_init+0xf6>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
  403c1e:	7bfb      	ldrb	r3, [r7, #15]
  403c20:	683a      	ldr	r2, [r7, #0]
  403c22:	68d2      	ldr	r2, [r2, #12]
  403c24:	6879      	ldr	r1, [r7, #4]
  403c26:	3310      	adds	r3, #16
  403c28:	015b      	lsls	r3, r3, #5
  403c2a:	440b      	add	r3, r1
  403c2c:	3304      	adds	r3, #4
  403c2e:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
  403c30:	7bfb      	ldrb	r3, [r7, #15]
  403c32:	683a      	ldr	r2, [r7, #0]
  403c34:	6912      	ldr	r2, [r2, #16]
  403c36:	6879      	ldr	r1, [r7, #4]
  403c38:	015b      	lsls	r3, r3, #5
  403c3a:	440b      	add	r3, r1
  403c3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
  403c40:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  403c42:	7bfb      	ldrb	r3, [r7, #15]
  403c44:	7bfa      	ldrb	r2, [r7, #15]
  403c46:	6879      	ldr	r1, [r7, #4]
  403c48:	3210      	adds	r2, #16
  403c4a:	0152      	lsls	r2, r2, #5
  403c4c:	440a      	add	r2, r1
  403c4e:	6812      	ldr	r2, [r2, #0]
  403c50:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
  403c54:	6839      	ldr	r1, [r7, #0]
  403c56:	7909      	ldrb	r1, [r1, #4]
  403c58:	0609      	lsls	r1, r1, #24
			~CAN_MMR_MOT_Msk) |
  403c5a:	430a      	orrs	r2, r1
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
  403c5c:	6879      	ldr	r1, [r7, #4]
  403c5e:	3310      	adds	r3, #16
  403c60:	015b      	lsls	r3, r3, #5
  403c62:	440b      	add	r3, r1
  403c64:	601a      	str	r2, [r3, #0]
}
  403c66:	3714      	adds	r7, #20
  403c68:	46bd      	mov	sp, r7
  403c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c6e:	4770      	bx	lr

00403c70 <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
  403c70:	b580      	push	{r7, lr}
  403c72:	b086      	sub	sp, #24
  403c74:	af00      	add	r7, sp, #0
  403c76:	6078      	str	r0, [r7, #4]
  403c78:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
  403c7a:	2300      	movs	r3, #0
  403c7c:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
  403c7e:	683b      	ldr	r3, [r7, #0]
  403c80:	681b      	ldr	r3, [r3, #0]
  403c82:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
  403c84:	683b      	ldr	r3, [r7, #0]
  403c86:	689b      	ldr	r3, [r3, #8]
  403c88:	60fb      	str	r3, [r7, #12]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
  403c8a:	68fb      	ldr	r3, [r7, #12]
  403c8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
  403c90:	2b00      	cmp	r3, #0
  403c92:	d006      	beq.n	403ca2 <can_mailbox_read+0x32>
  403c94:	68fb      	ldr	r3, [r7, #12]
  403c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  403c9a:	2b00      	cmp	r3, #0
  403c9c:	d001      	beq.n	403ca2 <can_mailbox_read+0x32>
		ul_retval = CAN_MAILBOX_RX_OVER;
  403c9e:	2302      	movs	r3, #2
  403ca0:	617b      	str	r3, [r7, #20]
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
  403ca2:	7cfb      	ldrb	r3, [r7, #19]
  403ca4:	687a      	ldr	r2, [r7, #4]
  403ca6:	015b      	lsls	r3, r3, #5
  403ca8:	4413      	add	r3, r2
  403caa:	f503 7303 	add.w	r3, r3, #524	; 0x20c
  403cae:	681b      	ldr	r3, [r3, #0]
  403cb0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
  403cb4:	683b      	ldr	r3, [r7, #0]
  403cb6:	615a      	str	r2, [r3, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
  403cb8:	68fb      	ldr	r3, [r7, #12]
  403cba:	0c1b      	lsrs	r3, r3, #16
  403cbc:	b2db      	uxtb	r3, r3
  403cbe:	f003 030f 	and.w	r3, r3, #15
  403cc2:	b2da      	uxtb	r2, r3
  403cc4:	683b      	ldr	r3, [r7, #0]
  403cc6:	719a      	strb	r2, [r3, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
  403cc8:	7cfb      	ldrb	r3, [r7, #19]
  403cca:	687a      	ldr	r2, [r7, #4]
  403ccc:	015b      	lsls	r3, r3, #5
  403cce:	4413      	add	r3, r2
  403cd0:	f503 7305 	add.w	r3, r3, #532	; 0x214
  403cd4:	681a      	ldr	r2, [r3, #0]
  403cd6:	683b      	ldr	r3, [r7, #0]
  403cd8:	619a      	str	r2, [r3, #24]
	if (p_mailbox->uc_length > 4) {
  403cda:	683b      	ldr	r3, [r7, #0]
  403cdc:	799b      	ldrb	r3, [r3, #6]
  403cde:	2b04      	cmp	r3, #4
  403ce0:	d908      	bls.n	403cf4 <can_mailbox_read+0x84>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
  403ce2:	7cfb      	ldrb	r3, [r7, #19]
  403ce4:	687a      	ldr	r2, [r7, #4]
  403ce6:	015b      	lsls	r3, r3, #5
  403ce8:	4413      	add	r3, r2
  403cea:	f503 7306 	add.w	r3, r3, #536	; 0x218
  403cee:	681a      	ldr	r2, [r3, #0]
  403cf0:	683b      	ldr	r3, [r7, #0]
  403cf2:	61da      	str	r2, [r3, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
  403cf4:	7cfb      	ldrb	r3, [r7, #19]
  403cf6:	687a      	ldr	r2, [r7, #4]
  403cf8:	015b      	lsls	r3, r3, #5
  403cfa:	4413      	add	r3, r2
  403cfc:	f503 7304 	add.w	r3, r3, #528	; 0x210
  403d00:	681a      	ldr	r2, [r3, #0]
  403d02:	683b      	ldr	r3, [r7, #0]
  403d04:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
  403d06:	683b      	ldr	r3, [r7, #0]
  403d08:	689b      	ldr	r3, [r3, #8]
  403d0a:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {
  403d0c:	68fb      	ldr	r3, [r7, #12]
  403d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  403d12:	2b00      	cmp	r3, #0
  403d14:	d003      	beq.n	403d1e <can_mailbox_read+0xae>
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
  403d16:	697b      	ldr	r3, [r7, #20]
  403d18:	f043 0304 	orr.w	r3, r3, #4
  403d1c:	617b      	str	r3, [r7, #20]
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
  403d1e:	6839      	ldr	r1, [r7, #0]
  403d20:	6878      	ldr	r0, [r7, #4]
  403d22:	4b03      	ldr	r3, [pc, #12]	; (403d30 <can_mailbox_read+0xc0>)
  403d24:	4798      	blx	r3

	return ul_retval;
  403d26:	697b      	ldr	r3, [r7, #20]
}
  403d28:	4618      	mov	r0, r3
  403d2a:	3718      	adds	r7, #24
  403d2c:	46bd      	mov	sp, r7
  403d2e:	bd80      	pop	{r7, pc}
  403d30:	00403b15 	.word	0x00403b15

00403d34 <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
  403d34:	b580      	push	{r7, lr}
  403d36:	b084      	sub	sp, #16
  403d38:	af00      	add	r7, sp, #0
  403d3a:	6078      	str	r0, [r7, #4]
  403d3c:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
  403d3e:	683b      	ldr	r3, [r7, #0]
  403d40:	681b      	ldr	r3, [r3, #0]
  403d42:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
  403d44:	7bfb      	ldrb	r3, [r7, #15]
  403d46:	4619      	mov	r1, r3
  403d48:	6878      	ldr	r0, [r7, #4]
  403d4a:	4b27      	ldr	r3, [pc, #156]	; (403de8 <can_mailbox_write+0xb4>)
  403d4c:	4798      	blx	r3
  403d4e:	4602      	mov	r2, r0
  403d50:	683b      	ldr	r3, [r7, #0]
  403d52:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
  403d54:	683b      	ldr	r3, [r7, #0]
  403d56:	689b      	ldr	r3, [r3, #8]
  403d58:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
  403d5a:	68bb      	ldr	r3, [r7, #8]
  403d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
  403d60:	2b00      	cmp	r3, #0
  403d62:	d101      	bne.n	403d68 <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
  403d64:	2301      	movs	r3, #1
  403d66:	e03b      	b.n	403de0 <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
  403d68:	683b      	ldr	r3, [r7, #0]
  403d6a:	795b      	ldrb	r3, [r3, #5]
  403d6c:	2b00      	cmp	r3, #0
  403d6e:	d00b      	beq.n	403d88 <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
  403d70:	7bfb      	ldrb	r3, [r7, #15]
  403d72:	683a      	ldr	r2, [r7, #0]
  403d74:	6912      	ldr	r2, [r2, #16]
  403d76:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  403d7a:	6879      	ldr	r1, [r7, #4]
  403d7c:	015b      	lsls	r3, r3, #5
  403d7e:	440b      	add	r3, r1
  403d80:	f503 7302 	add.w	r3, r3, #520	; 0x208
  403d84:	601a      	str	r2, [r3, #0]
  403d86:	e008      	b.n	403d9a <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
  403d88:	7bfb      	ldrb	r3, [r7, #15]
  403d8a:	683a      	ldr	r2, [r7, #0]
  403d8c:	6912      	ldr	r2, [r2, #16]
  403d8e:	6879      	ldr	r1, [r7, #4]
  403d90:	015b      	lsls	r3, r3, #5
  403d92:	440b      	add	r3, r1
  403d94:	f503 7302 	add.w	r3, r3, #520	; 0x208
  403d98:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
  403d9a:	7bfb      	ldrb	r3, [r7, #15]
  403d9c:	683a      	ldr	r2, [r7, #0]
  403d9e:	6992      	ldr	r2, [r2, #24]
  403da0:	6879      	ldr	r1, [r7, #4]
  403da2:	015b      	lsls	r3, r3, #5
  403da4:	440b      	add	r3, r1
  403da6:	f503 7305 	add.w	r3, r3, #532	; 0x214
  403daa:	601a      	str	r2, [r3, #0]
	if (p_mailbox->uc_length > 4) {
  403dac:	683b      	ldr	r3, [r7, #0]
  403dae:	799b      	ldrb	r3, [r3, #6]
  403db0:	2b04      	cmp	r3, #4
  403db2:	d908      	bls.n	403dc6 <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
  403db4:	7bfb      	ldrb	r3, [r7, #15]
  403db6:	683a      	ldr	r2, [r7, #0]
  403db8:	69d2      	ldr	r2, [r2, #28]
  403dba:	6879      	ldr	r1, [r7, #4]
  403dbc:	015b      	lsls	r3, r3, #5
  403dbe:	440b      	add	r3, r1
  403dc0:	f503 7306 	add.w	r3, r3, #536	; 0x218
  403dc4:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
  403dc6:	7bfb      	ldrb	r3, [r7, #15]
  403dc8:	683a      	ldr	r2, [r7, #0]
  403dca:	7992      	ldrb	r2, [r2, #6]
  403dcc:	0412      	lsls	r2, r2, #16
  403dce:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  403dd2:	6879      	ldr	r1, [r7, #4]
  403dd4:	015b      	lsls	r3, r3, #5
  403dd6:	440b      	add	r3, r1
  403dd8:	f503 7307 	add.w	r3, r3, #540	; 0x21c
  403ddc:	601a      	str	r2, [r3, #0]

	return CAN_MAILBOX_TRANSFER_OK;
  403dde:	2300      	movs	r3, #0
}
  403de0:	4618      	mov	r0, r3
  403de2:	3710      	adds	r7, #16
  403de4:	46bd      	mov	sp, r7
  403de6:	bd80      	pop	{r7, pc}
  403de8:	00403aef 	.word	0x00403aef

00403dec <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
  403dec:	b580      	push	{r7, lr}
  403dee:	b08c      	sub	sp, #48	; 0x30
  403df0:	af00      	add	r7, sp, #0
  403df2:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
  403df4:	2300      	movs	r3, #0
  403df6:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
  403df8:	2300      	movs	r3, #0
  403dfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  403dfe:	e00d      	b.n	403e1c <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
  403e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  403e04:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
  403e06:	f107 030c 	add.w	r3, r7, #12
  403e0a:	4619      	mov	r1, r3
  403e0c:	6878      	ldr	r0, [r7, #4]
  403e0e:	4b07      	ldr	r3, [pc, #28]	; (403e2c <can_reset_all_mailbox+0x40>)
  403e10:	4798      	blx	r3
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
  403e12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  403e16:	3301      	adds	r3, #1
  403e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  403e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  403e20:	2b07      	cmp	r3, #7
  403e22:	d9ed      	bls.n	403e00 <can_reset_all_mailbox+0x14>
	}
}
  403e24:	bf00      	nop
  403e26:	3730      	adds	r7, #48	; 0x30
  403e28:	46bd      	mov	sp, r7
  403e2a:	bd80      	pop	{r7, pc}
  403e2c:	00403b4d 	.word	0x00403b4d

00403e30 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  403e30:	b480      	push	{r7}
  403e32:	b085      	sub	sp, #20
  403e34:	af00      	add	r7, sp, #0
  403e36:	60f8      	str	r0, [r7, #12]
  403e38:	60b9      	str	r1, [r7, #8]
  403e3a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403e3c:	687b      	ldr	r3, [r7, #4]
  403e3e:	2b00      	cmp	r3, #0
  403e40:	d003      	beq.n	403e4a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  403e42:	68fb      	ldr	r3, [r7, #12]
  403e44:	68ba      	ldr	r2, [r7, #8]
  403e46:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  403e48:	e002      	b.n	403e50 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  403e4a:	68fb      	ldr	r3, [r7, #12]
  403e4c:	68ba      	ldr	r2, [r7, #8]
  403e4e:	661a      	str	r2, [r3, #96]	; 0x60
}
  403e50:	bf00      	nop
  403e52:	3714      	adds	r7, #20
  403e54:	46bd      	mov	sp, r7
  403e56:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e5a:	4770      	bx	lr

00403e5c <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  403e5c:	b480      	push	{r7}
  403e5e:	b083      	sub	sp, #12
  403e60:	af00      	add	r7, sp, #0
  403e62:	6078      	str	r0, [r7, #4]
  403e64:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  403e66:	687b      	ldr	r3, [r7, #4]
  403e68:	683a      	ldr	r2, [r7, #0]
  403e6a:	635a      	str	r2, [r3, #52]	; 0x34
}
  403e6c:	bf00      	nop
  403e6e:	370c      	adds	r7, #12
  403e70:	46bd      	mov	sp, r7
  403e72:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e76:	4770      	bx	lr

00403e78 <pio_get>:
 * \retval 1 at least one PIO currently has a high level.
 * \retval 0 all PIOs have a low level.
 */
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  403e78:	b480      	push	{r7}
  403e7a:	b087      	sub	sp, #28
  403e7c:	af00      	add	r7, sp, #0
  403e7e:	60f8      	str	r0, [r7, #12]
  403e80:	60b9      	str	r1, [r7, #8]
  403e82:	607a      	str	r2, [r7, #4]
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  403e84:	68bb      	ldr	r3, [r7, #8]
  403e86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403e8a:	d003      	beq.n	403e94 <pio_get+0x1c>
  403e8c:	68bb      	ldr	r3, [r7, #8]
  403e8e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403e92:	d103      	bne.n	403e9c <pio_get+0x24>
		ul_reg = p_pio->PIO_ODSR;
  403e94:	68fb      	ldr	r3, [r7, #12]
  403e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  403e98:	617b      	str	r3, [r7, #20]
  403e9a:	e002      	b.n	403ea2 <pio_get+0x2a>
	} else {
		ul_reg = p_pio->PIO_PDSR;
  403e9c:	68fb      	ldr	r3, [r7, #12]
  403e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  403ea0:	617b      	str	r3, [r7, #20]
	}

	if ((ul_reg & ul_mask) == 0) {
  403ea2:	697a      	ldr	r2, [r7, #20]
  403ea4:	687b      	ldr	r3, [r7, #4]
  403ea6:	4013      	ands	r3, r2
  403ea8:	2b00      	cmp	r3, #0
  403eaa:	d101      	bne.n	403eb0 <pio_get+0x38>
		return 0;
  403eac:	2300      	movs	r3, #0
  403eae:	e000      	b.n	403eb2 <pio_get+0x3a>
	} else {
		return 1;
  403eb0:	2301      	movs	r3, #1
	}
}
  403eb2:	4618      	mov	r0, r3
  403eb4:	371c      	adds	r7, #28
  403eb6:	46bd      	mov	sp, r7
  403eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ebc:	4770      	bx	lr

00403ebe <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  403ebe:	b480      	push	{r7}
  403ec0:	b087      	sub	sp, #28
  403ec2:	af00      	add	r7, sp, #0
  403ec4:	60f8      	str	r0, [r7, #12]
  403ec6:	60b9      	str	r1, [r7, #8]
  403ec8:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  403eca:	68fb      	ldr	r3, [r7, #12]
  403ecc:	687a      	ldr	r2, [r7, #4]
  403ece:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  403ed0:	68bb      	ldr	r3, [r7, #8]
  403ed2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403ed6:	d04a      	beq.n	403f6e <pio_set_peripheral+0xb0>
  403ed8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  403edc:	d808      	bhi.n	403ef0 <pio_set_peripheral+0x32>
  403ede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  403ee2:	d016      	beq.n	403f12 <pio_set_peripheral+0x54>
  403ee4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  403ee8:	d02c      	beq.n	403f44 <pio_set_peripheral+0x86>
  403eea:	2b00      	cmp	r3, #0
  403eec:	d069      	beq.n	403fc2 <pio_set_peripheral+0x104>
  403eee:	e064      	b.n	403fba <pio_set_peripheral+0xfc>
  403ef0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403ef4:	d065      	beq.n	403fc2 <pio_set_peripheral+0x104>
  403ef6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  403efa:	d803      	bhi.n	403f04 <pio_set_peripheral+0x46>
  403efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  403f00:	d04a      	beq.n	403f98 <pio_set_peripheral+0xda>
  403f02:	e05a      	b.n	403fba <pio_set_peripheral+0xfc>
  403f04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  403f08:	d05b      	beq.n	403fc2 <pio_set_peripheral+0x104>
  403f0a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  403f0e:	d058      	beq.n	403fc2 <pio_set_peripheral+0x104>
  403f10:	e053      	b.n	403fba <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403f12:	68fb      	ldr	r3, [r7, #12]
  403f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403f16:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403f18:	68fb      	ldr	r3, [r7, #12]
  403f1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403f1c:	687b      	ldr	r3, [r7, #4]
  403f1e:	43d9      	mvns	r1, r3
  403f20:	697b      	ldr	r3, [r7, #20]
  403f22:	400b      	ands	r3, r1
  403f24:	401a      	ands	r2, r3
  403f26:	68fb      	ldr	r3, [r7, #12]
  403f28:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403f2a:	68fb      	ldr	r3, [r7, #12]
  403f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403f2e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403f30:	68fb      	ldr	r3, [r7, #12]
  403f32:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403f34:	687b      	ldr	r3, [r7, #4]
  403f36:	43d9      	mvns	r1, r3
  403f38:	697b      	ldr	r3, [r7, #20]
  403f3a:	400b      	ands	r3, r1
  403f3c:	401a      	ands	r2, r3
  403f3e:	68fb      	ldr	r3, [r7, #12]
  403f40:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  403f42:	e03a      	b.n	403fba <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403f44:	68fb      	ldr	r3, [r7, #12]
  403f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403f48:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403f4a:	687a      	ldr	r2, [r7, #4]
  403f4c:	697b      	ldr	r3, [r7, #20]
  403f4e:	431a      	orrs	r2, r3
  403f50:	68fb      	ldr	r3, [r7, #12]
  403f52:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403f54:	68fb      	ldr	r3, [r7, #12]
  403f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403f58:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403f5a:	68fb      	ldr	r3, [r7, #12]
  403f5c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403f5e:	687b      	ldr	r3, [r7, #4]
  403f60:	43d9      	mvns	r1, r3
  403f62:	697b      	ldr	r3, [r7, #20]
  403f64:	400b      	ands	r3, r1
  403f66:	401a      	ands	r2, r3
  403f68:	68fb      	ldr	r3, [r7, #12]
  403f6a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  403f6c:	e025      	b.n	403fba <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403f6e:	68fb      	ldr	r3, [r7, #12]
  403f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403f72:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403f74:	68fb      	ldr	r3, [r7, #12]
  403f76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403f78:	687b      	ldr	r3, [r7, #4]
  403f7a:	43d9      	mvns	r1, r3
  403f7c:	697b      	ldr	r3, [r7, #20]
  403f7e:	400b      	ands	r3, r1
  403f80:	401a      	ands	r2, r3
  403f82:	68fb      	ldr	r3, [r7, #12]
  403f84:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403f86:	68fb      	ldr	r3, [r7, #12]
  403f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403f8a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403f8c:	687a      	ldr	r2, [r7, #4]
  403f8e:	697b      	ldr	r3, [r7, #20]
  403f90:	431a      	orrs	r2, r3
  403f92:	68fb      	ldr	r3, [r7, #12]
  403f94:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  403f96:	e010      	b.n	403fba <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403f98:	68fb      	ldr	r3, [r7, #12]
  403f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403f9c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403f9e:	687a      	ldr	r2, [r7, #4]
  403fa0:	697b      	ldr	r3, [r7, #20]
  403fa2:	431a      	orrs	r2, r3
  403fa4:	68fb      	ldr	r3, [r7, #12]
  403fa6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403fa8:	68fb      	ldr	r3, [r7, #12]
  403faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  403fac:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403fae:	687a      	ldr	r2, [r7, #4]
  403fb0:	697b      	ldr	r3, [r7, #20]
  403fb2:	431a      	orrs	r2, r3
  403fb4:	68fb      	ldr	r3, [r7, #12]
  403fb6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  403fb8:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  403fba:	68fb      	ldr	r3, [r7, #12]
  403fbc:	687a      	ldr	r2, [r7, #4]
  403fbe:	605a      	str	r2, [r3, #4]
  403fc0:	e000      	b.n	403fc4 <pio_set_peripheral+0x106>
		return;
  403fc2:	bf00      	nop
}
  403fc4:	371c      	adds	r7, #28
  403fc6:	46bd      	mov	sp, r7
  403fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403fcc:	4770      	bx	lr
	...

00403fd0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  403fd0:	b580      	push	{r7, lr}
  403fd2:	b084      	sub	sp, #16
  403fd4:	af00      	add	r7, sp, #0
  403fd6:	60f8      	str	r0, [r7, #12]
  403fd8:	60b9      	str	r1, [r7, #8]
  403fda:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  403fdc:	68b9      	ldr	r1, [r7, #8]
  403fde:	68f8      	ldr	r0, [r7, #12]
  403fe0:	4b19      	ldr	r3, [pc, #100]	; (404048 <pio_set_input+0x78>)
  403fe2:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  403fe4:	687b      	ldr	r3, [r7, #4]
  403fe6:	f003 0301 	and.w	r3, r3, #1
  403fea:	461a      	mov	r2, r3
  403fec:	68b9      	ldr	r1, [r7, #8]
  403fee:	68f8      	ldr	r0, [r7, #12]
  403ff0:	4b16      	ldr	r3, [pc, #88]	; (40404c <pio_set_input+0x7c>)
  403ff2:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  403ff4:	687b      	ldr	r3, [r7, #4]
  403ff6:	f003 030a 	and.w	r3, r3, #10
  403ffa:	2b00      	cmp	r3, #0
  403ffc:	d003      	beq.n	404006 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  403ffe:	68fb      	ldr	r3, [r7, #12]
  404000:	68ba      	ldr	r2, [r7, #8]
  404002:	621a      	str	r2, [r3, #32]
  404004:	e002      	b.n	40400c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  404006:	68fb      	ldr	r3, [r7, #12]
  404008:	68ba      	ldr	r2, [r7, #8]
  40400a:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40400c:	687b      	ldr	r3, [r7, #4]
  40400e:	f003 0302 	and.w	r3, r3, #2
  404012:	2b00      	cmp	r3, #0
  404014:	d004      	beq.n	404020 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  404016:	68fb      	ldr	r3, [r7, #12]
  404018:	68ba      	ldr	r2, [r7, #8]
  40401a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40401e:	e008      	b.n	404032 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  404020:	687b      	ldr	r3, [r7, #4]
  404022:	f003 0308 	and.w	r3, r3, #8
  404026:	2b00      	cmp	r3, #0
  404028:	d003      	beq.n	404032 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  40402a:	68fb      	ldr	r3, [r7, #12]
  40402c:	68ba      	ldr	r2, [r7, #8]
  40402e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  404032:	68fb      	ldr	r3, [r7, #12]
  404034:	68ba      	ldr	r2, [r7, #8]
  404036:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  404038:	68fb      	ldr	r3, [r7, #12]
  40403a:	68ba      	ldr	r2, [r7, #8]
  40403c:	601a      	str	r2, [r3, #0]
}
  40403e:	bf00      	nop
  404040:	3710      	adds	r7, #16
  404042:	46bd      	mov	sp, r7
  404044:	bd80      	pop	{r7, pc}
  404046:	bf00      	nop
  404048:	00404181 	.word	0x00404181
  40404c:	00403e31 	.word	0x00403e31

00404050 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  404050:	b580      	push	{r7, lr}
  404052:	b084      	sub	sp, #16
  404054:	af00      	add	r7, sp, #0
  404056:	60f8      	str	r0, [r7, #12]
  404058:	60b9      	str	r1, [r7, #8]
  40405a:	607a      	str	r2, [r7, #4]
  40405c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40405e:	68b9      	ldr	r1, [r7, #8]
  404060:	68f8      	ldr	r0, [r7, #12]
  404062:	4b12      	ldr	r3, [pc, #72]	; (4040ac <pio_set_output+0x5c>)
  404064:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  404066:	69ba      	ldr	r2, [r7, #24]
  404068:	68b9      	ldr	r1, [r7, #8]
  40406a:	68f8      	ldr	r0, [r7, #12]
  40406c:	4b10      	ldr	r3, [pc, #64]	; (4040b0 <pio_set_output+0x60>)
  40406e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  404070:	683b      	ldr	r3, [r7, #0]
  404072:	2b00      	cmp	r3, #0
  404074:	d003      	beq.n	40407e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  404076:	68fb      	ldr	r3, [r7, #12]
  404078:	68ba      	ldr	r2, [r7, #8]
  40407a:	651a      	str	r2, [r3, #80]	; 0x50
  40407c:	e002      	b.n	404084 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40407e:	68fb      	ldr	r3, [r7, #12]
  404080:	68ba      	ldr	r2, [r7, #8]
  404082:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  404084:	687b      	ldr	r3, [r7, #4]
  404086:	2b00      	cmp	r3, #0
  404088:	d003      	beq.n	404092 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  40408a:	68fb      	ldr	r3, [r7, #12]
  40408c:	68ba      	ldr	r2, [r7, #8]
  40408e:	631a      	str	r2, [r3, #48]	; 0x30
  404090:	e002      	b.n	404098 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  404092:	68fb      	ldr	r3, [r7, #12]
  404094:	68ba      	ldr	r2, [r7, #8]
  404096:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  404098:	68fb      	ldr	r3, [r7, #12]
  40409a:	68ba      	ldr	r2, [r7, #8]
  40409c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  40409e:	68fb      	ldr	r3, [r7, #12]
  4040a0:	68ba      	ldr	r2, [r7, #8]
  4040a2:	601a      	str	r2, [r3, #0]
}
  4040a4:	bf00      	nop
  4040a6:	3710      	adds	r7, #16
  4040a8:	46bd      	mov	sp, r7
  4040aa:	bd80      	pop	{r7, pc}
  4040ac:	00404181 	.word	0x00404181
  4040b0:	00403e31 	.word	0x00403e31

004040b4 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  4040b4:	b590      	push	{r4, r7, lr}
  4040b6:	b087      	sub	sp, #28
  4040b8:	af02      	add	r7, sp, #8
  4040ba:	60f8      	str	r0, [r7, #12]
  4040bc:	60b9      	str	r1, [r7, #8]
  4040be:	607a      	str	r2, [r7, #4]
  4040c0:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  4040c2:	68bb      	ldr	r3, [r7, #8]
  4040c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4040c8:	d016      	beq.n	4040f8 <pio_configure+0x44>
  4040ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4040ce:	d809      	bhi.n	4040e4 <pio_configure+0x30>
  4040d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4040d4:	d010      	beq.n	4040f8 <pio_configure+0x44>
  4040d6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4040da:	d00d      	beq.n	4040f8 <pio_configure+0x44>
  4040dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4040e0:	d00a      	beq.n	4040f8 <pio_configure+0x44>
  4040e2:	e03d      	b.n	404160 <pio_configure+0xac>
  4040e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4040e8:	d01a      	beq.n	404120 <pio_configure+0x6c>
  4040ea:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4040ee:	d017      	beq.n	404120 <pio_configure+0x6c>
  4040f0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4040f4:	d00e      	beq.n	404114 <pio_configure+0x60>
  4040f6:	e033      	b.n	404160 <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4040f8:	687a      	ldr	r2, [r7, #4]
  4040fa:	68b9      	ldr	r1, [r7, #8]
  4040fc:	68f8      	ldr	r0, [r7, #12]
  4040fe:	4b1c      	ldr	r3, [pc, #112]	; (404170 <pio_configure+0xbc>)
  404100:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  404102:	683b      	ldr	r3, [r7, #0]
  404104:	f003 0301 	and.w	r3, r3, #1
  404108:	461a      	mov	r2, r3
  40410a:	6879      	ldr	r1, [r7, #4]
  40410c:	68f8      	ldr	r0, [r7, #12]
  40410e:	4b19      	ldr	r3, [pc, #100]	; (404174 <pio_configure+0xc0>)
  404110:	4798      	blx	r3
		break;
  404112:	e027      	b.n	404164 <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  404114:	683a      	ldr	r2, [r7, #0]
  404116:	6879      	ldr	r1, [r7, #4]
  404118:	68f8      	ldr	r0, [r7, #12]
  40411a:	4b17      	ldr	r3, [pc, #92]	; (404178 <pio_configure+0xc4>)
  40411c:	4798      	blx	r3
		break;
  40411e:	e021      	b.n	404164 <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  404120:	68bb      	ldr	r3, [r7, #8]
  404122:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  404126:	bf0c      	ite	eq
  404128:	2301      	moveq	r3, #1
  40412a:	2300      	movne	r3, #0
  40412c:	b2db      	uxtb	r3, r3
  40412e:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  404130:	683b      	ldr	r3, [r7, #0]
  404132:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  404136:	2b00      	cmp	r3, #0
  404138:	bf14      	ite	ne
  40413a:	2301      	movne	r3, #1
  40413c:	2300      	moveq	r3, #0
  40413e:	b2db      	uxtb	r3, r3
  404140:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  404142:	683b      	ldr	r3, [r7, #0]
  404144:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  404148:	2b00      	cmp	r3, #0
  40414a:	bf14      	ite	ne
  40414c:	2301      	movne	r3, #1
  40414e:	2300      	moveq	r3, #0
  404150:	b2db      	uxtb	r3, r3
  404152:	9300      	str	r3, [sp, #0]
  404154:	460b      	mov	r3, r1
  404156:	6879      	ldr	r1, [r7, #4]
  404158:	68f8      	ldr	r0, [r7, #12]
  40415a:	4c08      	ldr	r4, [pc, #32]	; (40417c <pio_configure+0xc8>)
  40415c:	47a0      	blx	r4
		break;
  40415e:	e001      	b.n	404164 <pio_configure+0xb0>

	default:
		return 0;
  404160:	2300      	movs	r3, #0
  404162:	e000      	b.n	404166 <pio_configure+0xb2>
	}

	return 1;
  404164:	2301      	movs	r3, #1
}
  404166:	4618      	mov	r0, r3
  404168:	3714      	adds	r7, #20
  40416a:	46bd      	mov	sp, r7
  40416c:	bd90      	pop	{r4, r7, pc}
  40416e:	bf00      	nop
  404170:	00403ebf 	.word	0x00403ebf
  404174:	00403e31 	.word	0x00403e31
  404178:	00403fd1 	.word	0x00403fd1
  40417c:	00404051 	.word	0x00404051

00404180 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  404180:	b480      	push	{r7}
  404182:	b083      	sub	sp, #12
  404184:	af00      	add	r7, sp, #0
  404186:	6078      	str	r0, [r7, #4]
  404188:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  40418a:	687b      	ldr	r3, [r7, #4]
  40418c:	683a      	ldr	r2, [r7, #0]
  40418e:	645a      	str	r2, [r3, #68]	; 0x44
}
  404190:	bf00      	nop
  404192:	370c      	adds	r7, #12
  404194:	46bd      	mov	sp, r7
  404196:	f85d 7b04 	ldr.w	r7, [sp], #4
  40419a:	4770      	bx	lr

0040419c <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  40419c:	b480      	push	{r7}
  40419e:	b083      	sub	sp, #12
  4041a0:	af00      	add	r7, sp, #0
  4041a2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4041a4:	687b      	ldr	r3, [r7, #4]
  4041a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4041a8:	4618      	mov	r0, r3
  4041aa:	370c      	adds	r7, #12
  4041ac:	46bd      	mov	sp, r7
  4041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4041b2:	4770      	bx	lr

004041b4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4041b4:	b480      	push	{r7}
  4041b6:	b083      	sub	sp, #12
  4041b8:	af00      	add	r7, sp, #0
  4041ba:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4041bc:	687b      	ldr	r3, [r7, #4]
  4041be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4041c0:	4618      	mov	r0, r3
  4041c2:	370c      	adds	r7, #12
  4041c4:	46bd      	mov	sp, r7
  4041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4041ca:	4770      	bx	lr

004041cc <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4041cc:	b480      	push	{r7}
  4041ce:	b083      	sub	sp, #12
  4041d0:	af00      	add	r7, sp, #0
  4041d2:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4041d4:	687b      	ldr	r3, [r7, #4]
  4041d6:	2b2f      	cmp	r3, #47	; 0x2f
  4041d8:	d901      	bls.n	4041de <pmc_enable_periph_clk+0x12>
		return 1;
  4041da:	2301      	movs	r3, #1
  4041dc:	e02f      	b.n	40423e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4041de:	687b      	ldr	r3, [r7, #4]
  4041e0:	2b1f      	cmp	r3, #31
  4041e2:	d813      	bhi.n	40420c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4041e4:	4b19      	ldr	r3, [pc, #100]	; (40424c <pmc_enable_periph_clk+0x80>)
  4041e6:	699a      	ldr	r2, [r3, #24]
  4041e8:	2101      	movs	r1, #1
  4041ea:	687b      	ldr	r3, [r7, #4]
  4041ec:	fa01 f303 	lsl.w	r3, r1, r3
  4041f0:	401a      	ands	r2, r3
  4041f2:	2101      	movs	r1, #1
  4041f4:	687b      	ldr	r3, [r7, #4]
  4041f6:	fa01 f303 	lsl.w	r3, r1, r3
  4041fa:	429a      	cmp	r2, r3
  4041fc:	d01e      	beq.n	40423c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4041fe:	4a13      	ldr	r2, [pc, #76]	; (40424c <pmc_enable_periph_clk+0x80>)
  404200:	2101      	movs	r1, #1
  404202:	687b      	ldr	r3, [r7, #4]
  404204:	fa01 f303 	lsl.w	r3, r1, r3
  404208:	6113      	str	r3, [r2, #16]
  40420a:	e017      	b.n	40423c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  40420c:	687b      	ldr	r3, [r7, #4]
  40420e:	3b20      	subs	r3, #32
  404210:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  404212:	4b0e      	ldr	r3, [pc, #56]	; (40424c <pmc_enable_periph_clk+0x80>)
  404214:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  404218:	2101      	movs	r1, #1
  40421a:	687b      	ldr	r3, [r7, #4]
  40421c:	fa01 f303 	lsl.w	r3, r1, r3
  404220:	401a      	ands	r2, r3
  404222:	2101      	movs	r1, #1
  404224:	687b      	ldr	r3, [r7, #4]
  404226:	fa01 f303 	lsl.w	r3, r1, r3
  40422a:	429a      	cmp	r2, r3
  40422c:	d006      	beq.n	40423c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40422e:	4a07      	ldr	r2, [pc, #28]	; (40424c <pmc_enable_periph_clk+0x80>)
  404230:	2101      	movs	r1, #1
  404232:	687b      	ldr	r3, [r7, #4]
  404234:	fa01 f303 	lsl.w	r3, r1, r3
  404238:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40423c:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40423e:	4618      	mov	r0, r3
  404240:	370c      	adds	r7, #12
  404242:	46bd      	mov	sp, r7
  404244:	f85d 7b04 	ldr.w	r7, [sp], #4
  404248:	4770      	bx	lr
  40424a:	bf00      	nop
  40424c:	400e0400 	.word	0x400e0400

00404250 <__aeabi_uldivmod>:
  404250:	b953      	cbnz	r3, 404268 <__aeabi_uldivmod+0x18>
  404252:	b94a      	cbnz	r2, 404268 <__aeabi_uldivmod+0x18>
  404254:	2900      	cmp	r1, #0
  404256:	bf08      	it	eq
  404258:	2800      	cmpeq	r0, #0
  40425a:	bf1c      	itt	ne
  40425c:	f04f 31ff 	movne.w	r1, #4294967295
  404260:	f04f 30ff 	movne.w	r0, #4294967295
  404264:	f000 b97a 	b.w	40455c <__aeabi_idiv0>
  404268:	f1ad 0c08 	sub.w	ip, sp, #8
  40426c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404270:	f000 f806 	bl	404280 <__udivmoddi4>
  404274:	f8dd e004 	ldr.w	lr, [sp, #4]
  404278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40427c:	b004      	add	sp, #16
  40427e:	4770      	bx	lr

00404280 <__udivmoddi4>:
  404280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404284:	468c      	mov	ip, r1
  404286:	460d      	mov	r5, r1
  404288:	4604      	mov	r4, r0
  40428a:	9e08      	ldr	r6, [sp, #32]
  40428c:	2b00      	cmp	r3, #0
  40428e:	d151      	bne.n	404334 <__udivmoddi4+0xb4>
  404290:	428a      	cmp	r2, r1
  404292:	4617      	mov	r7, r2
  404294:	d96d      	bls.n	404372 <__udivmoddi4+0xf2>
  404296:	fab2 fe82 	clz	lr, r2
  40429a:	f1be 0f00 	cmp.w	lr, #0
  40429e:	d00b      	beq.n	4042b8 <__udivmoddi4+0x38>
  4042a0:	f1ce 0c20 	rsb	ip, lr, #32
  4042a4:	fa01 f50e 	lsl.w	r5, r1, lr
  4042a8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4042ac:	fa02 f70e 	lsl.w	r7, r2, lr
  4042b0:	ea4c 0c05 	orr.w	ip, ip, r5
  4042b4:	fa00 f40e 	lsl.w	r4, r0, lr
  4042b8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4042bc:	0c25      	lsrs	r5, r4, #16
  4042be:	fbbc f8fa 	udiv	r8, ip, sl
  4042c2:	fa1f f987 	uxth.w	r9, r7
  4042c6:	fb0a cc18 	mls	ip, sl, r8, ip
  4042ca:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4042ce:	fb08 f309 	mul.w	r3, r8, r9
  4042d2:	42ab      	cmp	r3, r5
  4042d4:	d90a      	bls.n	4042ec <__udivmoddi4+0x6c>
  4042d6:	19ed      	adds	r5, r5, r7
  4042d8:	f108 32ff 	add.w	r2, r8, #4294967295
  4042dc:	f080 8123 	bcs.w	404526 <__udivmoddi4+0x2a6>
  4042e0:	42ab      	cmp	r3, r5
  4042e2:	f240 8120 	bls.w	404526 <__udivmoddi4+0x2a6>
  4042e6:	f1a8 0802 	sub.w	r8, r8, #2
  4042ea:	443d      	add	r5, r7
  4042ec:	1aed      	subs	r5, r5, r3
  4042ee:	b2a4      	uxth	r4, r4
  4042f0:	fbb5 f0fa 	udiv	r0, r5, sl
  4042f4:	fb0a 5510 	mls	r5, sl, r0, r5
  4042f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4042fc:	fb00 f909 	mul.w	r9, r0, r9
  404300:	45a1      	cmp	r9, r4
  404302:	d909      	bls.n	404318 <__udivmoddi4+0x98>
  404304:	19e4      	adds	r4, r4, r7
  404306:	f100 33ff 	add.w	r3, r0, #4294967295
  40430a:	f080 810a 	bcs.w	404522 <__udivmoddi4+0x2a2>
  40430e:	45a1      	cmp	r9, r4
  404310:	f240 8107 	bls.w	404522 <__udivmoddi4+0x2a2>
  404314:	3802      	subs	r0, #2
  404316:	443c      	add	r4, r7
  404318:	eba4 0409 	sub.w	r4, r4, r9
  40431c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404320:	2100      	movs	r1, #0
  404322:	2e00      	cmp	r6, #0
  404324:	d061      	beq.n	4043ea <__udivmoddi4+0x16a>
  404326:	fa24 f40e 	lsr.w	r4, r4, lr
  40432a:	2300      	movs	r3, #0
  40432c:	6034      	str	r4, [r6, #0]
  40432e:	6073      	str	r3, [r6, #4]
  404330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404334:	428b      	cmp	r3, r1
  404336:	d907      	bls.n	404348 <__udivmoddi4+0xc8>
  404338:	2e00      	cmp	r6, #0
  40433a:	d054      	beq.n	4043e6 <__udivmoddi4+0x166>
  40433c:	2100      	movs	r1, #0
  40433e:	e886 0021 	stmia.w	r6, {r0, r5}
  404342:	4608      	mov	r0, r1
  404344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404348:	fab3 f183 	clz	r1, r3
  40434c:	2900      	cmp	r1, #0
  40434e:	f040 808e 	bne.w	40446e <__udivmoddi4+0x1ee>
  404352:	42ab      	cmp	r3, r5
  404354:	d302      	bcc.n	40435c <__udivmoddi4+0xdc>
  404356:	4282      	cmp	r2, r0
  404358:	f200 80fa 	bhi.w	404550 <__udivmoddi4+0x2d0>
  40435c:	1a84      	subs	r4, r0, r2
  40435e:	eb65 0503 	sbc.w	r5, r5, r3
  404362:	2001      	movs	r0, #1
  404364:	46ac      	mov	ip, r5
  404366:	2e00      	cmp	r6, #0
  404368:	d03f      	beq.n	4043ea <__udivmoddi4+0x16a>
  40436a:	e886 1010 	stmia.w	r6, {r4, ip}
  40436e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404372:	b912      	cbnz	r2, 40437a <__udivmoddi4+0xfa>
  404374:	2701      	movs	r7, #1
  404376:	fbb7 f7f2 	udiv	r7, r7, r2
  40437a:	fab7 fe87 	clz	lr, r7
  40437e:	f1be 0f00 	cmp.w	lr, #0
  404382:	d134      	bne.n	4043ee <__udivmoddi4+0x16e>
  404384:	1beb      	subs	r3, r5, r7
  404386:	0c3a      	lsrs	r2, r7, #16
  404388:	fa1f fc87 	uxth.w	ip, r7
  40438c:	2101      	movs	r1, #1
  40438e:	fbb3 f8f2 	udiv	r8, r3, r2
  404392:	0c25      	lsrs	r5, r4, #16
  404394:	fb02 3318 	mls	r3, r2, r8, r3
  404398:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40439c:	fb0c f308 	mul.w	r3, ip, r8
  4043a0:	42ab      	cmp	r3, r5
  4043a2:	d907      	bls.n	4043b4 <__udivmoddi4+0x134>
  4043a4:	19ed      	adds	r5, r5, r7
  4043a6:	f108 30ff 	add.w	r0, r8, #4294967295
  4043aa:	d202      	bcs.n	4043b2 <__udivmoddi4+0x132>
  4043ac:	42ab      	cmp	r3, r5
  4043ae:	f200 80d1 	bhi.w	404554 <__udivmoddi4+0x2d4>
  4043b2:	4680      	mov	r8, r0
  4043b4:	1aed      	subs	r5, r5, r3
  4043b6:	b2a3      	uxth	r3, r4
  4043b8:	fbb5 f0f2 	udiv	r0, r5, r2
  4043bc:	fb02 5510 	mls	r5, r2, r0, r5
  4043c0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4043c4:	fb0c fc00 	mul.w	ip, ip, r0
  4043c8:	45a4      	cmp	ip, r4
  4043ca:	d907      	bls.n	4043dc <__udivmoddi4+0x15c>
  4043cc:	19e4      	adds	r4, r4, r7
  4043ce:	f100 33ff 	add.w	r3, r0, #4294967295
  4043d2:	d202      	bcs.n	4043da <__udivmoddi4+0x15a>
  4043d4:	45a4      	cmp	ip, r4
  4043d6:	f200 80b8 	bhi.w	40454a <__udivmoddi4+0x2ca>
  4043da:	4618      	mov	r0, r3
  4043dc:	eba4 040c 	sub.w	r4, r4, ip
  4043e0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4043e4:	e79d      	b.n	404322 <__udivmoddi4+0xa2>
  4043e6:	4631      	mov	r1, r6
  4043e8:	4630      	mov	r0, r6
  4043ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4043ee:	f1ce 0420 	rsb	r4, lr, #32
  4043f2:	fa05 f30e 	lsl.w	r3, r5, lr
  4043f6:	fa07 f70e 	lsl.w	r7, r7, lr
  4043fa:	fa20 f804 	lsr.w	r8, r0, r4
  4043fe:	0c3a      	lsrs	r2, r7, #16
  404400:	fa25 f404 	lsr.w	r4, r5, r4
  404404:	ea48 0803 	orr.w	r8, r8, r3
  404408:	fbb4 f1f2 	udiv	r1, r4, r2
  40440c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  404410:	fb02 4411 	mls	r4, r2, r1, r4
  404414:	fa1f fc87 	uxth.w	ip, r7
  404418:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40441c:	fb01 f30c 	mul.w	r3, r1, ip
  404420:	42ab      	cmp	r3, r5
  404422:	fa00 f40e 	lsl.w	r4, r0, lr
  404426:	d909      	bls.n	40443c <__udivmoddi4+0x1bc>
  404428:	19ed      	adds	r5, r5, r7
  40442a:	f101 30ff 	add.w	r0, r1, #4294967295
  40442e:	f080 808a 	bcs.w	404546 <__udivmoddi4+0x2c6>
  404432:	42ab      	cmp	r3, r5
  404434:	f240 8087 	bls.w	404546 <__udivmoddi4+0x2c6>
  404438:	3902      	subs	r1, #2
  40443a:	443d      	add	r5, r7
  40443c:	1aeb      	subs	r3, r5, r3
  40443e:	fa1f f588 	uxth.w	r5, r8
  404442:	fbb3 f0f2 	udiv	r0, r3, r2
  404446:	fb02 3310 	mls	r3, r2, r0, r3
  40444a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40444e:	fb00 f30c 	mul.w	r3, r0, ip
  404452:	42ab      	cmp	r3, r5
  404454:	d907      	bls.n	404466 <__udivmoddi4+0x1e6>
  404456:	19ed      	adds	r5, r5, r7
  404458:	f100 38ff 	add.w	r8, r0, #4294967295
  40445c:	d26f      	bcs.n	40453e <__udivmoddi4+0x2be>
  40445e:	42ab      	cmp	r3, r5
  404460:	d96d      	bls.n	40453e <__udivmoddi4+0x2be>
  404462:	3802      	subs	r0, #2
  404464:	443d      	add	r5, r7
  404466:	1aeb      	subs	r3, r5, r3
  404468:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40446c:	e78f      	b.n	40438e <__udivmoddi4+0x10e>
  40446e:	f1c1 0720 	rsb	r7, r1, #32
  404472:	fa22 f807 	lsr.w	r8, r2, r7
  404476:	408b      	lsls	r3, r1
  404478:	fa05 f401 	lsl.w	r4, r5, r1
  40447c:	ea48 0303 	orr.w	r3, r8, r3
  404480:	fa20 fe07 	lsr.w	lr, r0, r7
  404484:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404488:	40fd      	lsrs	r5, r7
  40448a:	ea4e 0e04 	orr.w	lr, lr, r4
  40448e:	fbb5 f9fc 	udiv	r9, r5, ip
  404492:	ea4f 441e 	mov.w	r4, lr, lsr #16
  404496:	fb0c 5519 	mls	r5, ip, r9, r5
  40449a:	fa1f f883 	uxth.w	r8, r3
  40449e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4044a2:	fb09 f408 	mul.w	r4, r9, r8
  4044a6:	42ac      	cmp	r4, r5
  4044a8:	fa02 f201 	lsl.w	r2, r2, r1
  4044ac:	fa00 fa01 	lsl.w	sl, r0, r1
  4044b0:	d908      	bls.n	4044c4 <__udivmoddi4+0x244>
  4044b2:	18ed      	adds	r5, r5, r3
  4044b4:	f109 30ff 	add.w	r0, r9, #4294967295
  4044b8:	d243      	bcs.n	404542 <__udivmoddi4+0x2c2>
  4044ba:	42ac      	cmp	r4, r5
  4044bc:	d941      	bls.n	404542 <__udivmoddi4+0x2c2>
  4044be:	f1a9 0902 	sub.w	r9, r9, #2
  4044c2:	441d      	add	r5, r3
  4044c4:	1b2d      	subs	r5, r5, r4
  4044c6:	fa1f fe8e 	uxth.w	lr, lr
  4044ca:	fbb5 f0fc 	udiv	r0, r5, ip
  4044ce:	fb0c 5510 	mls	r5, ip, r0, r5
  4044d2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4044d6:	fb00 f808 	mul.w	r8, r0, r8
  4044da:	45a0      	cmp	r8, r4
  4044dc:	d907      	bls.n	4044ee <__udivmoddi4+0x26e>
  4044de:	18e4      	adds	r4, r4, r3
  4044e0:	f100 35ff 	add.w	r5, r0, #4294967295
  4044e4:	d229      	bcs.n	40453a <__udivmoddi4+0x2ba>
  4044e6:	45a0      	cmp	r8, r4
  4044e8:	d927      	bls.n	40453a <__udivmoddi4+0x2ba>
  4044ea:	3802      	subs	r0, #2
  4044ec:	441c      	add	r4, r3
  4044ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4044f2:	eba4 0408 	sub.w	r4, r4, r8
  4044f6:	fba0 8902 	umull	r8, r9, r0, r2
  4044fa:	454c      	cmp	r4, r9
  4044fc:	46c6      	mov	lr, r8
  4044fe:	464d      	mov	r5, r9
  404500:	d315      	bcc.n	40452e <__udivmoddi4+0x2ae>
  404502:	d012      	beq.n	40452a <__udivmoddi4+0x2aa>
  404504:	b156      	cbz	r6, 40451c <__udivmoddi4+0x29c>
  404506:	ebba 030e 	subs.w	r3, sl, lr
  40450a:	eb64 0405 	sbc.w	r4, r4, r5
  40450e:	fa04 f707 	lsl.w	r7, r4, r7
  404512:	40cb      	lsrs	r3, r1
  404514:	431f      	orrs	r7, r3
  404516:	40cc      	lsrs	r4, r1
  404518:	6037      	str	r7, [r6, #0]
  40451a:	6074      	str	r4, [r6, #4]
  40451c:	2100      	movs	r1, #0
  40451e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404522:	4618      	mov	r0, r3
  404524:	e6f8      	b.n	404318 <__udivmoddi4+0x98>
  404526:	4690      	mov	r8, r2
  404528:	e6e0      	b.n	4042ec <__udivmoddi4+0x6c>
  40452a:	45c2      	cmp	sl, r8
  40452c:	d2ea      	bcs.n	404504 <__udivmoddi4+0x284>
  40452e:	ebb8 0e02 	subs.w	lr, r8, r2
  404532:	eb69 0503 	sbc.w	r5, r9, r3
  404536:	3801      	subs	r0, #1
  404538:	e7e4      	b.n	404504 <__udivmoddi4+0x284>
  40453a:	4628      	mov	r0, r5
  40453c:	e7d7      	b.n	4044ee <__udivmoddi4+0x26e>
  40453e:	4640      	mov	r0, r8
  404540:	e791      	b.n	404466 <__udivmoddi4+0x1e6>
  404542:	4681      	mov	r9, r0
  404544:	e7be      	b.n	4044c4 <__udivmoddi4+0x244>
  404546:	4601      	mov	r1, r0
  404548:	e778      	b.n	40443c <__udivmoddi4+0x1bc>
  40454a:	3802      	subs	r0, #2
  40454c:	443c      	add	r4, r7
  40454e:	e745      	b.n	4043dc <__udivmoddi4+0x15c>
  404550:	4608      	mov	r0, r1
  404552:	e708      	b.n	404366 <__udivmoddi4+0xe6>
  404554:	f1a8 0802 	sub.w	r8, r8, #2
  404558:	443d      	add	r5, r7
  40455a:	e72b      	b.n	4043b4 <__udivmoddi4+0x134>

0040455c <__aeabi_idiv0>:
  40455c:	4770      	bx	lr
  40455e:	bf00      	nop

00404560 <__libc_init_array>:
  404560:	b570      	push	{r4, r5, r6, lr}
  404562:	4e0f      	ldr	r6, [pc, #60]	; (4045a0 <__libc_init_array+0x40>)
  404564:	4d0f      	ldr	r5, [pc, #60]	; (4045a4 <__libc_init_array+0x44>)
  404566:	1b76      	subs	r6, r6, r5
  404568:	10b6      	asrs	r6, r6, #2
  40456a:	bf18      	it	ne
  40456c:	2400      	movne	r4, #0
  40456e:	d005      	beq.n	40457c <__libc_init_array+0x1c>
  404570:	3401      	adds	r4, #1
  404572:	f855 3b04 	ldr.w	r3, [r5], #4
  404576:	4798      	blx	r3
  404578:	42a6      	cmp	r6, r4
  40457a:	d1f9      	bne.n	404570 <__libc_init_array+0x10>
  40457c:	4e0a      	ldr	r6, [pc, #40]	; (4045a8 <__libc_init_array+0x48>)
  40457e:	4d0b      	ldr	r5, [pc, #44]	; (4045ac <__libc_init_array+0x4c>)
  404580:	1b76      	subs	r6, r6, r5
  404582:	f000 fa1f 	bl	4049c4 <_init>
  404586:	10b6      	asrs	r6, r6, #2
  404588:	bf18      	it	ne
  40458a:	2400      	movne	r4, #0
  40458c:	d006      	beq.n	40459c <__libc_init_array+0x3c>
  40458e:	3401      	adds	r4, #1
  404590:	f855 3b04 	ldr.w	r3, [r5], #4
  404594:	4798      	blx	r3
  404596:	42a6      	cmp	r6, r4
  404598:	d1f9      	bne.n	40458e <__libc_init_array+0x2e>
  40459a:	bd70      	pop	{r4, r5, r6, pc}
  40459c:	bd70      	pop	{r4, r5, r6, pc}
  40459e:	bf00      	nop
  4045a0:	004049d0 	.word	0x004049d0
  4045a4:	004049d0 	.word	0x004049d0
  4045a8:	004049d8 	.word	0x004049d8
  4045ac:	004049d0 	.word	0x004049d0

004045b0 <memcpy>:
  4045b0:	4684      	mov	ip, r0
  4045b2:	ea41 0300 	orr.w	r3, r1, r0
  4045b6:	f013 0303 	ands.w	r3, r3, #3
  4045ba:	d16d      	bne.n	404698 <memcpy+0xe8>
  4045bc:	3a40      	subs	r2, #64	; 0x40
  4045be:	d341      	bcc.n	404644 <memcpy+0x94>
  4045c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4045c4:	f840 3b04 	str.w	r3, [r0], #4
  4045c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4045cc:	f840 3b04 	str.w	r3, [r0], #4
  4045d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4045d4:	f840 3b04 	str.w	r3, [r0], #4
  4045d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4045dc:	f840 3b04 	str.w	r3, [r0], #4
  4045e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4045e4:	f840 3b04 	str.w	r3, [r0], #4
  4045e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4045ec:	f840 3b04 	str.w	r3, [r0], #4
  4045f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4045f4:	f840 3b04 	str.w	r3, [r0], #4
  4045f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4045fc:	f840 3b04 	str.w	r3, [r0], #4
  404600:	f851 3b04 	ldr.w	r3, [r1], #4
  404604:	f840 3b04 	str.w	r3, [r0], #4
  404608:	f851 3b04 	ldr.w	r3, [r1], #4
  40460c:	f840 3b04 	str.w	r3, [r0], #4
  404610:	f851 3b04 	ldr.w	r3, [r1], #4
  404614:	f840 3b04 	str.w	r3, [r0], #4
  404618:	f851 3b04 	ldr.w	r3, [r1], #4
  40461c:	f840 3b04 	str.w	r3, [r0], #4
  404620:	f851 3b04 	ldr.w	r3, [r1], #4
  404624:	f840 3b04 	str.w	r3, [r0], #4
  404628:	f851 3b04 	ldr.w	r3, [r1], #4
  40462c:	f840 3b04 	str.w	r3, [r0], #4
  404630:	f851 3b04 	ldr.w	r3, [r1], #4
  404634:	f840 3b04 	str.w	r3, [r0], #4
  404638:	f851 3b04 	ldr.w	r3, [r1], #4
  40463c:	f840 3b04 	str.w	r3, [r0], #4
  404640:	3a40      	subs	r2, #64	; 0x40
  404642:	d2bd      	bcs.n	4045c0 <memcpy+0x10>
  404644:	3230      	adds	r2, #48	; 0x30
  404646:	d311      	bcc.n	40466c <memcpy+0xbc>
  404648:	f851 3b04 	ldr.w	r3, [r1], #4
  40464c:	f840 3b04 	str.w	r3, [r0], #4
  404650:	f851 3b04 	ldr.w	r3, [r1], #4
  404654:	f840 3b04 	str.w	r3, [r0], #4
  404658:	f851 3b04 	ldr.w	r3, [r1], #4
  40465c:	f840 3b04 	str.w	r3, [r0], #4
  404660:	f851 3b04 	ldr.w	r3, [r1], #4
  404664:	f840 3b04 	str.w	r3, [r0], #4
  404668:	3a10      	subs	r2, #16
  40466a:	d2ed      	bcs.n	404648 <memcpy+0x98>
  40466c:	320c      	adds	r2, #12
  40466e:	d305      	bcc.n	40467c <memcpy+0xcc>
  404670:	f851 3b04 	ldr.w	r3, [r1], #4
  404674:	f840 3b04 	str.w	r3, [r0], #4
  404678:	3a04      	subs	r2, #4
  40467a:	d2f9      	bcs.n	404670 <memcpy+0xc0>
  40467c:	3204      	adds	r2, #4
  40467e:	d008      	beq.n	404692 <memcpy+0xe2>
  404680:	07d2      	lsls	r2, r2, #31
  404682:	bf1c      	itt	ne
  404684:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404688:	f800 3b01 	strbne.w	r3, [r0], #1
  40468c:	d301      	bcc.n	404692 <memcpy+0xe2>
  40468e:	880b      	ldrh	r3, [r1, #0]
  404690:	8003      	strh	r3, [r0, #0]
  404692:	4660      	mov	r0, ip
  404694:	4770      	bx	lr
  404696:	bf00      	nop
  404698:	2a08      	cmp	r2, #8
  40469a:	d313      	bcc.n	4046c4 <memcpy+0x114>
  40469c:	078b      	lsls	r3, r1, #30
  40469e:	d08d      	beq.n	4045bc <memcpy+0xc>
  4046a0:	f010 0303 	ands.w	r3, r0, #3
  4046a4:	d08a      	beq.n	4045bc <memcpy+0xc>
  4046a6:	f1c3 0304 	rsb	r3, r3, #4
  4046aa:	1ad2      	subs	r2, r2, r3
  4046ac:	07db      	lsls	r3, r3, #31
  4046ae:	bf1c      	itt	ne
  4046b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4046b4:	f800 3b01 	strbne.w	r3, [r0], #1
  4046b8:	d380      	bcc.n	4045bc <memcpy+0xc>
  4046ba:	f831 3b02 	ldrh.w	r3, [r1], #2
  4046be:	f820 3b02 	strh.w	r3, [r0], #2
  4046c2:	e77b      	b.n	4045bc <memcpy+0xc>
  4046c4:	3a04      	subs	r2, #4
  4046c6:	d3d9      	bcc.n	40467c <memcpy+0xcc>
  4046c8:	3a01      	subs	r2, #1
  4046ca:	f811 3b01 	ldrb.w	r3, [r1], #1
  4046ce:	f800 3b01 	strb.w	r3, [r0], #1
  4046d2:	d2f9      	bcs.n	4046c8 <memcpy+0x118>
  4046d4:	780b      	ldrb	r3, [r1, #0]
  4046d6:	7003      	strb	r3, [r0, #0]
  4046d8:	784b      	ldrb	r3, [r1, #1]
  4046da:	7043      	strb	r3, [r0, #1]
  4046dc:	788b      	ldrb	r3, [r1, #2]
  4046de:	7083      	strb	r3, [r0, #2]
  4046e0:	4660      	mov	r0, ip
  4046e2:	4770      	bx	lr

004046e4 <memset>:
  4046e4:	b470      	push	{r4, r5, r6}
  4046e6:	0786      	lsls	r6, r0, #30
  4046e8:	d046      	beq.n	404778 <memset+0x94>
  4046ea:	1e54      	subs	r4, r2, #1
  4046ec:	2a00      	cmp	r2, #0
  4046ee:	d041      	beq.n	404774 <memset+0x90>
  4046f0:	b2ca      	uxtb	r2, r1
  4046f2:	4603      	mov	r3, r0
  4046f4:	e002      	b.n	4046fc <memset+0x18>
  4046f6:	f114 34ff 	adds.w	r4, r4, #4294967295
  4046fa:	d33b      	bcc.n	404774 <memset+0x90>
  4046fc:	f803 2b01 	strb.w	r2, [r3], #1
  404700:	079d      	lsls	r5, r3, #30
  404702:	d1f8      	bne.n	4046f6 <memset+0x12>
  404704:	2c03      	cmp	r4, #3
  404706:	d92e      	bls.n	404766 <memset+0x82>
  404708:	b2cd      	uxtb	r5, r1
  40470a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40470e:	2c0f      	cmp	r4, #15
  404710:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404714:	d919      	bls.n	40474a <memset+0x66>
  404716:	f103 0210 	add.w	r2, r3, #16
  40471a:	4626      	mov	r6, r4
  40471c:	3e10      	subs	r6, #16
  40471e:	2e0f      	cmp	r6, #15
  404720:	f842 5c10 	str.w	r5, [r2, #-16]
  404724:	f842 5c0c 	str.w	r5, [r2, #-12]
  404728:	f842 5c08 	str.w	r5, [r2, #-8]
  40472c:	f842 5c04 	str.w	r5, [r2, #-4]
  404730:	f102 0210 	add.w	r2, r2, #16
  404734:	d8f2      	bhi.n	40471c <memset+0x38>
  404736:	f1a4 0210 	sub.w	r2, r4, #16
  40473a:	f022 020f 	bic.w	r2, r2, #15
  40473e:	f004 040f 	and.w	r4, r4, #15
  404742:	3210      	adds	r2, #16
  404744:	2c03      	cmp	r4, #3
  404746:	4413      	add	r3, r2
  404748:	d90d      	bls.n	404766 <memset+0x82>
  40474a:	461e      	mov	r6, r3
  40474c:	4622      	mov	r2, r4
  40474e:	3a04      	subs	r2, #4
  404750:	2a03      	cmp	r2, #3
  404752:	f846 5b04 	str.w	r5, [r6], #4
  404756:	d8fa      	bhi.n	40474e <memset+0x6a>
  404758:	1f22      	subs	r2, r4, #4
  40475a:	f022 0203 	bic.w	r2, r2, #3
  40475e:	3204      	adds	r2, #4
  404760:	4413      	add	r3, r2
  404762:	f004 0403 	and.w	r4, r4, #3
  404766:	b12c      	cbz	r4, 404774 <memset+0x90>
  404768:	b2c9      	uxtb	r1, r1
  40476a:	441c      	add	r4, r3
  40476c:	f803 1b01 	strb.w	r1, [r3], #1
  404770:	429c      	cmp	r4, r3
  404772:	d1fb      	bne.n	40476c <memset+0x88>
  404774:	bc70      	pop	{r4, r5, r6}
  404776:	4770      	bx	lr
  404778:	4614      	mov	r4, r2
  40477a:	4603      	mov	r3, r0
  40477c:	e7c2      	b.n	404704 <memset+0x20>
  40477e:	bf00      	nop

00404780 <strncpy>:
  404780:	ea40 0301 	orr.w	r3, r0, r1
  404784:	f013 0f03 	tst.w	r3, #3
  404788:	b470      	push	{r4, r5, r6}
  40478a:	4603      	mov	r3, r0
  40478c:	d024      	beq.n	4047d8 <strncpy+0x58>
  40478e:	b1a2      	cbz	r2, 4047ba <strncpy+0x3a>
  404790:	780c      	ldrb	r4, [r1, #0]
  404792:	701c      	strb	r4, [r3, #0]
  404794:	3a01      	subs	r2, #1
  404796:	3301      	adds	r3, #1
  404798:	3101      	adds	r1, #1
  40479a:	b13c      	cbz	r4, 4047ac <strncpy+0x2c>
  40479c:	b16a      	cbz	r2, 4047ba <strncpy+0x3a>
  40479e:	f811 4b01 	ldrb.w	r4, [r1], #1
  4047a2:	f803 4b01 	strb.w	r4, [r3], #1
  4047a6:	3a01      	subs	r2, #1
  4047a8:	2c00      	cmp	r4, #0
  4047aa:	d1f7      	bne.n	40479c <strncpy+0x1c>
  4047ac:	b12a      	cbz	r2, 4047ba <strncpy+0x3a>
  4047ae:	441a      	add	r2, r3
  4047b0:	2100      	movs	r1, #0
  4047b2:	f803 1b01 	strb.w	r1, [r3], #1
  4047b6:	429a      	cmp	r2, r3
  4047b8:	d1fb      	bne.n	4047b2 <strncpy+0x32>
  4047ba:	bc70      	pop	{r4, r5, r6}
  4047bc:	4770      	bx	lr
  4047be:	460e      	mov	r6, r1
  4047c0:	f851 5b04 	ldr.w	r5, [r1], #4
  4047c4:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  4047c8:	ea24 0405 	bic.w	r4, r4, r5
  4047cc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  4047d0:	d105      	bne.n	4047de <strncpy+0x5e>
  4047d2:	f843 5b04 	str.w	r5, [r3], #4
  4047d6:	3a04      	subs	r2, #4
  4047d8:	2a03      	cmp	r2, #3
  4047da:	d8f0      	bhi.n	4047be <strncpy+0x3e>
  4047dc:	e7d7      	b.n	40478e <strncpy+0xe>
  4047de:	4631      	mov	r1, r6
  4047e0:	e7d6      	b.n	404790 <strncpy+0x10>
  4047e2:	bf00      	nop

004047e4 <register_fini>:
  4047e4:	4b02      	ldr	r3, [pc, #8]	; (4047f0 <register_fini+0xc>)
  4047e6:	b113      	cbz	r3, 4047ee <register_fini+0xa>
  4047e8:	4802      	ldr	r0, [pc, #8]	; (4047f4 <register_fini+0x10>)
  4047ea:	f000 b805 	b.w	4047f8 <atexit>
  4047ee:	4770      	bx	lr
  4047f0:	00000000 	.word	0x00000000
  4047f4:	00404805 	.word	0x00404805

004047f8 <atexit>:
  4047f8:	2300      	movs	r3, #0
  4047fa:	4601      	mov	r1, r0
  4047fc:	461a      	mov	r2, r3
  4047fe:	4618      	mov	r0, r3
  404800:	f000 b81e 	b.w	404840 <__register_exitproc>

00404804 <__libc_fini_array>:
  404804:	b538      	push	{r3, r4, r5, lr}
  404806:	4c0a      	ldr	r4, [pc, #40]	; (404830 <__libc_fini_array+0x2c>)
  404808:	4d0a      	ldr	r5, [pc, #40]	; (404834 <__libc_fini_array+0x30>)
  40480a:	1b64      	subs	r4, r4, r5
  40480c:	10a4      	asrs	r4, r4, #2
  40480e:	d00a      	beq.n	404826 <__libc_fini_array+0x22>
  404810:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404814:	3b01      	subs	r3, #1
  404816:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40481a:	3c01      	subs	r4, #1
  40481c:	f855 3904 	ldr.w	r3, [r5], #-4
  404820:	4798      	blx	r3
  404822:	2c00      	cmp	r4, #0
  404824:	d1f9      	bne.n	40481a <__libc_fini_array+0x16>
  404826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40482a:	f000 b8d5 	b.w	4049d8 <_fini>
  40482e:	bf00      	nop
  404830:	004049e8 	.word	0x004049e8
  404834:	004049e4 	.word	0x004049e4

00404838 <__retarget_lock_acquire_recursive>:
  404838:	4770      	bx	lr
  40483a:	bf00      	nop

0040483c <__retarget_lock_release_recursive>:
  40483c:	4770      	bx	lr
  40483e:	bf00      	nop

00404840 <__register_exitproc>:
  404840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404844:	4d2c      	ldr	r5, [pc, #176]	; (4048f8 <__register_exitproc+0xb8>)
  404846:	4606      	mov	r6, r0
  404848:	6828      	ldr	r0, [r5, #0]
  40484a:	4698      	mov	r8, r3
  40484c:	460f      	mov	r7, r1
  40484e:	4691      	mov	r9, r2
  404850:	f7ff fff2 	bl	404838 <__retarget_lock_acquire_recursive>
  404854:	4b29      	ldr	r3, [pc, #164]	; (4048fc <__register_exitproc+0xbc>)
  404856:	681c      	ldr	r4, [r3, #0]
  404858:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40485c:	2b00      	cmp	r3, #0
  40485e:	d03e      	beq.n	4048de <__register_exitproc+0x9e>
  404860:	685a      	ldr	r2, [r3, #4]
  404862:	2a1f      	cmp	r2, #31
  404864:	dc1c      	bgt.n	4048a0 <__register_exitproc+0x60>
  404866:	f102 0e01 	add.w	lr, r2, #1
  40486a:	b176      	cbz	r6, 40488a <__register_exitproc+0x4a>
  40486c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404870:	2401      	movs	r4, #1
  404872:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  404876:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40487a:	4094      	lsls	r4, r2
  40487c:	4320      	orrs	r0, r4
  40487e:	2e02      	cmp	r6, #2
  404880:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  404884:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  404888:	d023      	beq.n	4048d2 <__register_exitproc+0x92>
  40488a:	3202      	adds	r2, #2
  40488c:	f8c3 e004 	str.w	lr, [r3, #4]
  404890:	6828      	ldr	r0, [r5, #0]
  404892:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  404896:	f7ff ffd1 	bl	40483c <__retarget_lock_release_recursive>
  40489a:	2000      	movs	r0, #0
  40489c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4048a0:	4b17      	ldr	r3, [pc, #92]	; (404900 <__register_exitproc+0xc0>)
  4048a2:	b30b      	cbz	r3, 4048e8 <__register_exitproc+0xa8>
  4048a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4048a8:	f3af 8000 	nop.w
  4048ac:	4603      	mov	r3, r0
  4048ae:	b1d8      	cbz	r0, 4048e8 <__register_exitproc+0xa8>
  4048b0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4048b4:	6002      	str	r2, [r0, #0]
  4048b6:	2100      	movs	r1, #0
  4048b8:	6041      	str	r1, [r0, #4]
  4048ba:	460a      	mov	r2, r1
  4048bc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4048c0:	f04f 0e01 	mov.w	lr, #1
  4048c4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4048c8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4048cc:	2e00      	cmp	r6, #0
  4048ce:	d0dc      	beq.n	40488a <__register_exitproc+0x4a>
  4048d0:	e7cc      	b.n	40486c <__register_exitproc+0x2c>
  4048d2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4048d6:	430c      	orrs	r4, r1
  4048d8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4048dc:	e7d5      	b.n	40488a <__register_exitproc+0x4a>
  4048de:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4048e2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4048e6:	e7bb      	b.n	404860 <__register_exitproc+0x20>
  4048e8:	6828      	ldr	r0, [r5, #0]
  4048ea:	f7ff ffa7 	bl	40483c <__retarget_lock_release_recursive>
  4048ee:	f04f 30ff 	mov.w	r0, #4294967295
  4048f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4048f6:	bf00      	nop
  4048f8:	20000448 	.word	0x20000448
  4048fc:	004049c0 	.word	0x004049c0
  404900:	00000000 	.word	0x00000000
  404904:	454c4449 	.word	0x454c4449
  404908:	00000000 	.word	0x00000000
  40490c:	00000a0d 	.word	0x00000a0d
  404910:	09097325 	.word	0x09097325
  404914:	25096325 	.word	0x25096325
  404918:	75250975 	.word	0x75250975
  40491c:	0d752509 	.word	0x0d752509
  404920:	0000000a 	.word	0x0000000a
  404924:	20726d54 	.word	0x20726d54
  404928:	00637653 	.word	0x00637653
  40492c:	726e6163 	.word	0x726e6163
  404930:	00000078 	.word	0x00000078
  404934:	736e6163 	.word	0x736e6163
  404938:	75746174 	.word	0x75746174
  40493c:	00000073 	.word	0x00000073
  404940:	74736574 	.word	0x74736574
  404944:	6b736154 	.word	0x6b736154
  404948:	00000000 	.word	0x00000000
  40494c:	6f636e65 	.word	0x6f636e65
  404950:	00726564 	.word	0x00726564

00404954 <can_bit_time>:
  404954:	02020308 02094b03 43020303 0303030a     .....K.....C....
  404964:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
  404974:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
  404984:	05050510 06114504 47040505 06060512     .....E.....G....
  404994:	06134304 44040606 06060714 08154604     .C.....D.....F..
  4049a4:	47040606 07070716 08174404 46040708     ...G.....D.....F
  4049b4:	08080718 08194304 44040808              .....C.....D

004049c0 <_global_impure_ptr>:
  4049c0:	20000020                                 .. 

004049c4 <_init>:
  4049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4049c6:	bf00      	nop
  4049c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4049ca:	bc08      	pop	{r3}
  4049cc:	469e      	mov	lr, r3
  4049ce:	4770      	bx	lr

004049d0 <__init_array_start>:
  4049d0:	004047e5 	.word	0x004047e5

004049d4 <__frame_dummy_init_array_entry>:
  4049d4:	0040011d                                ..@.

004049d8 <_fini>:
  4049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4049da:	bf00      	nop
  4049dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4049de:	bc08      	pop	{r3}
  4049e0:	469e      	mov	lr, r3
  4049e2:	4770      	bx	lr

004049e4 <__fini_array_start>:
  4049e4:	004000f9 	.word	0x004000f9

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <xFreeBytesRemaining>:
20000014:	a000 0000                                   ....

20000018 <xNextTaskUnblockTime>:
20000018:	ffff ffff 0000 0000                         ........

20000020 <impure_data>:
20000020:	0000 0000 030c 2000 0374 2000 03dc 2000     ....... t.. ... 
	...
200000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000448 <__atexit_recursive_mutex>:
20000448:	a670 2000                                   p.. 
